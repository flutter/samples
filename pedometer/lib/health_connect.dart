// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `androidx.health.connect.client.HealthConnectClient$Companion`
class HealthConnectClient$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthConnectClient$Companion> $type;

  @jni$_.internal
  HealthConnectClient$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/HealthConnectClient$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HealthConnectClient$Companion$NullableType();
  static const type = $HealthConnectClient$Companion$Type();
  static final _id_DEFAULT_PROVIDER_PACKAGE_NAME = _class.staticFieldId(
    r'DEFAULT_PROVIDER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _id_DEFAULT_PROVIDER_PACKAGE_NAME.get(_class, const jni$_.JStringType());

  static final _id_HEALTH_CONNECT_CLIENT_TAG = _class.staticFieldId(
    r'HEALTH_CONNECT_CLIENT_TAG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _id_HEALTH_CONNECT_CLIENT_TAG.get(_class, const jni$_.JStringType());

  static final _id_isAvailable = _class.instanceMethodId(
    r'isAvailable',
    r'(Landroid/content/Context;Ljava/util/List;)Z',
  );

  static final _isAvailable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean isAvailable(android.content.Context context, java.util.List list)`
  bool isAvailable(
    Context context,
    jni$_.JList<jni$_.JString> list,
  ) {
    final _$context = context.reference;
    final _$list = list.reference;
    return _isAvailable(
            reference.pointer,
            _id_isAvailable as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$list.pointer)
        .boolean;
  }

  static final _id_getOrCreate = _class.instanceMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;Ljava/util/List;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate(
    Context context,
    jni$_.JList<jni$_.JString> list,
  ) {
    final _$context = context.reference;
    final _$list = list.reference;
    return _getOrCreate(
            reference.pointer,
            _id_getOrCreate as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$list.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }

  static final _id_isAvailable$1 = _class.instanceMethodId(
    r'isAvailable',
    r'(Landroid/content/Context;)Z',
  );

  static final _isAvailable$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean isAvailable(android.content.Context context)`
  bool isAvailable$1(
    Context context,
  ) {
    final _$context = context.reference;
    return _isAvailable$1(reference.pointer,
            _id_isAvailable$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .boolean;
  }

  static final _id_getOrCreate$1 = _class.instanceMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate$1(
    Context context,
  ) {
    final _$context = context.reference;
    return _getOrCreate$1(reference.pointer,
            _id_getOrCreate$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }
}

final class $HealthConnectClient$Companion$NullableType
    extends jni$_.JObjType<HealthConnectClient$Companion?> {
  @jni$_.internal
  const $HealthConnectClient$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$Companion;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthConnectClient$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$Companion$NullableType) &&
        other is $HealthConnectClient$Companion$NullableType;
  }
}

final class $HealthConnectClient$Companion$Type
    extends jni$_.JObjType<HealthConnectClient$Companion> {
  @jni$_.internal
  const $HealthConnectClient$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$Companion;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$Companion fromReference(jni$_.JReference reference) =>
      HealthConnectClient$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$Companion?> get nullableType =>
      const $HealthConnectClient$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$Companion$Type) &&
        other is $HealthConnectClient$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.HealthConnectClient`
class HealthConnectClient extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthConnectClient> $type;

  @jni$_.internal
  HealthConnectClient.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/HealthConnectClient');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HealthConnectClient$NullableType();
  static const type = $HealthConnectClient$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/HealthConnectClient$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.HealthConnectClient$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient$Companion get Companion =>
      _id_Companion.get(_class, const $HealthConnectClient$Companion$Type());

  static final _id_DEFAULT_PROVIDER_PACKAGE_NAME = _class.staticFieldId(
    r'DEFAULT_PROVIDER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _id_DEFAULT_PROVIDER_PACKAGE_NAME.get(_class, const jni$_.JStringType());

  static final _id_HEALTH_CONNECT_CLIENT_TAG = _class.staticFieldId(
    r'HEALTH_CONNECT_CLIENT_TAG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _id_HEALTH_CONNECT_CLIENT_TAG.get(_class, const jni$_.JStringType());

  static final _id_getPermissionController = _class.instanceMethodId(
    r'getPermissionController',
    r'()Landroidx/health/connect/client/PermissionController;',
  );

  static final _getPermissionController = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract androidx.health.connect.client.PermissionController getPermissionController()`
  /// The returned object must be released after use, by calling the [release] method.
  PermissionController getPermissionController() {
    return _getPermissionController(reference.pointer,
            _id_getPermissionController as jni$_.JMethodIDPtr)
        .object<PermissionController>(const $PermissionController$Type());
  }

  static final _id_insertRecords = _class.instanceMethodId(
    r'insertRecords',
    r'(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _insertRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object insertRecords(java.util.List list, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> insertRecords(
    jni$_.JList<jni$_.JObject?> list,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$list = list.reference;
    _insertRecords(reference.pointer, _id_insertRecords as jni$_.JMethodIDPtr,
            _$list.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_updateRecords = _class.instanceMethodId(
    r'updateRecords',
    r'(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _updateRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object updateRecords(java.util.List list, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> updateRecords(
    jni$_.JList<jni$_.JObject?> list,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$list = list.reference;
    _updateRecords(reference.pointer, _id_updateRecords as jni$_.JMethodIDPtr,
            _$list.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_deleteRecords = _class.instanceMethodId(
    r'deleteRecords',
    r'(Lkotlin/reflect/KClass;Ljava/util/List;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, java.util.List list, java.util.List list1, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> deleteRecords(
    jni$_.JObject kClass,
    jni$_.JList<jni$_.JString?> list,
    jni$_.JList<jni$_.JString?> list1,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$kClass = kClass.reference;
    final _$list = list.reference;
    final _$list1 = list1.reference;
    _deleteRecords(
            reference.pointer,
            _id_deleteRecords as jni$_.JMethodIDPtr,
            _$kClass.pointer,
            _$list.pointer,
            _$list1.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_deleteRecords$1 = _class.instanceMethodId(
    r'deleteRecords',
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteRecords$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> deleteRecords$1(
    jni$_.JObject kClass,
    TimeRangeFilter timeRangeFilter,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$kClass = kClass.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    _deleteRecords$1(
            reference.pointer,
            _id_deleteRecords$1 as jni$_.JMethodIDPtr,
            _$kClass.pointer,
            _$timeRangeFilter.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_readRecord = _class.instanceMethodId(
    r'readRecord',
    r'(Lkotlin/reflect/KClass;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _readRecord = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object readRecord(kotlin.reflect.KClass kClass, java.lang.String string, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> readRecord<$T extends jni$_.JObject>(
    jni$_.JObject kClass,
    jni$_.JString string, {
    required jni$_.JObjType<$T> T,
  }) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$kClass = kClass.reference;
    final _$string = string.reference;
    _readRecord(reference.pointer, _id_readRecord as jni$_.JMethodIDPtr,
            _$kClass.pointer, _$string.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_readRecords = _class.instanceMethodId(
    r'readRecords',
    r'(Landroidx/health/connect/client/request/ReadRecordsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _readRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object readRecords(androidx.health.connect.client.request.ReadRecordsRequest readRecordsRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> readRecords<$T extends jni$_.JObject>(
    ReadRecordsRequest<$T> readRecordsRequest, {
    jni$_.JObjType<$T>? T,
  }) async {
    T ??= jni$_.lowestCommonSuperType([
      (readRecordsRequest.$type as $ReadRecordsRequest$Type<core$_.dynamic>).T,
    ]) as jni$_.JObjType<$T>;
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$readRecordsRequest = readRecordsRequest.reference;
    _readRecords(reference.pointer, _id_readRecords as jni$_.JMethodIDPtr,
            _$readRecordsRequest.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_aggregate = _class.instanceMethodId(
    r'aggregate',
    r'(Landroidx/health/connect/client/request/AggregateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _aggregate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object aggregate(androidx.health.connect.client.request.AggregateRequest aggregateRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<AggregationResult> aggregate(
    AggregateRequest aggregateRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$aggregateRequest = aggregateRequest.reference;
    _aggregate(reference.pointer, _id_aggregate as jni$_.JMethodIDPtr,
            _$aggregateRequest.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const $AggregationResult$Type().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const $AggregationResult$Type().fromReference($o);
  }

  static final _id_aggregateGroupByDuration = _class.instanceMethodId(
    r'aggregateGroupByDuration',
    r'(Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _aggregateGroupByDuration = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest aggregateGroupByDurationRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JList<jni$_.JObject>> aggregateGroupByDuration(
    AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$aggregateGroupByDurationRequest =
        aggregateGroupByDurationRequest.reference;
    _aggregateGroupByDuration(
            reference.pointer,
            _id_aggregateGroupByDuration as jni$_.JMethodIDPtr,
            _$aggregateGroupByDurationRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType())
        .jClass
        .reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType())
        .fromReference($o);
  }

  static final _id_aggregateGroupByPeriod = _class.instanceMethodId(
    r'aggregateGroupByPeriod',
    r'(Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _aggregateGroupByPeriod = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JList<jni$_.JObject>> aggregateGroupByPeriod(
    AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$aggregateGroupByPeriodRequest =
        aggregateGroupByPeriodRequest.reference;
    _aggregateGroupByPeriod(
            reference.pointer,
            _id_aggregateGroupByPeriod as jni$_.JMethodIDPtr,
            _$aggregateGroupByPeriodRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType())
        .jClass
        .reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType())
        .fromReference($o);
  }

  static final _id_getChangesToken = _class.instanceMethodId(
    r'getChangesToken',
    r'(Landroidx/health/connect/client/request/ChangesTokenRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getChangesToken = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest changesTokenRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString> getChangesToken(
    ChangesTokenRequest changesTokenRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$changesTokenRequest = changesTokenRequest.reference;
    _getChangesToken(
            reference.pointer,
            _id_getChangesToken as jni$_.JMethodIDPtr,
            _$changesTokenRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JStringType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JStringType().fromReference($o);
  }

  static final _id_registerForDataNotifications = _class.instanceMethodId(
    r'registerForDataNotifications',
    r'(Ljava/lang/String;Ljava/lang/Iterable;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _registerForDataNotifications =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object registerForDataNotifications(java.lang.String string, java.lang.Iterable iterable, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> registerForDataNotifications(
    jni$_.JString string,
    jni$_.JObject iterable,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string.reference;
    final _$iterable = iterable.reference;
    _registerForDataNotifications(
            reference.pointer,
            _id_registerForDataNotifications as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$iterable.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_unregisterFromDataNotifications = _class.instanceMethodId(
    r'unregisterFromDataNotifications',
    r'(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _unregisterFromDataNotifications =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object unregisterFromDataNotifications(java.lang.String string, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> unregisterFromDataNotifications(
    jni$_.JString string,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string.reference;
    _unregisterFromDataNotifications(
            reference.pointer,
            _id_unregisterFromDataNotifications as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_getChanges = _class.instanceMethodId(
    r'getChanges',
    r'(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getChanges = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getChanges(java.lang.String string, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> getChanges(
    jni$_.JString string,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string.reference;
    _getChanges(reference.pointer, _id_getChanges as jni$_.JMethodIDPtr,
            _$string.pointer, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_isAvailable = _class.staticMethodId(
    r'isAvailable',
    r'(Landroid/content/Context;Ljava/util/List;)Z',
  );

  static final _isAvailable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public boolean isAvailable(android.content.Context context, java.util.List list)`
  static bool isAvailable(
    Context context,
    jni$_.JList<jni$_.JString?> list,
  ) {
    final _$context = context.reference;
    final _$list = list.reference;
    return _isAvailable(
            _class.reference.pointer,
            _id_isAvailable as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$list.pointer)
        .boolean;
  }

  static final _id_getOrCreate = _class.staticMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;Ljava/util/List;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.util.List list)`
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate(
    Context context,
    jni$_.JList<jni$_.JString?> list,
  ) {
    final _$context = context.reference;
    final _$list = list.reference;
    return _getOrCreate(
            _class.reference.pointer,
            _id_getOrCreate as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$list.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }

  static final _id_isAvailable$1 = _class.staticMethodId(
    r'isAvailable',
    r'(Landroid/content/Context;)Z',
  );

  static final _isAvailable$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public boolean isAvailable(android.content.Context context)`
  static bool isAvailable$1(
    Context context,
  ) {
    final _$context = context.reference;
    return _isAvailable$1(_class.reference.pointer,
            _id_isAvailable$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .boolean;
  }

  static final _id_getOrCreate$1 = _class.staticMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate$1(
    Context context,
  ) {
    final _$context = context.reference;
    return _getOrCreate$1(_class.reference.pointer,
            _id_getOrCreate$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $HealthConnectClient> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'getPermissionController()Landroidx/health/connect/client/PermissionController;') {
        final $r = _$impls[$p]!.getPermissionController();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'insertRecords(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.insertRecords(
          $a![0]!.as(
              const jni$_.JListType<jni$_.JObject?>(
                  jni$_.JObjectNullableType()),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'updateRecords(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.updateRecords(
          $a![0]!.as(
              const jni$_.JListType<jni$_.JObject?>(
                  jni$_.JObjectNullableType()),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'deleteRecords(Lkotlin/reflect/KClass;Ljava/util/List;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteRecords(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(
              const jni$_.JListType<jni$_.JString?>(
                  jni$_.JStringNullableType()),
              releaseOriginal: true),
          $a![2]!.as(
              const jni$_.JListType<jni$_.JString?>(
                  jni$_.JStringNullableType()),
              releaseOriginal: true),
          $a![3]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'deleteRecords(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteRecords$1(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const $TimeRangeFilter$Type(), releaseOriginal: true),
          $a![2]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'readRecord(Lkotlin/reflect/KClass;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.readRecord(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'readRecords(Landroidx/health/connect/client/request/ReadRecordsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.readRecords(
          $a![0]!.as(
              const $ReadRecordsRequest$Type<jni$_.JObject>(
                  jni$_.JObjectType()),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'aggregate(Landroidx/health/connect/client/request/AggregateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.aggregate(
          $a![0]!.as(const $AggregateRequest$Type(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'aggregateGroupByDuration(Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.aggregateGroupByDuration(
          $a![0]!.as(const $AggregateGroupByDurationRequest$Type(),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'aggregateGroupByPeriod(Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.aggregateGroupByPeriod(
          $a![0]!.as(const $AggregateGroupByPeriodRequest$Type(),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'getChangesToken(Landroidx/health/connect/client/request/ChangesTokenRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getChangesToken(
          $a![0]!.as(const $ChangesTokenRequest$Type(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'registerForDataNotifications(Ljava/lang/String;Ljava/lang/Iterable;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.registerForDataNotifications(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![2]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'unregisterFromDataNotifications(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.unregisterFromDataNotifications(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'getChanges(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getChanges(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'isAvailable(Landroid/content/Context;Ljava/util/List;)Z') {
        final $r = _$impls[$p]!.isAvailable(
          $a![0]!.as(const $Context$Type(), releaseOriginal: true),
          $a![1]!.as(
              const jni$_.JListType<jni$_.JString?>(
                  jni$_.JStringNullableType()),
              releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'getOrCreate(Landroid/content/Context;Ljava/util/List;)Landroidx/health/connect/client/HealthConnectClient;') {
        final $r = _$impls[$p]!.getOrCreate(
          $a![0]!.as(const $Context$Type(), releaseOriginal: true),
          $a![1]!.as(
              const jni$_.JListType<jni$_.JString?>(
                  jni$_.JStringNullableType()),
              releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'isAvailable(Landroid/content/Context;)Z') {
        final $r = _$impls[$p]!.isAvailable$1(
          $a![0]!.as(const $Context$Type(), releaseOriginal: true),
        );
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'getOrCreate(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;') {
        final $r = _$impls[$p]!.getOrCreate$1(
          $a![0]!.as(const $Context$Type(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $HealthConnectClient $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.HealthConnectClient',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory HealthConnectClient.implement(
    $HealthConnectClient $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return HealthConnectClient.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $HealthConnectClient {
  factory $HealthConnectClient({
    required PermissionController Function() getPermissionController,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        insertRecords,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        updateRecords,
    required jni$_.JObject Function(
            jni$_.JObject kClass,
            jni$_.JList<jni$_.JString?> list,
            jni$_.JList<jni$_.JString?> list1,
            jni$_.JObject continuation)
        deleteRecords,
    required jni$_.JObject Function(jni$_.JObject kClass,
            TimeRangeFilter timeRangeFilter, jni$_.JObject continuation)
        deleteRecords$1,
    required jni$_.JObject Function(jni$_.JObject kClass, jni$_.JString string,
            jni$_.JObject continuation)
        readRecord,
    required jni$_.JObject Function(
            ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
            jni$_.JObject continuation)
        readRecords,
    required jni$_.JObject Function(
            AggregateRequest aggregateRequest, jni$_.JObject continuation)
        aggregate,
    required jni$_.JObject Function(
            AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
            jni$_.JObject continuation)
        aggregateGroupByDuration,
    required jni$_.JObject Function(
            AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
            jni$_.JObject continuation)
        aggregateGroupByPeriod,
    required jni$_.JObject Function(
            ChangesTokenRequest changesTokenRequest, jni$_.JObject continuation)
        getChangesToken,
    required jni$_.JObject Function(jni$_.JString string,
            jni$_.JObject iterable, jni$_.JObject continuation)
        registerForDataNotifications,
    required jni$_.JObject Function(
            jni$_.JString string, jni$_.JObject continuation)
        unregisterFromDataNotifications,
    required jni$_.JObject Function(
            jni$_.JString string, jni$_.JObject continuation)
        getChanges,
    required bool Function(Context context, jni$_.JList<jni$_.JString?> list)
        isAvailable,
    required HealthConnectClient Function(
            Context context, jni$_.JList<jni$_.JString?> list)
        getOrCreate,
    required bool Function(Context context) isAvailable$1,
    required HealthConnectClient Function(Context context) getOrCreate$1,
  }) = _$HealthConnectClient;

  PermissionController getPermissionController();
  jni$_.JObject insertRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation);
  jni$_.JObject updateRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation);
  jni$_.JObject deleteRecords(
      jni$_.JObject kClass,
      jni$_.JList<jni$_.JString?> list,
      jni$_.JList<jni$_.JString?> list1,
      jni$_.JObject continuation);
  jni$_.JObject deleteRecords$1(jni$_.JObject kClass,
      TimeRangeFilter timeRangeFilter, jni$_.JObject continuation);
  jni$_.JObject readRecord(
      jni$_.JObject kClass, jni$_.JString string, jni$_.JObject continuation);
  jni$_.JObject readRecords(
      ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
      jni$_.JObject continuation);
  jni$_.JObject aggregate(
      AggregateRequest aggregateRequest, jni$_.JObject continuation);
  jni$_.JObject aggregateGroupByDuration(
      AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
      jni$_.JObject continuation);
  jni$_.JObject aggregateGroupByPeriod(
      AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
      jni$_.JObject continuation);
  jni$_.JObject getChangesToken(
      ChangesTokenRequest changesTokenRequest, jni$_.JObject continuation);
  jni$_.JObject registerForDataNotifications(
      jni$_.JString string, jni$_.JObject iterable, jni$_.JObject continuation);
  jni$_.JObject unregisterFromDataNotifications(
      jni$_.JString string, jni$_.JObject continuation);
  jni$_.JObject getChanges(jni$_.JString string, jni$_.JObject continuation);
  bool isAvailable(Context context, jni$_.JList<jni$_.JString?> list);
  HealthConnectClient getOrCreate(
      Context context, jni$_.JList<jni$_.JString?> list);
  bool isAvailable$1(Context context);
  HealthConnectClient getOrCreate$1(Context context);
}

final class _$HealthConnectClient with $HealthConnectClient {
  _$HealthConnectClient({
    required PermissionController Function() getPermissionController,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        insertRecords,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        updateRecords,
    required jni$_.JObject Function(
            jni$_.JObject kClass,
            jni$_.JList<jni$_.JString?> list,
            jni$_.JList<jni$_.JString?> list1,
            jni$_.JObject continuation)
        deleteRecords,
    required jni$_.JObject Function(jni$_.JObject kClass,
            TimeRangeFilter timeRangeFilter, jni$_.JObject continuation)
        deleteRecords$1,
    required jni$_.JObject Function(jni$_.JObject kClass, jni$_.JString string,
            jni$_.JObject continuation)
        readRecord,
    required jni$_.JObject Function(
            ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
            jni$_.JObject continuation)
        readRecords,
    required jni$_.JObject Function(
            AggregateRequest aggregateRequest, jni$_.JObject continuation)
        aggregate,
    required jni$_.JObject Function(
            AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
            jni$_.JObject continuation)
        aggregateGroupByDuration,
    required jni$_.JObject Function(
            AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
            jni$_.JObject continuation)
        aggregateGroupByPeriod,
    required jni$_.JObject Function(
            ChangesTokenRequest changesTokenRequest, jni$_.JObject continuation)
        getChangesToken,
    required jni$_.JObject Function(jni$_.JString string,
            jni$_.JObject iterable, jni$_.JObject continuation)
        registerForDataNotifications,
    required jni$_.JObject Function(
            jni$_.JString string, jni$_.JObject continuation)
        unregisterFromDataNotifications,
    required jni$_.JObject Function(
            jni$_.JString string, jni$_.JObject continuation)
        getChanges,
    required bool Function(Context context, jni$_.JList<jni$_.JString?> list)
        isAvailable,
    required HealthConnectClient Function(
            Context context, jni$_.JList<jni$_.JString?> list)
        getOrCreate,
    required bool Function(Context context) isAvailable$1,
    required HealthConnectClient Function(Context context) getOrCreate$1,
  })  : _getPermissionController = getPermissionController,
        _insertRecords = insertRecords,
        _updateRecords = updateRecords,
        _deleteRecords = deleteRecords,
        _deleteRecords$1 = deleteRecords$1,
        _readRecord = readRecord,
        _readRecords = readRecords,
        _aggregate = aggregate,
        _aggregateGroupByDuration = aggregateGroupByDuration,
        _aggregateGroupByPeriod = aggregateGroupByPeriod,
        _getChangesToken = getChangesToken,
        _registerForDataNotifications = registerForDataNotifications,
        _unregisterFromDataNotifications = unregisterFromDataNotifications,
        _getChanges = getChanges,
        _isAvailable = isAvailable,
        _getOrCreate = getOrCreate,
        _isAvailable$1 = isAvailable$1,
        _getOrCreate$1 = getOrCreate$1;

  final PermissionController Function() _getPermissionController;
  final jni$_.JObject Function(
          jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
      _insertRecords;
  final jni$_.JObject Function(
          jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
      _updateRecords;
  final jni$_.JObject Function(
      jni$_.JObject kClass,
      jni$_.JList<jni$_.JString?> list,
      jni$_.JList<jni$_.JString?> list1,
      jni$_.JObject continuation) _deleteRecords;
  final jni$_.JObject Function(
      jni$_.JObject kClass,
      TimeRangeFilter timeRangeFilter,
      jni$_.JObject continuation) _deleteRecords$1;
  final jni$_.JObject Function(jni$_.JObject kClass, jni$_.JString string,
      jni$_.JObject continuation) _readRecord;
  final jni$_.JObject Function(
      ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
      jni$_.JObject continuation) _readRecords;
  final jni$_.JObject Function(
      AggregateRequest aggregateRequest, jni$_.JObject continuation) _aggregate;
  final jni$_.JObject Function(
      AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
      jni$_.JObject continuation) _aggregateGroupByDuration;
  final jni$_.JObject Function(
      AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
      jni$_.JObject continuation) _aggregateGroupByPeriod;
  final jni$_.JObject Function(
          ChangesTokenRequest changesTokenRequest, jni$_.JObject continuation)
      _getChangesToken;
  final jni$_.JObject Function(jni$_.JString string, jni$_.JObject iterable,
      jni$_.JObject continuation) _registerForDataNotifications;
  final jni$_.JObject Function(jni$_.JString string, jni$_.JObject continuation)
      _unregisterFromDataNotifications;
  final jni$_.JObject Function(jni$_.JString string, jni$_.JObject continuation)
      _getChanges;
  final bool Function(Context context, jni$_.JList<jni$_.JString?> list)
      _isAvailable;
  final HealthConnectClient Function(
      Context context, jni$_.JList<jni$_.JString?> list) _getOrCreate;
  final bool Function(Context context) _isAvailable$1;
  final HealthConnectClient Function(Context context) _getOrCreate$1;

  PermissionController getPermissionController() {
    return _getPermissionController();
  }

  jni$_.JObject insertRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation) {
    return _insertRecords(list, continuation);
  }

  jni$_.JObject updateRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation) {
    return _updateRecords(list, continuation);
  }

  jni$_.JObject deleteRecords(
      jni$_.JObject kClass,
      jni$_.JList<jni$_.JString?> list,
      jni$_.JList<jni$_.JString?> list1,
      jni$_.JObject continuation) {
    return _deleteRecords(kClass, list, list1, continuation);
  }

  jni$_.JObject deleteRecords$1(jni$_.JObject kClass,
      TimeRangeFilter timeRangeFilter, jni$_.JObject continuation) {
    return _deleteRecords$1(kClass, timeRangeFilter, continuation);
  }

  jni$_.JObject readRecord(
      jni$_.JObject kClass, jni$_.JString string, jni$_.JObject continuation) {
    return _readRecord(kClass, string, continuation);
  }

  jni$_.JObject readRecords(
      ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
      jni$_.JObject continuation) {
    return _readRecords(readRecordsRequest, continuation);
  }

  jni$_.JObject aggregate(
      AggregateRequest aggregateRequest, jni$_.JObject continuation) {
    return _aggregate(aggregateRequest, continuation);
  }

  jni$_.JObject aggregateGroupByDuration(
      AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
      jni$_.JObject continuation) {
    return _aggregateGroupByDuration(
        aggregateGroupByDurationRequest, continuation);
  }

  jni$_.JObject aggregateGroupByPeriod(
      AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
      jni$_.JObject continuation) {
    return _aggregateGroupByPeriod(aggregateGroupByPeriodRequest, continuation);
  }

  jni$_.JObject getChangesToken(
      ChangesTokenRequest changesTokenRequest, jni$_.JObject continuation) {
    return _getChangesToken(changesTokenRequest, continuation);
  }

  jni$_.JObject registerForDataNotifications(jni$_.JString string,
      jni$_.JObject iterable, jni$_.JObject continuation) {
    return _registerForDataNotifications(string, iterable, continuation);
  }

  jni$_.JObject unregisterFromDataNotifications(
      jni$_.JString string, jni$_.JObject continuation) {
    return _unregisterFromDataNotifications(string, continuation);
  }

  jni$_.JObject getChanges(jni$_.JString string, jni$_.JObject continuation) {
    return _getChanges(string, continuation);
  }

  bool isAvailable(Context context, jni$_.JList<jni$_.JString?> list) {
    return _isAvailable(context, list);
  }

  HealthConnectClient getOrCreate(
      Context context, jni$_.JList<jni$_.JString?> list) {
    return _getOrCreate(context, list);
  }

  bool isAvailable$1(Context context) {
    return _isAvailable$1(context);
  }

  HealthConnectClient getOrCreate$1(Context context) {
    return _getOrCreate$1(context);
  }
}

final class $HealthConnectClient$NullableType
    extends jni$_.JObjType<HealthConnectClient?> {
  @jni$_.internal
  const $HealthConnectClient$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthConnectClient.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$NullableType) &&
        other is $HealthConnectClient$NullableType;
  }
}

final class $HealthConnectClient$Type
    extends jni$_.JObjType<HealthConnectClient> {
  @jni$_.internal
  const $HealthConnectClient$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient fromReference(jni$_.JReference reference) =>
      HealthConnectClient.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient?> get nullableType =>
      const $HealthConnectClient$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$Type) &&
        other is $HealthConnectClient$Type;
  }
}

/// from: `androidx.health.connect.client.PermissionController$Companion`
class PermissionController$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PermissionController$Companion> $type;

  @jni$_.internal
  PermissionController$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/PermissionController$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PermissionController$Companion$NullableType();
  static const type = $PermissionController$Companion$Type();
  static final _id_createRequestPermissionResultContract =
      _class.instanceMethodId(
    r'createRequestPermissionResultContract',
    r'(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject createRequestPermissionResultContract(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _createRequestPermissionResultContract(
            reference.pointer,
            _id_createRequestPermissionResultContract as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_createRequestPermissionResultContract$1 =
      _class.instanceMethodId(
    r'createRequestPermissionResultContract',
    r'()Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject createRequestPermissionResultContract$1() {
    return _createRequestPermissionResultContract$1(reference.pointer,
            _id_createRequestPermissionResultContract$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }
}

final class $PermissionController$Companion$NullableType
    extends jni$_.JObjType<PermissionController$Companion?> {
  @jni$_.internal
  const $PermissionController$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController$Companion;';

  @jni$_.internal
  @core$_.override
  PermissionController$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PermissionController$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PermissionController$Companion$NullableType) &&
        other is $PermissionController$Companion$NullableType;
  }
}

final class $PermissionController$Companion$Type
    extends jni$_.JObjType<PermissionController$Companion> {
  @jni$_.internal
  const $PermissionController$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController$Companion;';

  @jni$_.internal
  @core$_.override
  PermissionController$Companion fromReference(jni$_.JReference reference) =>
      PermissionController$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController$Companion?> get nullableType =>
      const $PermissionController$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController$Companion$Type) &&
        other is $PermissionController$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.PermissionController`
class PermissionController extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PermissionController> $type;

  @jni$_.internal
  PermissionController.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/PermissionController');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PermissionController$NullableType();
  static const type = $PermissionController$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/PermissionController$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.PermissionController$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionController$Companion get Companion =>
      _id_Companion.get(_class, const $PermissionController$Companion$Type());

  static final _id_getGrantedPermissions = _class.instanceMethodId(
    r'getGrantedPermissions',
    r'(Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getGrantedPermissions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getGrantedPermissions(java.util.Set set, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JSet<jni$_.JObject>> getGrantedPermissions(
    jni$_.JSet<jni$_.JObject?> set,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$set = set.reference;
    _getGrantedPermissions(
            reference.pointer,
            _id_getGrantedPermissions as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JSetType<jni$_.JObject>(jni$_.JObjectType())
        .jClass
        .reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JSetType<jni$_.JObject>(jni$_.JObjectType())
        .fromReference($o);
  }

  static final _id_revokeAllPermissions = _class.instanceMethodId(
    r'revokeAllPermissions',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _revokeAllPermissions = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object revokeAllPermissions(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> revokeAllPermissions() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _revokeAllPermissions(
            reference.pointer,
            _id_revokeAllPermissions as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JObjectType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JObjectType().fromReference($o);
  }

  static final _id_createRequestPermissionResultContract =
      _class.staticMethodId(
    r'createRequestPermissionResultContract',
    r'(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject createRequestPermissionResultContract(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _createRequestPermissionResultContract(
            _class.reference.pointer,
            _id_createRequestPermissionResultContract as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_createRequestPermissionResultContract$1 =
      _class.staticMethodId(
    r'createRequestPermissionResultContract',
    r'()Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject createRequestPermissionResultContract$1() {
    return _createRequestPermissionResultContract$1(_class.reference.pointer,
            _id_createRequestPermissionResultContract$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PermissionController> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'getGrantedPermissions(Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getGrantedPermissions(
          $a![0]!.as(
              const jni$_.JSetType<jni$_.JObject?>(jni$_.JObjectNullableType()),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'revokeAllPermissions(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.revokeAllPermissions(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'createRequestPermissionResultContract(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;') {
        final $r = _$impls[$p]!.createRequestPermissionResultContract(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'createRequestPermissionResultContract()Landroidx/activity/result/contract/ActivityResultContract;') {
        final $r = _$impls[$p]!.createRequestPermissionResultContract$1();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PermissionController $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.PermissionController',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PermissionController.implement(
    $PermissionController $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PermissionController.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PermissionController {
  factory $PermissionController({
    required jni$_.JObject Function(
            jni$_.JSet<jni$_.JObject?> set, jni$_.JObject continuation)
        getGrantedPermissions,
    required jni$_.JObject Function(jni$_.JObject continuation)
        revokeAllPermissions,
    required jni$_.JObject Function(jni$_.JString string)
        createRequestPermissionResultContract,
    required jni$_.JObject Function() createRequestPermissionResultContract$1,
  }) = _$PermissionController;

  jni$_.JObject getGrantedPermissions(
      jni$_.JSet<jni$_.JObject?> set, jni$_.JObject continuation);
  jni$_.JObject revokeAllPermissions(jni$_.JObject continuation);
  jni$_.JObject createRequestPermissionResultContract(jni$_.JString string);
  jni$_.JObject createRequestPermissionResultContract$1();
}

final class _$PermissionController with $PermissionController {
  _$PermissionController({
    required jni$_.JObject Function(
            jni$_.JSet<jni$_.JObject?> set, jni$_.JObject continuation)
        getGrantedPermissions,
    required jni$_.JObject Function(jni$_.JObject continuation)
        revokeAllPermissions,
    required jni$_.JObject Function(jni$_.JString string)
        createRequestPermissionResultContract,
    required jni$_.JObject Function() createRequestPermissionResultContract$1,
  })  : _getGrantedPermissions = getGrantedPermissions,
        _revokeAllPermissions = revokeAllPermissions,
        _createRequestPermissionResultContract =
            createRequestPermissionResultContract,
        _createRequestPermissionResultContract$1 =
            createRequestPermissionResultContract$1;

  final jni$_.JObject Function(
          jni$_.JSet<jni$_.JObject?> set, jni$_.JObject continuation)
      _getGrantedPermissions;
  final jni$_.JObject Function(jni$_.JObject continuation)
      _revokeAllPermissions;
  final jni$_.JObject Function(jni$_.JString string)
      _createRequestPermissionResultContract;
  final jni$_.JObject Function() _createRequestPermissionResultContract$1;

  jni$_.JObject getGrantedPermissions(
      jni$_.JSet<jni$_.JObject?> set, jni$_.JObject continuation) {
    return _getGrantedPermissions(set, continuation);
  }

  jni$_.JObject revokeAllPermissions(jni$_.JObject continuation) {
    return _revokeAllPermissions(continuation);
  }

  jni$_.JObject createRequestPermissionResultContract(jni$_.JString string) {
    return _createRequestPermissionResultContract(string);
  }

  jni$_.JObject createRequestPermissionResultContract$1() {
    return _createRequestPermissionResultContract$1();
  }
}

final class $PermissionController$NullableType
    extends jni$_.JObjType<PermissionController?> {
  @jni$_.internal
  const $PermissionController$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController;';

  @jni$_.internal
  @core$_.override
  PermissionController? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PermissionController.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController$NullableType) &&
        other is $PermissionController$NullableType;
  }
}

final class $PermissionController$Type
    extends jni$_.JObjType<PermissionController> {
  @jni$_.internal
  const $PermissionController$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController;';

  @jni$_.internal
  @core$_.override
  PermissionController fromReference(jni$_.JReference reference) =>
      PermissionController.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController?> get nullableType =>
      const $PermissionController$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController$Type) &&
        other is $PermissionController$Type;
  }
}

/// from: `androidx.health.connect.client.records.StepsRecord$Companion`
class StepsRecord$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<StepsRecord$Companion> $type;

  @jni$_.internal
  StepsRecord$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/StepsRecord$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $StepsRecord$Companion$NullableType();
  static const type = $StepsRecord$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return StepsRecord$Companion.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $StepsRecord$Companion$NullableType
    extends jni$_.JObjType<StepsRecord$Companion?> {
  @jni$_.internal
  const $StepsRecord$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/StepsRecord$Companion;';

  @jni$_.internal
  @core$_.override
  StepsRecord$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : StepsRecord$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<StepsRecord$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($StepsRecord$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecord$Companion$NullableType) &&
        other is $StepsRecord$Companion$NullableType;
  }
}

final class $StepsRecord$Companion$Type
    extends jni$_.JObjType<StepsRecord$Companion> {
  @jni$_.internal
  const $StepsRecord$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/StepsRecord$Companion;';

  @jni$_.internal
  @core$_.override
  StepsRecord$Companion fromReference(jni$_.JReference reference) =>
      StepsRecord$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<StepsRecord$Companion?> get nullableType =>
      const $StepsRecord$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($StepsRecord$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecord$Companion$Type) &&
        other is $StepsRecord$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.records.StepsRecord`
class StepsRecord extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<StepsRecord> $type;

  @jni$_.internal
  StepsRecord.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/StepsRecord');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $StepsRecord$NullableType();
  static const type = $StepsRecord$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/records/StepsRecord$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.records.StepsRecord$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static StepsRecord$Companion get Companion =>
      _id_Companion.get(_class, const $StepsRecord$Companion$Type());

  static final _id_COUNT_TOTAL = _class.staticFieldId(
    r'COUNT_TOTAL',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric COUNT_TOTAL`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric<jni$_.JLong> get COUNT_TOTAL => _id_COUNT_TOTAL.get(
      _class, const $AggregateMetric$Type<jni$_.JLong>(jni$_.JLongType()));

  static final _id_new$ = _class.constructorId(
    r'(JLjava/time/Instant;Ljava/time/ZoneOffset;Ljava/time/Instant;Ljava/time/ZoneOffset;Landroidx/health/connect/client/records/metadata/Metadata;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(long j, java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, androidx.health.connect.client.records.metadata.Metadata metadata)`
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord(
    int j,
    Instant instant,
    jni$_.JObject? zoneOffset,
    Instant instant1,
    jni$_.JObject? zoneOffset1,
    jni$_.JObject metadata,
  ) {
    final _$instant = instant.reference;
    final _$zoneOffset = zoneOffset?.reference ?? jni$_.jNullReference;
    final _$instant1 = instant1.reference;
    final _$zoneOffset1 = zoneOffset1?.reference ?? jni$_.jNullReference;
    final _$metadata = metadata.reference;
    return StepsRecord.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            j,
            _$instant.pointer,
            _$zoneOffset.pointer,
            _$instant1.pointer,
            _$zoneOffset1.pointer,
            _$metadata.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(JLjava/time/Instant;Ljava/time/ZoneOffset;Ljava/time/Instant;Ljava/time/ZoneOffset;Landroidx/health/connect/client/records/metadata/Metadata;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(long j, java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, androidx.health.connect.client.records.metadata.Metadata metadata, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord.new$1(
    int j,
    Instant? instant,
    jni$_.JObject? zoneOffset,
    Instant? instant1,
    jni$_.JObject? zoneOffset1,
    jni$_.JObject? metadata,
    int i,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    final _$zoneOffset = zoneOffset?.reference ?? jni$_.jNullReference;
    final _$instant1 = instant1?.reference ?? jni$_.jNullReference;
    final _$zoneOffset1 = zoneOffset1?.reference ?? jni$_.jNullReference;
    final _$metadata = metadata?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return StepsRecord.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            j,
            _$instant.pointer,
            _$zoneOffset.pointer,
            _$instant1.pointer,
            _$zoneOffset1.pointer,
            _$metadata.pointer,
            i,
            _$defaultConstructorMarker.pointer)
        .reference);
  }

  static final _id_getCount = _class.instanceMethodId(
    r'getCount',
    r'()J',
  );

  static final _getCount = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getCount()`
  int getCount() {
    return _getCount(reference.pointer, _id_getCount as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getStartTime = _class.instanceMethodId(
    r'getStartTime',
    r'()Ljava/time/Instant;',
  );

  static final _getStartTime = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.time.Instant getStartTime()`
  /// The returned object must be released after use, by calling the [release] method.
  Instant getStartTime() {
    return _getStartTime(
            reference.pointer, _id_getStartTime as jni$_.JMethodIDPtr)
        .object<Instant>(const $Instant$Type());
  }

  static final _id_getStartZoneOffset = _class.instanceMethodId(
    r'getStartZoneOffset',
    r'()Ljava/time/ZoneOffset;',
  );

  static final _getStartZoneOffset = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.time.ZoneOffset getStartZoneOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getStartZoneOffset() {
    return _getStartZoneOffset(
            reference.pointer, _id_getStartZoneOffset as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getEndTime = _class.instanceMethodId(
    r'getEndTime',
    r'()Ljava/time/Instant;',
  );

  static final _getEndTime = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.time.Instant getEndTime()`
  /// The returned object must be released after use, by calling the [release] method.
  Instant getEndTime() {
    return _getEndTime(reference.pointer, _id_getEndTime as jni$_.JMethodIDPtr)
        .object<Instant>(const $Instant$Type());
  }

  static final _id_getEndZoneOffset = _class.instanceMethodId(
    r'getEndZoneOffset',
    r'()Ljava/time/ZoneOffset;',
  );

  static final _getEndZoneOffset = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.time.ZoneOffset getEndZoneOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getEndZoneOffset() {
    return _getEndZoneOffset(
            reference.pointer, _id_getEndZoneOffset as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMetadata = _class.instanceMethodId(
    r'getMetadata',
    r'()Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _getMetadata = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.health.connect.client.records.metadata.Metadata getMetadata()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getMetadata() {
    return _getMetadata(
            reference.pointer, _id_getMetadata as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $StepsRecord$NullableType extends jni$_.JObjType<StepsRecord?> {
  @jni$_.internal
  const $StepsRecord$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/StepsRecord;';

  @jni$_.internal
  @core$_.override
  StepsRecord? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : StepsRecord.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<StepsRecord?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($StepsRecord$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecord$NullableType) &&
        other is $StepsRecord$NullableType;
  }
}

final class $StepsRecord$Type extends jni$_.JObjType<StepsRecord> {
  @jni$_.internal
  const $StepsRecord$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/StepsRecord;';

  @jni$_.internal
  @core$_.override
  StepsRecord fromReference(jni$_.JReference reference) =>
      StepsRecord.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<StepsRecord?> get nullableType =>
      const $StepsRecord$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($StepsRecord$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecord$Type) &&
        other is $StepsRecord$Type;
  }
}

/// from: `androidx.health.connect.client.time.TimeRangeFilter$Companion`
class TimeRangeFilter$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<TimeRangeFilter$Companion> $type;

  @jni$_.internal
  TimeRangeFilter$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/time/TimeRangeFilter$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $TimeRangeFilter$Companion$NullableType();
  static const type = $TimeRangeFilter$Companion$Type();
  static final _id_between = _class.instanceMethodId(
    r'between',
    r'(Ljava/time/Instant;Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _between = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant instant, java.time.Instant instant1)`
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter between(
    Instant instant,
    Instant instant1,
  ) {
    final _$instant = instant.reference;
    final _$instant1 = instant1.reference;
    return _between(reference.pointer, _id_between as jni$_.JMethodIDPtr,
            _$instant.pointer, _$instant1.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_between$1 = _class.instanceMethodId(
    r'between',
    r'(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _between$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)`
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter between$1(
    jni$_.JObject localDateTime,
    jni$_.JObject localDateTime1,
  ) {
    final _$localDateTime = localDateTime.reference;
    final _$localDateTime1 = localDateTime1.reference;
    return _between$1(reference.pointer, _id_between$1 as jni$_.JMethodIDPtr,
            _$localDateTime.pointer, _$localDateTime1.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_before = _class.instanceMethodId(
    r'before',
    r'(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _before = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant instant)`
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter before(
    Instant instant,
  ) {
    final _$instant = instant.reference;
    return _before(reference.pointer, _id_before as jni$_.JMethodIDPtr,
            _$instant.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_before$1 = _class.instanceMethodId(
    r'before',
    r'(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _before$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime localDateTime)`
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter before$1(
    jni$_.JObject localDateTime,
  ) {
    final _$localDateTime = localDateTime.reference;
    return _before$1(reference.pointer, _id_before$1 as jni$_.JMethodIDPtr,
            _$localDateTime.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_after = _class.instanceMethodId(
    r'after',
    r'(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _after = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant instant)`
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter after(
    Instant instant,
  ) {
    final _$instant = instant.reference;
    return _after(reference.pointer, _id_after as jni$_.JMethodIDPtr,
            _$instant.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_after$1 = _class.instanceMethodId(
    r'after',
    r'(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _after$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime localDateTime)`
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter after$1(
    jni$_.JObject localDateTime,
  ) {
    final _$localDateTime = localDateTime.reference;
    return _after$1(reference.pointer, _id_after$1 as jni$_.JMethodIDPtr,
            _$localDateTime.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return TimeRangeFilter$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $TimeRangeFilter$Companion$NullableType
    extends jni$_.JObjType<TimeRangeFilter$Companion?> {
  @jni$_.internal
  const $TimeRangeFilter$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/time/TimeRangeFilter$Companion;';

  @jni$_.internal
  @core$_.override
  TimeRangeFilter$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : TimeRangeFilter$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TimeRangeFilter$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TimeRangeFilter$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilter$Companion$NullableType) &&
        other is $TimeRangeFilter$Companion$NullableType;
  }
}

final class $TimeRangeFilter$Companion$Type
    extends jni$_.JObjType<TimeRangeFilter$Companion> {
  @jni$_.internal
  const $TimeRangeFilter$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/time/TimeRangeFilter$Companion;';

  @jni$_.internal
  @core$_.override
  TimeRangeFilter$Companion fromReference(jni$_.JReference reference) =>
      TimeRangeFilter$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TimeRangeFilter$Companion?> get nullableType =>
      const $TimeRangeFilter$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TimeRangeFilter$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilter$Companion$Type) &&
        other is $TimeRangeFilter$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.time.TimeRangeFilter`
class TimeRangeFilter extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<TimeRangeFilter> $type;

  @jni$_.internal
  TimeRangeFilter.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/time/TimeRangeFilter');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $TimeRangeFilter$NullableType();
  static const type = $TimeRangeFilter$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/time/TimeRangeFilter$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.time.TimeRangeFilter$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter$Companion get Companion =>
      _id_Companion.get(_class, const $TimeRangeFilter$Companion$Type());

  static final _id_new$ = _class.constructorId(
    r'(Ljava/time/Instant;Ljava/time/Instant;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter(
    Instant? instant,
    Instant? instant1,
    jni$_.JObject? localDateTime,
    jni$_.JObject? localDateTime1,
  ) {
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    final _$instant1 = instant1?.reference ?? jni$_.jNullReference;
    final _$localDateTime = localDateTime?.reference ?? jni$_.jNullReference;
    final _$localDateTime1 = localDateTime1?.reference ?? jni$_.jNullReference;
    return TimeRangeFilter.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$instant.pointer,
            _$instant1.pointer,
            _$localDateTime.pointer,
            _$localDateTime1.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/time/Instant;Ljava/time/Instant;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter.new$1(
    Instant? instant,
    Instant? instant1,
    jni$_.JObject? localDateTime,
    jni$_.JObject? localDateTime1,
    int i,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    final _$instant1 = instant1?.reference ?? jni$_.jNullReference;
    final _$localDateTime = localDateTime?.reference ?? jni$_.jNullReference;
    final _$localDateTime1 = localDateTime1?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return TimeRangeFilter.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$instant.pointer,
            _$instant1.pointer,
            _$localDateTime.pointer,
            _$localDateTime1.pointer,
            i,
            _$defaultConstructorMarker.pointer)
        .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_new$2 = _class.constructorId(
    r'()V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter.new$2() {
    return TimeRangeFilter.fromReference(
        _new$2(_class.reference.pointer, _id_new$2 as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_between = _class.staticMethodId(
    r'between',
    r'(Ljava/time/Instant;Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _between = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant instant, java.time.Instant instant1)`
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter between(
    Instant instant,
    Instant instant1,
  ) {
    final _$instant = instant.reference;
    final _$instant1 = instant1.reference;
    return _between(_class.reference.pointer, _id_between as jni$_.JMethodIDPtr,
            _$instant.pointer, _$instant1.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_between$1 = _class.staticMethodId(
    r'between',
    r'(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _between$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)`
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter between$1(
    jni$_.JObject localDateTime,
    jni$_.JObject localDateTime1,
  ) {
    final _$localDateTime = localDateTime.reference;
    final _$localDateTime1 = localDateTime1.reference;
    return _between$1(
            _class.reference.pointer,
            _id_between$1 as jni$_.JMethodIDPtr,
            _$localDateTime.pointer,
            _$localDateTime1.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_before = _class.staticMethodId(
    r'before',
    r'(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _before = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant instant)`
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter before(
    Instant instant,
  ) {
    final _$instant = instant.reference;
    return _before(_class.reference.pointer, _id_before as jni$_.JMethodIDPtr,
            _$instant.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_before$1 = _class.staticMethodId(
    r'before',
    r'(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _before$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime localDateTime)`
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter before$1(
    jni$_.JObject localDateTime,
  ) {
    final _$localDateTime = localDateTime.reference;
    return _before$1(_class.reference.pointer,
            _id_before$1 as jni$_.JMethodIDPtr, _$localDateTime.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_after = _class.staticMethodId(
    r'after',
    r'(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _after = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant instant)`
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter after(
    Instant instant,
  ) {
    final _$instant = instant.reference;
    return _after(_class.reference.pointer, _id_after as jni$_.JMethodIDPtr,
            _$instant.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }

  static final _id_after$1 = _class.staticMethodId(
    r'after',
    r'(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _after$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime localDateTime)`
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter after$1(
    jni$_.JObject localDateTime,
  ) {
    final _$localDateTime = localDateTime.reference;
    return _after$1(_class.reference.pointer, _id_after$1 as jni$_.JMethodIDPtr,
            _$localDateTime.pointer)
        .object<TimeRangeFilter>(const $TimeRangeFilter$Type());
  }
}

final class $TimeRangeFilter$NullableType
    extends jni$_.JObjType<TimeRangeFilter?> {
  @jni$_.internal
  const $TimeRangeFilter$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/time/TimeRangeFilter;';

  @jni$_.internal
  @core$_.override
  TimeRangeFilter? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : TimeRangeFilter.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TimeRangeFilter?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TimeRangeFilter$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilter$NullableType) &&
        other is $TimeRangeFilter$NullableType;
  }
}

final class $TimeRangeFilter$Type extends jni$_.JObjType<TimeRangeFilter> {
  @jni$_.internal
  const $TimeRangeFilter$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/time/TimeRangeFilter;';

  @jni$_.internal
  @core$_.override
  TimeRangeFilter fromReference(jni$_.JReference reference) =>
      TimeRangeFilter.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TimeRangeFilter?> get nullableType =>
      const $TimeRangeFilter$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TimeRangeFilter$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilter$Type) &&
        other is $TimeRangeFilter$Type;
  }
}

/// from: `android.content.Context`
class Context extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context> $type;

  @jni$_.internal
  Context.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$NullableType();
  static const type = $Context$Type();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESSIBILITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ALARM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPWIDGET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_OPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BATTERY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int BIND_ABOVE_CLIENT`
  static const BIND_ABOVE_CLIENT = 8;

  /// from: `static public final int BIND_ADJUST_WITH_ACTIVITY`
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: `static public final int BIND_ALLOW_OOM_MANAGEMENT`
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: `static public final int BIND_AUTO_CREATE`
  static const BIND_AUTO_CREATE = 1;

  /// from: `static public final int BIND_DEBUG_UNBIND`
  static const BIND_DEBUG_UNBIND = 2;

  /// from: `static public final int BIND_EXTERNAL_SERVICE`
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: `static public final int BIND_IMPORTANT`
  static const BIND_IMPORTANT = 64;

  /// from: `static public final int BIND_INCLUDE_CAPABILITIES`
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: `static public final int BIND_NOT_FOREGROUND`
  static const BIND_NOT_FOREGROUND = 4;

  /// from: `static public final int BIND_NOT_PERCEPTIBLE`
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: `static public final int BIND_WAIVE_PRIORITY`
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIOMETRIC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLOB_STORE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BUGREPORT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAPTIONING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CARRIER_CONFIG_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CLIPBOARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANION_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONSUMER_IR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CONTEXT_IGNORE_SECURITY`
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: `static public final int CONTEXT_INCLUDE_CODE`
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: `static public final int CONTEXT_RESTRICTED`
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CROSS_PROFILE_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_POLICY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_HASH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOMAIN_VERIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOWNLOAD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DROPBOX_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EUICC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FILE_INTEGRITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FINGERPRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GAME_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HARDWARE_PROPERTIES_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_METHOD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IPSEC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_SCHEDULER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KEYGUARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAUNCHER_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAYOUT_INFLATER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCALE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_COMMUNICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_METRICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_PROJECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_ROUTER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_SESSION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MIDI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int MODE_APPEND`
  static const MODE_APPEND = 32768;

  /// from: `static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING`
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: `static public final int MODE_MULTI_PROCESS`
  static const MODE_MULTI_PROCESS = 4;

  /// from: `static public final int MODE_NO_LOCALIZED_COLLATORS`
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: `static public final int MODE_PRIVATE`
  static const MODE_PRIVATE = 0;

  /// from: `static public final int MODE_WORLD_READABLE`
  static const MODE_WORLD_READABLE = 1;

  /// from: `static public final int MODE_WORLD_WRITEABLE`
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NSD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PEOPLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERFORMANCE_HINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POWER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int RECEIVER_EXPORTED`
  static const RECEIVER_EXPORTED = 2;

  /// from: `static public final int RECEIVER_NOT_EXPORTED`
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: `static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RESTRICTIONS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ROLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SENSOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHORTCUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS_BAR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYSTEM_HEALTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELECOM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_IMS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_CLASSIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INTERACTIVE_APP_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UI_MODE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USB_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VPN_MANAGEMENT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WALLPAPER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_AWARE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_P2P_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_RTT_RANGING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WINDOW_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.AssetManager getAssets()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAssets() {
    return _getAssets(reference.pointer, _id_getAssets as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.Resources getResources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResources() {
    return _getResources(
            reference.pointer, _id_getResources as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.pm.PackageManager getPackageManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPackageManager() {
    return _getPackageManager(
            reference.pointer, _id_getPackageManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.ContentResolver getContentResolver()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.os.Looper getMainLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainLooper() {
    return _getMainLooper(
            reference.pointer, _id_getMainLooper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.concurrent.Executor getMainExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainExecutor() {
    return _getMainExecutor(
            reference.pointer, _id_getMainExecutor as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.Context getApplicationContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? getApplicationContext() {
    return _getApplicationContext(
            reference.pointer, _id_getApplicationContext as jni$_.JMethodIDPtr)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.CharSequence getText(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getText(
    int i,
  ) {
    return _getText(reference.pointer, _id_getText as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getString$1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String getString(int i, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString$1(
    int i,
    jni$_.JArray<jni$_.JObject?>? objects,
  ) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _getString$1(reference.pointer,
            _id_getString$1 as jni$_.JMethodIDPtr, i, _$objects.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'(I)I',
  );

  static final _getColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final int getColor(int i)`
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni$_.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.graphics.drawable.Drawable getDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDrawable(
    int i,
  ) {
    return _getDrawable(
            reference.pointer, _id_getDrawable as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.content.res.ColorStateList getColorStateList(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getColorStateList(
    int i,
  ) {
    return _getColorStateList(
            reference.pointer, _id_getColorStateList as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.Resources$Theme getTheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTheme() {
    return _getTheme(reference.pointer, _id_getTheme as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes(
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes(reference.pointer,
            _id_obtainStyledAttributes as jni$_.JMethodIDPtr, _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$1(
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$1(
            reference.pointer,
            _id_obtainStyledAttributes$1 as jni$_.JMethodIDPtr,
            i,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$2(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$2(
            reference.pointer,
            _id_obtainStyledAttributes$2 as jni$_.JMethodIDPtr,
            _$attributeSet.pointer,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$3(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
    int i,
    int i1,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$3(
            reference.pointer,
            _id_obtainStyledAttributes$3 as jni$_.JMethodIDPtr,
            _$attributeSet.pointer,
            _$is$.pointer,
            i,
            i1)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.ClassLoader getClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClassLoader() {
    return _getClassLoader(
            reference.pointer, _id_getClassLoader as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getOpPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getOpPackageName() {
    return _getOpPackageName(
            reference.pointer, _id_getOpPackageName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAttributionTag()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAttributionTag() {
    return _getAttributionTag(
            reference.pointer, _id_getAttributionTag as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.AttributionSource getAttributionSource()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAttributionSource() {
    return _getAttributionSource(
            reference.pointer, _id_getAttributionSource as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ContextParams getParams()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParams() {
    return _getParams(reference.pointer, _id_getParams as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.pm.ApplicationInfo getApplicationInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplicationInfo() {
    return _getApplicationInfo(
            reference.pointer, _id_getApplicationInfo as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageResourcePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageResourcePath() {
    return _getPackageResourcePath(
            reference.pointer, _id_getPackageResourcePath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageCodePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageCodePath() {
    return _getPackageCodePath(
            reference.pointer, _id_getPackageCodePath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSharedPreferences(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSharedPreferences(reference.pointer,
            _id_getSharedPreferences as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)`
  bool moveSharedPreferencesFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveSharedPreferencesFrom(
            reference.pointer,
            _id_moveSharedPreferencesFrom as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteSharedPreferences(java.lang.String string)`
  bool deleteSharedPreferences(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteSharedPreferences(reference.pointer,
            _id_deleteSharedPreferences as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.FileInputStream openFileInput(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileInput(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileInput(reference.pointer,
            _id_openFileInput as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileOutput(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileOutput(reference.pointer,
            _id_openFileOutput as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteFile(java.lang.String string)`
  bool deleteFile(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteFile(reference.pointer, _id_deleteFile as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getFileStreamPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFileStreamPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFileStreamPath(reference.pointer,
            _id_getFileStreamPath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getDataDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataDir() {
    return _getDataDir(reference.pointer, _id_getDataDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilesDir() {
    return _getFilesDir(
            reference.pointer, _id_getFilesDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getNoBackupFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
            reference.pointer, _id_getNoBackupFilesDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getExternalFilesDir(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalFilesDir(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDir(reference.pointer,
            _id_getExternalFilesDir as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalFilesDirs(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDirs(reference.pointer,
            _id_getExternalFilesDirs as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getObbDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getObbDir() {
    return _getObbDir(reference.pointer, _id_getObbDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getObbDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCacheDir() {
    return _getCacheDir(
            reference.pointer, _id_getCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getCodeCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCodeCacheDir() {
    return _getCodeCacheDir(
            reference.pointer, _id_getCodeCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getExternalCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalCacheDir() {
    return _getExternalCacheDir(
            reference.pointer, _id_getExternalCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getExternalCacheDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalCacheDirs() {
    return _getExternalCacheDirs(
            reference.pointer, _id_getExternalCacheDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getExternalMediaDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalMediaDirs() {
    return _getExternalMediaDirs(
            reference.pointer, _id_getExternalMediaDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String[] fileList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? fileList() {
    return _fileList(reference.pointer, _id_fileList as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract java.io.File getDir(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDir(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDir(reference.pointer, _id_getDir as jni$_.JMethodIDPtr,
            _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase(
            reference.pointer,
            _id_openOrCreateDatabase as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            _$cursorFactory.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase$1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase$1(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
    jni$_.JObject? databaseErrorHandler,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    final _$databaseErrorHandler =
        databaseErrorHandler?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase$1(
            reference.pointer,
            _id_openOrCreateDatabase$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            _$cursorFactory.pointer,
            _$databaseErrorHandler.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)`
  bool moveDatabaseFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveDatabaseFrom(
            reference.pointer,
            _id_moveDatabaseFrom as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteDatabase(java.lang.String string)`
  bool deleteDatabase(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteDatabase(reference.pointer,
            _id_deleteDatabase as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getDatabasePath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDatabasePath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDatabasePath(reference.pointer,
            _id_getDatabasePath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String[] databaseList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? databaseList() {
    return _databaseList(
            reference.pointer, _id_databaseList as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.graphics.drawable.Drawable getWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWallpaper() {
    return _getWallpaper(
            reference.pointer, _id_getWallpaper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.graphics.drawable.Drawable peekWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? peekWallpaper() {
    return _peekWallpaper(
            reference.pointer, _id_peekWallpaper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract int getWallpaperDesiredMinimumWidth()`
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer,
            _id_getWallpaperDesiredMinimumWidth as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract int getWallpaperDesiredMinimumHeight()`
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer,
            _id_getWallpaperDesiredMinimumHeight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setWallpaper(android.graphics.Bitmap bitmap)`
  void setWallpaper(
    jni$_.JObject? bitmap,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    _setWallpaper(reference.pointer, _id_setWallpaper as jni$_.JMethodIDPtr,
            _$bitmap.pointer)
        .check();
  }

  static final _id_setWallpaper$1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setWallpaper(java.io.InputStream inputStream)`
  void setWallpaper$1(
    jni$_.JObject? inputStream,
  ) {
    final _$inputStream = inputStream?.reference ?? jni$_.jNullReference;
    _setWallpaper$1(reference.pointer, _id_setWallpaper$1 as jni$_.JMethodIDPtr,
            _$inputStream.pointer)
        .check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void clearWallpaper()`
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivity(android.content.Intent intent)`
  void startActivity(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
            reference.pointer,
            _id_startActivity$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<Intent?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer,
            _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer)
        .check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<Intent?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
            reference.pointer,
            _id_startActivities$1 as jni$_.JMethodIDPtr,
            _$intents.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
            reference.pointer,
            _id_startIntentSender$1 as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent)`
  void sendBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_sendBroadcast$1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendBroadcast$1(
    Intent? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcast$1(
            reference.pointer,
            _id_sendBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendBroadcastWithMultiplePermissions =
      _class.instanceMethodId(
    r'sendBroadcastWithMultiplePermissions',
    r'(Landroid/content/Intent;[Ljava/lang/String;)V',
  );

  static final _sendBroadcastWithMultiplePermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)`
  void sendBroadcastWithMultiplePermissions(
    Intent? intent,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _sendBroadcastWithMultiplePermissions(
            reference.pointer,
            _id_sendBroadcastWithMultiplePermissions as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$strings.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendOrderedBroadcast(
    Intent? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast(
            reference.pointer,
            _id_sendOrderedBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcast$1(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$1(
            reference.pointer,
            _id_sendOrderedBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser(
            reference.pointer,
            _id_sendBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser$1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)`
  void sendBroadcastAsUser$1(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser$1(
            reference.pointer,
            _id_sendBroadcastAsUser$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$string.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)`
  void sendOrderedBroadcast$2(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string2,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$2(
            reference.pointer,
            _id_sendOrderedBroadcast$2 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$string1.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string2.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyBroadcast(android.content.Intent intent)`
  void sendStickyBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast(reference.pointer,
            _id_sendStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast$1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)`
  void sendStickyBroadcast$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast$1(
            reference.pointer,
            _id_sendStickyBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcast(
    Intent? intent,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcast(
            reference.pointer,
            _id_sendStickyOrderedBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void removeStickyBroadcast(android.content.Intent intent)`
  void removeStickyBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcast(reference.pointer,
            _id_removeStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer)
        .check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendStickyBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcastAsUser(
            reference.pointer,
            _id_sendStickyBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendStickyOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void removeStickyBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcastAsUser(
            reference.pointer,
            _id_removeStickyBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver(
            reference.pointer,
            _id_registerReceiver as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$1(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver$1(
            reference.pointer,
            _id_registerReceiver$1 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$2(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$2(
            reference.pointer,
            _id_registerReceiver$2 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            _$string.pointer,
            _$handler.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$3(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$3(
            reference.pointer,
            _id_registerReceiver$3 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            _$string.pointer,
            _$handler.pointer,
            i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)`
  void unregisterReceiver(
    jni$_.JObject? broadcastReceiver,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    _unregisterReceiver(
            reference.pointer,
            _id_unregisterReceiver as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer)
        .check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.ComponentName startService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startService(reference.pointer,
            _id_startService as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startForegroundService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startForegroundService(reference.pointer,
            _id_startForegroundService as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean stopService(android.content.Intent intent)`
  bool stopService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _stopService(reference.pointer,
            _id_stopService as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)`
  bool bindService(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService(
            reference.pointer,
            _id_bindService as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            i)
        .boolean;
  }

  static final _id_bindService$1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$1(
    Intent? intent,
    int i,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$1(
            reference.pointer,
            _id_bindService$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService(
    Intent? intent,
    int i,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService(
            reference.pointer,
            _id_bindIsolatedService as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$string.pointer,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)`
  bool bindServiceAsUser(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    int i,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser(
            reference.pointer,
            _id_bindServiceAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            i,
            _$userHandle.pointer)
        .boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)`
  void updateServiceGroup(
    jni$_.JObject? serviceConnection,
    int i,
    int i1,
  ) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _updateServiceGroup(
            reference.pointer,
            _id_updateServiceGroup as jni$_.JMethodIDPtr,
            _$serviceConnection.pointer,
            i,
            i1)
        .check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unbindService(android.content.ServiceConnection serviceConnection)`
  void unbindService(
    jni$_.JObject? serviceConnection,
  ) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _unbindService(reference.pointer, _id_unbindService as jni$_.JMethodIDPtr,
            _$serviceConnection.pointer)
        .check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)`
  bool startInstrumentation(
    jni$_.JObject? componentName,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startInstrumentation(
            reference.pointer,
            _id_startInstrumentation as jni$_.JMethodIDPtr,
            _$componentName.pointer,
            _$string.pointer,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSystemService$1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final T getSystemService(java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSystemService$1<$T extends jni$_.JObject?>(
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemService$1(reference.pointer,
            _id_getSystemService$1 as jni$_.JMethodIDPtr, _$class$.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String getSystemServiceName(java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSystemServiceName(
    jni$_.JObject? class$,
  ) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemServiceName(reference.pointer,
            _id_getSystemServiceName as jni$_.JMethodIDPtr, _$class$.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public abstract int checkPermission(java.lang.String string, int i, int i1)`
  int checkPermission(
    jni$_.JString? string,
    int i,
    int i1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkPermission(reference.pointer,
            _id_checkPermission as jni$_.JMethodIDPtr, _$string.pointer, i, i1)
        .integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkCallingPermission(java.lang.String string)`
  int checkCallingPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingPermission(reference.pointer,
            _id_checkCallingPermission as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkCallingOrSelfPermission(java.lang.String string)`
  int checkCallingOrSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfPermission(
            reference.pointer,
            _id_checkCallingOrSelfPermission as jni$_.JMethodIDPtr,
            _$string.pointer)
        .integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkSelfPermission(java.lang.String string)`
  int checkSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkSelfPermission(reference.pointer,
            _id_checkSelfPermission as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)`
  void enforcePermission(
    jni$_.JString? string,
    int i,
    int i1,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforcePermission(
            reference.pointer,
            _id_enforcePermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            i1,
            _$string1.pointer)
        .check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingPermission(
            reference.pointer,
            _id_enforceCallingPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingOrSelfPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfPermission(
            reference.pointer,
            _id_enforceCallingOrSelfPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void grantUriPermission(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _grantUriPermission(
            reference.pointer,
            _id_grantUriPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract void revokeUriPermission(android.net.Uri uri, int i)`
  void revokeUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission(reference.pointer,
            _id_revokeUriPermission as jni$_.JMethodIDPtr, _$uri.pointer, i)
        .check();
  }

  static final _id_revokeUriPermission$1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void revokeUriPermission$1(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission$1(
            reference.pointer,
            _id_revokeUriPermission$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            i)
        .check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int, int)>();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)`
  int checkUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkUriPermission(
            reference.pointer,
            _id_checkUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int, int)>();

  /// from: `public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
    int i1,
    int i2,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkUriPermissions(
            reference.pointer,
            _id_checkUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i,
            i1,
            i2)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract int checkCallingUriPermission(android.net.Uri uri, int i)`
  int checkCallingUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermission(
            reference.pointer,
            _id_checkCallingUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermissions(
            reference.pointer,
            _id_checkCallingUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)`
  int checkCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermission(
            reference.pointer,
            _id_checkCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingOrSelfUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermissions(
            reference.pointer,
            _id_checkCallingOrSelfUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkUriPermission$1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)`
  int checkUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _checkUriPermission$1(
            reference.pointer,
            _id_checkUriPermission$1 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)`
  void enforceUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceUriPermission(
            reference.pointer,
            _id_enforceUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2,
            _$string.pointer)
        .check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingUriPermission(
            reference.pointer,
            _id_enforceCallingUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            _$string.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfUriPermission(
            reference.pointer,
            _id_enforceCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            _$string.pointer)
        .check();
  }

  static final _id_enforceUriPermission$1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)`
  void enforceUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    _enforceUriPermission$1(
            reference.pointer,
            _id_enforceUriPermission$1 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i,
            i1,
            i2,
            _$string2.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void revokeSelfPermissionOnKill(java.lang.String string)`
  void revokeSelfPermissionOnKill(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionOnKill(
            reference.pointer,
            _id_revokeSelfPermissionOnKill as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void revokeSelfPermissionsOnKill(java.util.Collection collection)`
  void revokeSelfPermissionsOnKill(
    jni$_.JObject? collection,
  ) {
    final _$collection = collection?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionsOnKill(
            reference.pointer,
            _id_revokeSelfPermissionsOnKill as jni$_.JMethodIDPtr,
            _$collection.pointer)
        .check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract android.content.Context createPackageContext(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createPackageContext(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createPackageContext(reference.pointer,
            _id_createPackageContext as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createContextForSplit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContextForSplit(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createContextForSplit(reference.pointer,
            _id_createContextForSplit as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createConfigurationContext(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    return _createConfigurationContext(
            reference.pointer,
            _id_createConfigurationContext as jni$_.JMethodIDPtr,
            _$configuration.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createDisplayContext(android.view.Display display)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDisplayContext(
    jni$_.JObject? display,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    return _createDisplayContext(reference.pointer,
            _id_createDisplayContext as jni$_.JMethodIDPtr, _$display.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createWindowContext(int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext(reference.pointer,
            _id_createWindowContext as jni$_.JMethodIDPtr, i, _$bundle.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext$1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext$1(
    jni$_.JObject? display,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext$1(
            reference.pointer,
            _id_createWindowContext$1 as jni$_.JMethodIDPtr,
            _$display.pointer,
            i,
            _$bundle.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createContext(android.content.ContextParams contextParams)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContext(
    jni$_.JObject? contextParams,
  ) {
    final _$contextParams = contextParams?.reference ?? jni$_.jNullReference;
    return _createContext(reference.pointer,
            _id_createContext as jni$_.JMethodIDPtr, _$contextParams.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createAttributionContext(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createAttributionContext(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createAttributionContext(
            reference.pointer,
            _id_createAttributionContext as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceProtectedStorageContext =
      _class.instanceMethodId(
    r'createDeviceProtectedStorageContext',
    r'()Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract android.content.Context createDeviceProtectedStorageContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer,
            _id_createDeviceProtectedStorageContext as jni$_.JMethodIDPtr)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.Display getDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDisplay() {
    return _getDisplay(reference.pointer, _id_getDisplay as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isRestricted()`
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isDeviceProtectedStorage()`
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(reference.pointer,
            _id_isDeviceProtectedStorage as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isUiContext()`
  bool isUiContext() {
    return _isUiContext(
            reference.pointer, _id_isUiContext as jni$_.JMethodIDPtr)
        .boolean;
  }
}

final class $Context$NullableType extends jni$_.JObjType<Context?> {
  @jni$_.internal
  const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Context.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$NullableType) &&
        other is $Context$NullableType;
  }
}

final class $Context$Type extends jni$_.JObjType<Context> {
  @jni$_.internal
  const $Context$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context fromReference(jni$_.JReference reference) => Context.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$Type) && other is $Context$Type;
  }
}

/// from: `android.content.Intent$FilterComparison`
class Intent$FilterComparison extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent$FilterComparison> $type;

  @jni$_.internal
  Intent$FilterComparison.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/Intent$FilterComparison');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$FilterComparison$NullableType();
  static const type = $Intent$FilterComparison$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent$FilterComparison(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return Intent$FilterComparison.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$intent.pointer)
        .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $Intent$FilterComparison$NullableType
    extends jni$_.JObjType<Intent$FilterComparison?> {
  @jni$_.internal
  const $Intent$FilterComparison$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$FilterComparison;';

  @jni$_.internal
  @core$_.override
  Intent$FilterComparison? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Intent$FilterComparison.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$FilterComparison?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$FilterComparison$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$FilterComparison$NullableType) &&
        other is $Intent$FilterComparison$NullableType;
  }
}

final class $Intent$FilterComparison$Type
    extends jni$_.JObjType<Intent$FilterComparison> {
  @jni$_.internal
  const $Intent$FilterComparison$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$FilterComparison;';

  @jni$_.internal
  @core$_.override
  Intent$FilterComparison fromReference(jni$_.JReference reference) =>
      Intent$FilterComparison.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$FilterComparison?> get nullableType =>
      const $Intent$FilterComparison$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$FilterComparison$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$FilterComparison$Type) &&
        other is $Intent$FilterComparison$Type;
  }
}

/// from: `android.content.Intent$ShortcutIconResource`
class Intent$ShortcutIconResource extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent$ShortcutIconResource> $type;

  @jni$_.internal
  Intent$ShortcutIconResource.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/Intent$ShortcutIconResource');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$ShortcutIconResource$NullableType();
  static const type = $Intent$ShortcutIconResource$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_packageName = _class.instanceFieldId(
    r'packageName',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String packageName`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get packageName =>
      _id_packageName.get(this, const jni$_.JStringNullableType());

  /// from: `public java.lang.String packageName`
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni$_.JString? value) =>
      _id_packageName.set(this, const jni$_.JStringNullableType(), value);

  static final _id_resourceName = _class.instanceFieldId(
    r'resourceName',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String resourceName`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get resourceName =>
      _id_resourceName.get(this, const jni$_.JStringNullableType());

  /// from: `public java.lang.String resourceName`
  /// The returned object must be released after use, by calling the [release] method.
  set resourceName(jni$_.JString? value) =>
      _id_resourceName.set(this, const jni$_.JStringNullableType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent$ShortcutIconResource() {
    return Intent$ShortcutIconResource.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_fromContext = _class.staticMethodId(
    r'fromContext',
    r'(Landroid/content/Context;I)Landroid/content/Intent$ShortcutIconResource;',
  );

  static final _fromContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public android.content.Intent$ShortcutIconResource fromContext(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent$ShortcutIconResource? fromContext(
    Context? context,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _fromContext(_class.reference.pointer,
            _id_fromContext as jni$_.JMethodIDPtr, _$context.pointer, i)
        .object<Intent$ShortcutIconResource?>(
            const $Intent$ShortcutIconResource$NullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Intent$ShortcutIconResource$NullableType
    extends jni$_.JObjType<Intent$ShortcutIconResource?> {
  @jni$_.internal
  const $Intent$ShortcutIconResource$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$ShortcutIconResource;';

  @jni$_.internal
  @core$_.override
  Intent$ShortcutIconResource? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Intent$ShortcutIconResource.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$ShortcutIconResource?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$ShortcutIconResource$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$ShortcutIconResource$NullableType) &&
        other is $Intent$ShortcutIconResource$NullableType;
  }
}

final class $Intent$ShortcutIconResource$Type
    extends jni$_.JObjType<Intent$ShortcutIconResource> {
  @jni$_.internal
  const $Intent$ShortcutIconResource$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$ShortcutIconResource;';

  @jni$_.internal
  @core$_.override
  Intent$ShortcutIconResource fromReference(jni$_.JReference reference) =>
      Intent$ShortcutIconResource.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$ShortcutIconResource?> get nullableType =>
      const $Intent$ShortcutIconResource$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$ShortcutIconResource$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$ShortcutIconResource$Type) &&
        other is $Intent$ShortcutIconResource$Type;
  }
}

/// from: `android.content.Intent`
class Intent extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent> $type;

  @jni$_.internal
  Intent.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Intent');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$NullableType();
  static const type = $Intent$Type();
  static final _id_ACTION_AIRPLANE_MODE_CHANGED = _class.staticFieldId(
    r'ACTION_AIRPLANE_MODE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_AIRPLANE_MODE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_AIRPLANE_MODE_CHANGED =>
      _id_ACTION_AIRPLANE_MODE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_ALL_APPS = _class.staticFieldId(
    r'ACTION_ALL_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ALL_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ALL_APPS =>
      _id_ACTION_ALL_APPS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ANSWER = _class.staticFieldId(
    r'ACTION_ANSWER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ANSWER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ANSWER =>
      _id_ACTION_ANSWER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_APPLICATION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_LOCALE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_LOCALE_CHANGED =>
      _id_ACTION_APPLICATION_LOCALE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_PREFERENCES = _class.staticFieldId(
    r'ACTION_APPLICATION_PREFERENCES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_PREFERENCES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_PREFERENCES =>
      _id_ACTION_APPLICATION_PREFERENCES.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED =
      _class.staticFieldId(
    r'ACTION_APPLICATION_RESTRICTIONS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_RESTRICTIONS_CHANGED =>
      _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_APP_ERROR = _class.staticFieldId(
    r'ACTION_APP_ERROR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APP_ERROR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APP_ERROR =>
      _id_ACTION_APP_ERROR.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ASSIST = _class.staticFieldId(
    r'ACTION_ASSIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ASSIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ASSIST =>
      _id_ACTION_ASSIST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ATTACH_DATA = _class.staticFieldId(
    r'ACTION_ATTACH_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ATTACH_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ATTACH_DATA =>
      _id_ACTION_ATTACH_DATA.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_AUTO_REVOKE_PERMISSIONS = _class.staticFieldId(
    r'ACTION_AUTO_REVOKE_PERMISSIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_AUTO_REVOKE_PERMISSIONS =>
      _id_ACTION_AUTO_REVOKE_PERMISSIONS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_CHANGED = _class.staticFieldId(
    r'ACTION_BATTERY_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_CHANGED =>
      _id_ACTION_BATTERY_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_LOW = _class.staticFieldId(
    r'ACTION_BATTERY_LOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_LOW =>
      _id_ACTION_BATTERY_LOW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_OKAY = _class.staticFieldId(
    r'ACTION_BATTERY_OKAY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_OKAY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_OKAY =>
      _id_ACTION_BATTERY_OKAY.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BOOT_COMPLETED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BOOT_COMPLETED =>
      _id_ACTION_BOOT_COMPLETED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BUG_REPORT = _class.staticFieldId(
    r'ACTION_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BUG_REPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BUG_REPORT =>
      _id_ACTION_BUG_REPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CALL = _class.staticFieldId(
    r'ACTION_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CALL =>
      _id_ACTION_CALL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CALL_BUTTON = _class.staticFieldId(
    r'ACTION_CALL_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CALL_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CALL_BUTTON =>
      _id_ACTION_CALL_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CAMERA_BUTTON = _class.staticFieldId(
    r'ACTION_CAMERA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CAMERA_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CAMERA_BUTTON =>
      _id_ACTION_CAMERA_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CARRIER_SETUP = _class.staticFieldId(
    r'ACTION_CARRIER_SETUP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CARRIER_SETUP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CARRIER_SETUP =>
      _id_ACTION_CARRIER_SETUP.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CHOOSER = _class.staticFieldId(
    r'ACTION_CHOOSER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CHOOSER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CHOOSER =>
      _id_ACTION_CHOOSER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CLOSE_SYSTEM_DIALOGS = _class.staticFieldId(
    r'ACTION_CLOSE_SYSTEM_DIALOGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CLOSE_SYSTEM_DIALOGS =>
      _id_ACTION_CLOSE_SYSTEM_DIALOGS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_CONFIGURATION_CHANGED = _class.staticFieldId(
    r'ACTION_CONFIGURATION_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CONFIGURATION_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CONFIGURATION_CHANGED =>
      _id_ACTION_CONFIGURATION_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_DOCUMENT = _class.staticFieldId(
    r'ACTION_CREATE_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_DOCUMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_DOCUMENT =>
      _id_ACTION_CREATE_DOCUMENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_REMINDER = _class.staticFieldId(
    r'ACTION_CREATE_REMINDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_REMINDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_REMINDER =>
      _id_ACTION_CREATE_REMINDER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_SHORTCUT = _class.staticFieldId(
    r'ACTION_CREATE_SHORTCUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_SHORTCUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_SHORTCUT =>
      _id_ACTION_CREATE_SHORTCUT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DATE_CHANGED = _class.staticFieldId(
    r'ACTION_DATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DATE_CHANGED =>
      _id_ACTION_DATE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEFAULT = _class.staticFieldId(
    r'ACTION_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEFAULT =>
      _id_ACTION_DEFAULT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEFINE = _class.staticFieldId(
    r'ACTION_DEFINE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEFINE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEFINE =>
      _id_ACTION_DEFINE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DELETE = _class.staticFieldId(
    r'ACTION_DELETE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DELETE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DELETE =>
      _id_ACTION_DELETE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEVICE_STORAGE_LOW = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_LOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEVICE_STORAGE_LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEVICE_STORAGE_LOW =>
      _id_ACTION_DEVICE_STORAGE_LOW.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEVICE_STORAGE_OK = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_OK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEVICE_STORAGE_OK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEVICE_STORAGE_OK =>
      _id_ACTION_DEVICE_STORAGE_OK.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DIAL = _class.staticFieldId(
    r'ACTION_DIAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DIAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DIAL =>
      _id_ACTION_DIAL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DOCK_EVENT = _class.staticFieldId(
    r'ACTION_DOCK_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DOCK_EVENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DOCK_EVENT =>
      _id_ACTION_DOCK_EVENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DREAMING_STARTED = _class.staticFieldId(
    r'ACTION_DREAMING_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DREAMING_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DREAMING_STARTED =>
      _id_ACTION_DREAMING_STARTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DREAMING_STOPPED = _class.staticFieldId(
    r'ACTION_DREAMING_STOPPED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DREAMING_STOPPED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DREAMING_STOPPED =>
      _id_ACTION_DREAMING_STOPPED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_EDIT = _class.staticFieldId(
    r'ACTION_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EDIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EDIT =>
      _id_ACTION_EDIT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =
      _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =
      _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_FACTORY_TEST = _class.staticFieldId(
    r'ACTION_FACTORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_FACTORY_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_FACTORY_TEST =>
      _id_ACTION_FACTORY_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GET_CONTENT = _class.staticFieldId(
    r'ACTION_GET_CONTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GET_CONTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GET_CONTENT =>
      _id_ACTION_GET_CONTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GET_RESTRICTION_ENTRIES = _class.staticFieldId(
    r'ACTION_GET_RESTRICTION_ENTRIES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GET_RESTRICTION_ENTRIES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GET_RESTRICTION_ENTRIES =>
      _id_ACTION_GET_RESTRICTION_ENTRIES.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_GTALK_SERVICE_CONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GTALK_SERVICE_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GTALK_SERVICE_CONNECTED =>
      _id_ACTION_GTALK_SERVICE_CONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_GTALK_SERVICE_DISCONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GTALK_SERVICE_DISCONNECTED =>
      _id_ACTION_GTALK_SERVICE_DISCONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_HEADSET_PLUG = _class.staticFieldId(
    r'ACTION_HEADSET_PLUG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_HEADSET_PLUG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_HEADSET_PLUG =>
      _id_ACTION_HEADSET_PLUG.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INPUT_METHOD_CHANGED = _class.staticFieldId(
    r'ACTION_INPUT_METHOD_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INPUT_METHOD_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INPUT_METHOD_CHANGED =>
      _id_ACTION_INPUT_METHOD_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSERT = _class.staticFieldId(
    r'ACTION_INSERT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSERT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSERT =>
      _id_ACTION_INSERT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSERT_OR_EDIT = _class.staticFieldId(
    r'ACTION_INSERT_OR_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSERT_OR_EDIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSERT_OR_EDIT =>
      _id_ACTION_INSERT_OR_EDIT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSTALL_FAILURE = _class.staticFieldId(
    r'ACTION_INSTALL_FAILURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSTALL_FAILURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSTALL_FAILURE =>
      _id_ACTION_INSTALL_FAILURE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_INSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSTALL_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSTALL_PACKAGE =>
      _id_ACTION_INSTALL_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCALE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCALE_CHANGED =>
      _id_ACTION_LOCALE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_LOCKED_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_LOCKED_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCKED_BOOT_COMPLETED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCKED_BOOT_COMPLETED =>
      _id_ACTION_LOCKED_BOOT_COMPLETED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MAIN = _class.staticFieldId(
    r'ACTION_MAIN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MAIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MAIN =>
      _id_ACTION_MAIN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_ADDED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_ADDED =>
      _id_ACTION_MANAGED_PROFILE_ADDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_AVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_AVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_AVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_REMOVED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_REMOVED =>
      _id_ACTION_MANAGED_PROFILE_REMOVED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_UNAVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_UNAVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_UNAVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_UNLOCKED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_UNLOCKED =>
      _id_ACTION_MANAGED_PROFILE_UNLOCKED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_NETWORK_USAGE = _class.staticFieldId(
    r'ACTION_MANAGE_NETWORK_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_NETWORK_USAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_NETWORK_USAGE =>
      _id_ACTION_MANAGE_NETWORK_USAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_PACKAGE_STORAGE = _class.staticFieldId(
    r'ACTION_MANAGE_PACKAGE_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_PACKAGE_STORAGE =>
      _id_ACTION_MANAGE_PACKAGE_STORAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_UNUSED_APPS = _class.staticFieldId(
    r'ACTION_MANAGE_UNUSED_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_UNUSED_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_UNUSED_APPS =>
      _id_ACTION_MANAGE_UNUSED_APPS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_BAD_REMOVAL = _class.staticFieldId(
    r'ACTION_MEDIA_BAD_REMOVAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_BAD_REMOVAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_BAD_REMOVAL =>
      _id_ACTION_MEDIA_BAD_REMOVAL.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_BUTTON = _class.staticFieldId(
    r'ACTION_MEDIA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_BUTTON =>
      _id_ACTION_MEDIA_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_CHECKING = _class.staticFieldId(
    r'ACTION_MEDIA_CHECKING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_CHECKING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_CHECKING =>
      _id_ACTION_MEDIA_CHECKING.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_EJECT = _class.staticFieldId(
    r'ACTION_MEDIA_EJECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_EJECT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_EJECT =>
      _id_ACTION_MEDIA_EJECT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_MOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_MOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_MOUNTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_MOUNTED =>
      _id_ACTION_MEDIA_MOUNTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_NOFS = _class.staticFieldId(
    r'ACTION_MEDIA_NOFS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_NOFS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_NOFS =>
      _id_ACTION_MEDIA_NOFS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_REMOVED = _class.staticFieldId(
    r'ACTION_MEDIA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_REMOVED =>
      _id_ACTION_MEDIA_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_FINISHED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_FINISHED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_FINISHED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_FINISHED =>
      _id_ACTION_MEDIA_SCANNER_FINISHED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_SCAN_FILE = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_SCAN_FILE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_SCAN_FILE =>
      _id_ACTION_MEDIA_SCANNER_SCAN_FILE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_STARTED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_STARTED =>
      _id_ACTION_MEDIA_SCANNER_STARTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SHARED = _class.staticFieldId(
    r'ACTION_MEDIA_SHARED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SHARED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SHARED =>
      _id_ACTION_MEDIA_SHARED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_UNMOUNTABLE = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_UNMOUNTABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_UNMOUNTABLE =>
      _id_ACTION_MEDIA_UNMOUNTABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_UNMOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_UNMOUNTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_UNMOUNTED =>
      _id_ACTION_MEDIA_UNMOUNTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_REPLACED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_REPLACED =>
      _id_ACTION_MY_PACKAGE_REPLACED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_SUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_SUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_SUSPENDED =>
      _id_ACTION_MY_PACKAGE_SUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_UNSUSPENDED =>
      _id_ACTION_MY_PACKAGE_UNSUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_NEW_OUTGOING_CALL = _class.staticFieldId(
    r'ACTION_NEW_OUTGOING_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_NEW_OUTGOING_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_NEW_OUTGOING_CALL =>
      _id_ACTION_NEW_OUTGOING_CALL.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_OPEN_DOCUMENT = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_OPEN_DOCUMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_OPEN_DOCUMENT =>
      _id_ACTION_OPEN_DOCUMENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_OPEN_DOCUMENT_TREE = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT_TREE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_OPEN_DOCUMENT_TREE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_OPEN_DOCUMENT_TREE =>
      _id_ACTION_OPEN_DOCUMENT_TREE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGES_SUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGES_SUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGES_SUSPENDED =>
      _id_ACTION_PACKAGES_SUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGES_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGES_UNSUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGES_UNSUSPENDED =>
      _id_ACTION_PACKAGES_UNSUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_ADDED = _class.staticFieldId(
    r'ACTION_PACKAGE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_ADDED =>
      _id_ACTION_PACKAGE_ADDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_CHANGED = _class.staticFieldId(
    r'ACTION_PACKAGE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_CHANGED =>
      _id_ACTION_PACKAGE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_DATA_CLEARED = _class.staticFieldId(
    r'ACTION_PACKAGE_DATA_CLEARED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_DATA_CLEARED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_DATA_CLEARED =>
      _id_ACTION_PACKAGE_DATA_CLEARED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_FIRST_LAUNCH = _class.staticFieldId(
    r'ACTION_PACKAGE_FIRST_LAUNCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_FIRST_LAUNCH =>
      _id_ACTION_PACKAGE_FIRST_LAUNCH.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_FULLY_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_FULLY_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_FULLY_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_FULLY_REMOVED =>
      _id_ACTION_PACKAGE_FULLY_REMOVED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_INSTALL = _class.staticFieldId(
    r'ACTION_PACKAGE_INSTALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_INSTALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_INSTALL =>
      _id_ACTION_PACKAGE_INSTALL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_NEEDS_VERIFICATION = _class.staticFieldId(
    r'ACTION_PACKAGE_NEEDS_VERIFICATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_NEEDS_VERIFICATION =>
      _id_ACTION_PACKAGE_NEEDS_VERIFICATION.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_REMOVED =>
      _id_ACTION_PACKAGE_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_REPLACED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_REPLACED =>
      _id_ACTION_PACKAGE_REPLACED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_RESTARTED = _class.staticFieldId(
    r'ACTION_PACKAGE_RESTARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_RESTARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_RESTARTED =>
      _id_ACTION_PACKAGE_RESTARTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_VERIFIED = _class.staticFieldId(
    r'ACTION_PACKAGE_VERIFIED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_VERIFIED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_VERIFIED =>
      _id_ACTION_PACKAGE_VERIFIED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PASTE = _class.staticFieldId(
    r'ACTION_PASTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PASTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PASTE =>
      _id_ACTION_PASTE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PICK = _class.staticFieldId(
    r'ACTION_PICK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PICK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PICK =>
      _id_ACTION_PICK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PICK_ACTIVITY = _class.staticFieldId(
    r'ACTION_PICK_ACTIVITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PICK_ACTIVITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PICK_ACTIVITY =>
      _id_ACTION_PICK_ACTIVITY.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_CONNECTED = _class.staticFieldId(
    r'ACTION_POWER_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_CONNECTED =>
      _id_ACTION_POWER_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_DISCONNECTED = _class.staticFieldId(
    r'ACTION_POWER_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_DISCONNECTED =>
      _id_ACTION_POWER_DISCONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_USAGE_SUMMARY = _class.staticFieldId(
    r'ACTION_POWER_USAGE_SUMMARY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_USAGE_SUMMARY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_USAGE_SUMMARY =>
      _id_ACTION_POWER_USAGE_SUMMARY.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROCESS_TEXT = _class.staticFieldId(
    r'ACTION_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROCESS_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROCESS_TEXT =>
      _id_ACTION_PROCESS_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_ACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_ACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_ACCESSIBLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_ACCESSIBLE =>
      _id_ACTION_PROFILE_ACCESSIBLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_INACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_INACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_INACCESSIBLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_INACCESSIBLE =>
      _id_ACTION_PROFILE_INACCESSIBLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROVIDER_CHANGED = _class.staticFieldId(
    r'ACTION_PROVIDER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROVIDER_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROVIDER_CHANGED =>
      _id_ACTION_PROVIDER_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_QUICK_CLOCK = _class.staticFieldId(
    r'ACTION_QUICK_CLOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_QUICK_CLOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_QUICK_CLOCK =>
      _id_ACTION_QUICK_CLOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_QUICK_VIEW = _class.staticFieldId(
    r'ACTION_QUICK_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_QUICK_VIEW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_QUICK_VIEW =>
      _id_ACTION_QUICK_VIEW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_REBOOT = _class.staticFieldId(
    r'ACTION_REBOOT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REBOOT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_REBOOT =>
      _id_ACTION_REBOOT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_RUN = _class.staticFieldId(
    r'ACTION_RUN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_RUN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_RUN =>
      _id_ACTION_RUN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SAFETY_CENTER = _class.staticFieldId(
    r'ACTION_SAFETY_CENTER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SAFETY_CENTER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SAFETY_CENTER =>
      _id_ACTION_SAFETY_CENTER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCREEN_OFF = _class.staticFieldId(
    r'ACTION_SCREEN_OFF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCREEN_OFF`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCREEN_OFF =>
      _id_ACTION_SCREEN_OFF.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCREEN_ON = _class.staticFieldId(
    r'ACTION_SCREEN_ON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCREEN_ON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCREEN_ON =>
      _id_ACTION_SCREEN_ON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEARCH = _class.staticFieldId(
    r'ACTION_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEARCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEARCH =>
      _id_ACTION_SEARCH.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEARCH_LONG_PRESS = _class.staticFieldId(
    r'ACTION_SEARCH_LONG_PRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEARCH_LONG_PRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEARCH_LONG_PRESS =>
      _id_ACTION_SEARCH_LONG_PRESS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEND = _class.staticFieldId(
    r'ACTION_SEND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEND =>
      _id_ACTION_SEND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SENDTO = _class.staticFieldId(
    r'ACTION_SENDTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SENDTO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SENDTO =>
      _id_ACTION_SENDTO.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEND_MULTIPLE = _class.staticFieldId(
    r'ACTION_SEND_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEND_MULTIPLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEND_MULTIPLE =>
      _id_ACTION_SEND_MULTIPLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SET_WALLPAPER = _class.staticFieldId(
    r'ACTION_SET_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SET_WALLPAPER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SET_WALLPAPER =>
      _id_ACTION_SET_WALLPAPER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHOW_APP_INFO = _class.staticFieldId(
    r'ACTION_SHOW_APP_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHOW_APP_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHOW_APP_INFO =>
      _id_ACTION_SHOW_APP_INFO.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHOW_WORK_APPS = _class.staticFieldId(
    r'ACTION_SHOW_WORK_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHOW_WORK_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHOW_WORK_APPS =>
      _id_ACTION_SHOW_WORK_APPS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHUTDOWN = _class.staticFieldId(
    r'ACTION_SHUTDOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHUTDOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHUTDOWN =>
      _id_ACTION_SHUTDOWN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SYNC = _class.staticFieldId(
    r'ACTION_SYNC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SYNC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SYNC =>
      _id_ACTION_SYNC.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SYSTEM_TUTORIAL = _class.staticFieldId(
    r'ACTION_SYSTEM_TUTORIAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SYSTEM_TUTORIAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SYSTEM_TUTORIAL =>
      _id_ACTION_SYSTEM_TUTORIAL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIMEZONE_CHANGED = _class.staticFieldId(
    r'ACTION_TIMEZONE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIMEZONE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIMEZONE_CHANGED =>
      _id_ACTION_TIMEZONE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIME_CHANGED = _class.staticFieldId(
    r'ACTION_TIME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIME_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIME_CHANGED =>
      _id_ACTION_TIME_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIME_TICK = _class.staticFieldId(
    r'ACTION_TIME_TICK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIME_TICK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIME_TICK =>
      _id_ACTION_TIME_TICK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TRANSLATE = _class.staticFieldId(
    r'ACTION_TRANSLATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TRANSLATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TRANSLATE =>
      _id_ACTION_TRANSLATE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UID_REMOVED = _class.staticFieldId(
    r'ACTION_UID_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UID_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UID_REMOVED =>
      _id_ACTION_UID_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UMS_CONNECTED = _class.staticFieldId(
    r'ACTION_UMS_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UMS_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UMS_CONNECTED =>
      _id_ACTION_UMS_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UMS_DISCONNECTED = _class.staticFieldId(
    r'ACTION_UMS_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UMS_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UMS_DISCONNECTED =>
      _id_ACTION_UMS_DISCONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_UNINSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_UNINSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UNINSTALL_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UNINSTALL_PACKAGE =>
      _id_ACTION_UNINSTALL_PACKAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_BACKGROUND = _class.staticFieldId(
    r'ACTION_USER_BACKGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_BACKGROUND =>
      _id_ACTION_USER_BACKGROUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_FOREGROUND = _class.staticFieldId(
    r'ACTION_USER_FOREGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_FOREGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_FOREGROUND =>
      _id_ACTION_USER_FOREGROUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_INITIALIZE = _class.staticFieldId(
    r'ACTION_USER_INITIALIZE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_INITIALIZE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_INITIALIZE =>
      _id_ACTION_USER_INITIALIZE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_PRESENT = _class.staticFieldId(
    r'ACTION_USER_PRESENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_PRESENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_PRESENT =>
      _id_ACTION_USER_PRESENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_UNLOCKED = _class.staticFieldId(
    r'ACTION_USER_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_UNLOCKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_UNLOCKED =>
      _id_ACTION_USER_UNLOCKED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW = _class.staticFieldId(
    r'ACTION_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW =>
      _id_ACTION_VIEW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_LOCUS = _class.staticFieldId(
    r'ACTION_VIEW_LOCUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_LOCUS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_LOCUS =>
      _id_ACTION_VIEW_LOCUS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE = _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_PERMISSION_USAGE =>
      _id_ACTION_VIEW_PERMISSION_USAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =
      _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =>
      _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_VOICE_COMMAND = _class.staticFieldId(
    r'ACTION_VOICE_COMMAND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VOICE_COMMAND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VOICE_COMMAND =>
      _id_ACTION_VOICE_COMMAND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_WALLPAPER_CHANGED = _class.staticFieldId(
    r'ACTION_WALLPAPER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WALLPAPER_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_WALLPAPER_CHANGED =>
      _id_ACTION_WALLPAPER_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_WEB_SEARCH = _class.staticFieldId(
    r'ACTION_WEB_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WEB_SEARCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_WEB_SEARCH =>
      _id_ACTION_WEB_SEARCH.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =
      _class.staticFieldId(
    r'CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =>
      _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_ALTERNATIVE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_ALTERNATIVE =>
      _id_CATEGORY_ALTERNATIVE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_BROWSER = _class.staticFieldId(
    r'CATEGORY_APP_BROWSER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_BROWSER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_BROWSER =>
      _id_CATEGORY_APP_BROWSER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CALCULATOR = _class.staticFieldId(
    r'CATEGORY_APP_CALCULATOR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CALCULATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CALCULATOR =>
      _id_CATEGORY_APP_CALCULATOR.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CALENDAR = _class.staticFieldId(
    r'CATEGORY_APP_CALENDAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CALENDAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CALENDAR =>
      _id_CATEGORY_APP_CALENDAR.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CONTACTS = _class.staticFieldId(
    r'CATEGORY_APP_CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CONTACTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CONTACTS =>
      _id_CATEGORY_APP_CONTACTS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_EMAIL = _class.staticFieldId(
    r'CATEGORY_APP_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_EMAIL =>
      _id_CATEGORY_APP_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_FILES = _class.staticFieldId(
    r'CATEGORY_APP_FILES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_FILES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_FILES =>
      _id_CATEGORY_APP_FILES.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_FITNESS = _class.staticFieldId(
    r'CATEGORY_APP_FITNESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_FITNESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_FITNESS =>
      _id_CATEGORY_APP_FITNESS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_GALLERY = _class.staticFieldId(
    r'CATEGORY_APP_GALLERY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_GALLERY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_GALLERY =>
      _id_CATEGORY_APP_GALLERY.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MAPS = _class.staticFieldId(
    r'CATEGORY_APP_MAPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MAPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MAPS =>
      _id_CATEGORY_APP_MAPS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MARKET = _class.staticFieldId(
    r'CATEGORY_APP_MARKET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MARKET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MARKET =>
      _id_CATEGORY_APP_MARKET.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MESSAGING = _class.staticFieldId(
    r'CATEGORY_APP_MESSAGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MESSAGING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MESSAGING =>
      _id_CATEGORY_APP_MESSAGING.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MUSIC = _class.staticFieldId(
    r'CATEGORY_APP_MUSIC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MUSIC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MUSIC =>
      _id_CATEGORY_APP_MUSIC.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_WEATHER = _class.staticFieldId(
    r'CATEGORY_APP_WEATHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_WEATHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_WEATHER =>
      _id_CATEGORY_APP_WEATHER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_BROWSABLE = _class.staticFieldId(
    r'CATEGORY_BROWSABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_BROWSABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_BROWSABLE =>
      _id_CATEGORY_BROWSABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_CAR_DOCK = _class.staticFieldId(
    r'CATEGORY_CAR_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_CAR_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_CAR_DOCK =>
      _id_CATEGORY_CAR_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_CAR_MODE = _class.staticFieldId(
    r'CATEGORY_CAR_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_CAR_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_CAR_MODE =>
      _id_CATEGORY_CAR_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DEFAULT = _class.staticFieldId(
    r'CATEGORY_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DEFAULT =>
      _id_CATEGORY_DEFAULT.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DESK_DOCK =>
      _id_CATEGORY_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DEVELOPMENT_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_DEVELOPMENT_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DEVELOPMENT_PREFERENCE =>
      _id_CATEGORY_DEVELOPMENT_PREFERENCE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_EMBED = _class.staticFieldId(
    r'CATEGORY_EMBED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_EMBED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_EMBED =>
      _id_CATEGORY_EMBED.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =
      _class.staticFieldId(
    r'CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =>
      _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_HE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_HE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_HE_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_HE_DESK_DOCK =>
      _id_CATEGORY_HE_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_HOME = _class.staticFieldId(
    r'CATEGORY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_HOME =>
      _id_CATEGORY_HOME.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_INFO = _class.staticFieldId(
    r'CATEGORY_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_INFO =>
      _id_CATEGORY_INFO.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LAUNCHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LAUNCHER =>
      _id_CATEGORY_LAUNCHER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LEANBACK_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LEANBACK_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LEANBACK_LAUNCHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LEANBACK_LAUNCHER =>
      _id_CATEGORY_LEANBACK_LAUNCHER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_LE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LE_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LE_DESK_DOCK =>
      _id_CATEGORY_LE_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_MONKEY = _class.staticFieldId(
    r'CATEGORY_MONKEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_MONKEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_MONKEY =>
      _id_CATEGORY_MONKEY.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_OPENABLE = _class.staticFieldId(
    r'CATEGORY_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_OPENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_OPENABLE =>
      _id_CATEGORY_OPENABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_PREFERENCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_PREFERENCE =>
      _id_CATEGORY_PREFERENCE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SAMPLE_CODE = _class.staticFieldId(
    r'CATEGORY_SAMPLE_CODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SAMPLE_CODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SAMPLE_CODE =>
      _id_CATEGORY_SAMPLE_CODE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SECONDARY_HOME = _class.staticFieldId(
    r'CATEGORY_SECONDARY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SECONDARY_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SECONDARY_HOME =>
      _id_CATEGORY_SECONDARY_HOME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SELECTED_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_SELECTED_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SELECTED_ALTERNATIVE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SELECTED_ALTERNATIVE =>
      _id_CATEGORY_SELECTED_ALTERNATIVE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TAB = _class.staticFieldId(
    r'CATEGORY_TAB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TAB`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TAB =>
      _id_CATEGORY_TAB.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TEST = _class.staticFieldId(
    r'CATEGORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TEST =>
      _id_CATEGORY_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TYPED_OPENABLE = _class.staticFieldId(
    r'CATEGORY_TYPED_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TYPED_OPENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TYPED_OPENABLE =>
      _id_CATEGORY_TYPED_OPENABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_UNIT_TEST = _class.staticFieldId(
    r'CATEGORY_UNIT_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_UNIT_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_UNIT_TEST =>
      _id_CATEGORY_UNIT_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_VOICE = _class.staticFieldId(
    r'CATEGORY_VOICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_VOICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_VOICE =>
      _id_CATEGORY_VOICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_VR_HOME = _class.staticFieldId(
    r'CATEGORY_VR_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_VR_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_VR_HOME =>
      _id_CATEGORY_VR_HOME.get(_class, const jni$_.JStringNullableType());

  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_EXTRA_ALARM_COUNT = _class.staticFieldId(
    r'EXTRA_ALARM_COUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALARM_COUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALARM_COUNT =>
      _id_EXTRA_ALARM_COUNT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALLOW_MULTIPLE = _class.staticFieldId(
    r'EXTRA_ALLOW_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALLOW_MULTIPLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALLOW_MULTIPLE =>
      _id_EXTRA_ALLOW_MULTIPLE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALLOW_REPLACE = _class.staticFieldId(
    r'EXTRA_ALLOW_REPLACE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALLOW_REPLACE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALLOW_REPLACE =>
      _id_EXTRA_ALLOW_REPLACE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALTERNATE_INTENTS = _class.staticFieldId(
    r'EXTRA_ALTERNATE_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALTERNATE_INTENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALTERNATE_INTENTS =>
      _id_EXTRA_ALTERNATE_INTENTS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_CONTEXT = _class.staticFieldId(
    r'EXTRA_ASSIST_CONTEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_CONTEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_CONTEXT =>
      _id_EXTRA_ASSIST_CONTEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_INPUT_DEVICE_ID = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_DEVICE_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_INPUT_DEVICE_ID =>
      _id_EXTRA_ASSIST_INPUT_DEVICE_ID.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_HINT_KEYBOARD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_INPUT_HINT_KEYBOARD =>
      _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_PACKAGE = _class.staticFieldId(
    r'EXTRA_ASSIST_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_PACKAGE =>
      _id_EXTRA_ASSIST_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_UID = _class.staticFieldId(
    r'EXTRA_ASSIST_UID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_UID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_UID =>
      _id_EXTRA_ASSIST_UID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ATTRIBUTION_TAGS = _class.staticFieldId(
    r'EXTRA_ATTRIBUTION_TAGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ATTRIBUTION_TAGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ATTRIBUTION_TAGS =>
      _id_EXTRA_ATTRIBUTION_TAGS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE = _class.staticFieldId(
    r'EXTRA_AUTO_LAUNCH_SINGLE_CHOICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =>
      _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_BCC = _class.staticFieldId(
    r'EXTRA_BCC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BCC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BCC =>
      _id_EXTRA_BCC.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_BUG_REPORT = _class.staticFieldId(
    r'EXTRA_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BUG_REPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BUG_REPORT =>
      _id_EXTRA_BUG_REPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CC = _class.staticFieldId(
    r'EXTRA_CC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CC =>
      _id_EXTRA_CC.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_COMPONENT_NAME =>
      _id_EXTRA_CHANGED_COMPONENT_NAME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_COMPONENT_NAME_LIST =>
      _id_EXTRA_CHANGED_COMPONENT_NAME_LIST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_PACKAGE_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_PACKAGE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_PACKAGE_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_PACKAGE_LIST =>
      _id_EXTRA_CHANGED_PACKAGE_LIST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_UID_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_UID_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_UID_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_UID_LIST =>
      _id_EXTRA_CHANGED_UID_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =
      _class.staticFieldId(
    r'EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =>
      _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_TARGETS = _class.staticFieldId(
    r'EXTRA_CHOOSER_TARGETS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_TARGETS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_TARGETS =>
      _id_EXTRA_CHOOSER_TARGETS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOSEN_COMPONENT = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOSEN_COMPONENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOSEN_COMPONENT =>
      _id_EXTRA_CHOSEN_COMPONENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =>
      _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_COMPONENT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_COMPONENT_NAME =>
      _id_EXTRA_COMPONENT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CONTENT_ANNOTATIONS = _class.staticFieldId(
    r'EXTRA_CONTENT_ANNOTATIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONTENT_ANNOTATIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONTENT_ANNOTATIONS =>
      _id_EXTRA_CONTENT_ANNOTATIONS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CONTENT_QUERY = _class.staticFieldId(
    r'EXTRA_CONTENT_QUERY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONTENT_QUERY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONTENT_QUERY =>
      _id_EXTRA_CONTENT_QUERY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DATA_REMOVED = _class.staticFieldId(
    r'EXTRA_DATA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DATA_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DATA_REMOVED =>
      _id_EXTRA_DATA_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DOCK_STATE = _class.staticFieldId(
    r'EXTRA_DOCK_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DOCK_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DOCK_STATE =>
      _id_EXTRA_DOCK_STATE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int EXTRA_DOCK_STATE_CAR`
  static const EXTRA_DOCK_STATE_CAR = 2;

  /// from: `static public final int EXTRA_DOCK_STATE_DESK`
  static const EXTRA_DOCK_STATE_DESK = 1;

  /// from: `static public final int EXTRA_DOCK_STATE_HE_DESK`
  static const EXTRA_DOCK_STATE_HE_DESK = 4;

  /// from: `static public final int EXTRA_DOCK_STATE_LE_DESK`
  static const EXTRA_DOCK_STATE_LE_DESK = 3;

  /// from: `static public final int EXTRA_DOCK_STATE_UNDOCKED`
  static const EXTRA_DOCK_STATE_UNDOCKED = 0;
  static final _id_EXTRA_DONT_KILL_APP = _class.staticFieldId(
    r'EXTRA_DONT_KILL_APP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DONT_KILL_APP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DONT_KILL_APP =>
      _id_EXTRA_DONT_KILL_APP.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DURATION_MILLIS = _class.staticFieldId(
    r'EXTRA_DURATION_MILLIS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DURATION_MILLIS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DURATION_MILLIS =>
      _id_EXTRA_DURATION_MILLIS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_EMAIL = _class.staticFieldId(
    r'EXTRA_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_EMAIL =>
      _id_EXTRA_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_END_TIME = _class.staticFieldId(
    r'EXTRA_END_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_END_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_END_TIME =>
      _id_EXTRA_END_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_EXCLUDE_COMPONENTS = _class.staticFieldId(
    r'EXTRA_EXCLUDE_COMPONENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_EXCLUDE_COMPONENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_EXCLUDE_COMPONENTS =>
      _id_EXTRA_EXCLUDE_COMPONENTS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_FROM_STORAGE = _class.staticFieldId(
    r'EXTRA_FROM_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_FROM_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_FROM_STORAGE =>
      _id_EXTRA_FROM_STORAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_HTML_TEXT = _class.staticFieldId(
    r'EXTRA_HTML_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_HTML_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_HTML_TEXT =>
      _id_EXTRA_HTML_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INDEX = _class.staticFieldId(
    r'EXTRA_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INDEX =>
      _id_EXTRA_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INITIAL_INTENTS = _class.staticFieldId(
    r'EXTRA_INITIAL_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INITIAL_INTENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INITIAL_INTENTS =>
      _id_EXTRA_INITIAL_INTENTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INSTALLER_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_INSTALLER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INSTALLER_PACKAGE_NAME =>
      _id_EXTRA_INSTALLER_PACKAGE_NAME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INTENT = _class.staticFieldId(
    r'EXTRA_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INTENT =>
      _id_EXTRA_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_KEY_EVENT = _class.staticFieldId(
    r'EXTRA_KEY_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_KEY_EVENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_KEY_EVENT =>
      _id_EXTRA_KEY_EVENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCALE_LIST = _class.staticFieldId(
    r'EXTRA_LOCALE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCALE_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCALE_LIST =>
      _id_EXTRA_LOCALE_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCAL_ONLY = _class.staticFieldId(
    r'EXTRA_LOCAL_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCAL_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCAL_ONLY =>
      _id_EXTRA_LOCAL_ONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCUS_ID = _class.staticFieldId(
    r'EXTRA_LOCUS_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCUS_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCUS_ID =>
      _id_EXTRA_LOCUS_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_MIME_TYPES = _class.staticFieldId(
    r'EXTRA_MIME_TYPES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_MIME_TYPES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_MIME_TYPES =>
      _id_EXTRA_MIME_TYPES.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_NOT_UNKNOWN_SOURCE = _class.staticFieldId(
    r'EXTRA_NOT_UNKNOWN_SOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_NOT_UNKNOWN_SOURCE =>
      _id_EXTRA_NOT_UNKNOWN_SOURCE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ORIGINATING_URI = _class.staticFieldId(
    r'EXTRA_ORIGINATING_URI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ORIGINATING_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ORIGINATING_URI =>
      _id_EXTRA_ORIGINATING_URI.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PACKAGE_NAME =>
      _id_EXTRA_PACKAGE_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PERMISSION_GROUP_NAME = _class.staticFieldId(
    r'EXTRA_PERMISSION_GROUP_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PERMISSION_GROUP_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PERMISSION_GROUP_NAME =>
      _id_EXTRA_PERMISSION_GROUP_NAME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PHONE_NUMBER = _class.staticFieldId(
    r'EXTRA_PHONE_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PHONE_NUMBER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PHONE_NUMBER =>
      _id_EXTRA_PHONE_NUMBER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PROCESS_TEXT = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PROCESS_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PROCESS_TEXT =>
      _id_EXTRA_PROCESS_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PROCESS_TEXT_READONLY = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT_READONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PROCESS_TEXT_READONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PROCESS_TEXT_READONLY =>
      _id_EXTRA_PROCESS_TEXT_READONLY.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_QUICK_VIEW_FEATURES = _class.staticFieldId(
    r'EXTRA_QUICK_VIEW_FEATURES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_QUICK_VIEW_FEATURES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_QUICK_VIEW_FEATURES =>
      _id_EXTRA_QUICK_VIEW_FEATURES.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_QUIET_MODE = _class.staticFieldId(
    r'EXTRA_QUIET_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_QUIET_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_QUIET_MODE =>
      _id_EXTRA_QUIET_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REFERRER = _class.staticFieldId(
    r'EXTRA_REFERRER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REFERRER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REFERRER =>
      _id_EXTRA_REFERRER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REFERRER_NAME = _class.staticFieldId(
    r'EXTRA_REFERRER_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REFERRER_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REFERRER_NAME =>
      _id_EXTRA_REFERRER_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REMOTE_INTENT_TOKEN = _class.staticFieldId(
    r'EXTRA_REMOTE_INTENT_TOKEN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REMOTE_INTENT_TOKEN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REMOTE_INTENT_TOKEN =>
      _id_EXTRA_REMOTE_INTENT_TOKEN.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REPLACEMENT_EXTRAS = _class.staticFieldId(
    r'EXTRA_REPLACEMENT_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REPLACEMENT_EXTRAS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REPLACEMENT_EXTRAS =>
      _id_EXTRA_REPLACEMENT_EXTRAS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REPLACING = _class.staticFieldId(
    r'EXTRA_REPLACING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REPLACING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REPLACING =>
      _id_EXTRA_REPLACING.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_BUNDLE = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_BUNDLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_BUNDLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_BUNDLE =>
      _id_EXTRA_RESTRICTIONS_BUNDLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_INTENT = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_INTENT =>
      _id_EXTRA_RESTRICTIONS_INTENT.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_LIST = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_LIST =>
      _id_EXTRA_RESTRICTIONS_LIST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESULT_RECEIVER = _class.staticFieldId(
    r'EXTRA_RESULT_RECEIVER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESULT_RECEIVER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESULT_RECEIVER =>
      _id_EXTRA_RESULT_RECEIVER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RETURN_RESULT = _class.staticFieldId(
    r'EXTRA_RETURN_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RETURN_RESULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RETURN_RESULT =>
      _id_EXTRA_RETURN_RESULT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ICON = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ICON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ICON =>
      _id_EXTRA_SHORTCUT_ICON.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ICON_RESOURCE = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON_RESOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ICON_RESOURCE =>
      _id_EXTRA_SHORTCUT_ICON_RESOURCE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ID = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ID =>
      _id_EXTRA_SHORTCUT_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_INTENT = _class.staticFieldId(
    r'EXTRA_SHORTCUT_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_INTENT =>
      _id_EXTRA_SHORTCUT_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_NAME = _class.staticFieldId(
    r'EXTRA_SHORTCUT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_NAME =>
      _id_EXTRA_SHORTCUT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHUTDOWN_USERSPACE_ONLY = _class.staticFieldId(
    r'EXTRA_SHUTDOWN_USERSPACE_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHUTDOWN_USERSPACE_ONLY =>
      _id_EXTRA_SHUTDOWN_USERSPACE_ONLY.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SPLIT_NAME = _class.staticFieldId(
    r'EXTRA_SPLIT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SPLIT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SPLIT_NAME =>
      _id_EXTRA_SPLIT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_START_TIME = _class.staticFieldId(
    r'EXTRA_START_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_START_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_START_TIME =>
      _id_EXTRA_START_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_STREAM = _class.staticFieldId(
    r'EXTRA_STREAM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_STREAM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_STREAM =>
      _id_EXTRA_STREAM.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SUBJECT = _class.staticFieldId(
    r'EXTRA_SUBJECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUBJECT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SUBJECT =>
      _id_EXTRA_SUBJECT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS = _class.staticFieldId(
    r'EXTRA_SUSPENDED_PACKAGE_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SUSPENDED_PACKAGE_EXTRAS =>
      _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TEMPLATE = _class.staticFieldId(
    r'EXTRA_TEMPLATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TEMPLATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TEMPLATE =>
      _id_EXTRA_TEMPLATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TEXT = _class.staticFieldId(
    r'EXTRA_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TEXT =>
      _id_EXTRA_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TIME = _class.staticFieldId(
    r'EXTRA_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TIME =>
      _id_EXTRA_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TIMEZONE = _class.staticFieldId(
    r'EXTRA_TIMEZONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TIMEZONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TIMEZONE =>
      _id_EXTRA_TIMEZONE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TITLE = _class.staticFieldId(
    r'EXTRA_TITLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TITLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TITLE =>
      _id_EXTRA_TITLE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_UID = _class.staticFieldId(
    r'EXTRA_UID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_UID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_UID =>
      _id_EXTRA_UID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USER = _class.staticFieldId(
    r'EXTRA_USER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USER =>
      _id_EXTRA_USER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USER_INITIATED = _class.staticFieldId(
    r'EXTRA_USER_INITIATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USER_INITIATED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USER_INITIATED =>
      _id_EXTRA_USER_INITIATED.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int FILL_IN_ACTION`
  static const FILL_IN_ACTION = 1;

  /// from: `static public final int FILL_IN_CATEGORIES`
  static const FILL_IN_CATEGORIES = 4;

  /// from: `static public final int FILL_IN_CLIP_DATA`
  static const FILL_IN_CLIP_DATA = 128;

  /// from: `static public final int FILL_IN_COMPONENT`
  static const FILL_IN_COMPONENT = 8;

  /// from: `static public final int FILL_IN_DATA`
  static const FILL_IN_DATA = 2;

  /// from: `static public final int FILL_IN_IDENTIFIER`
  static const FILL_IN_IDENTIFIER = 256;

  /// from: `static public final int FILL_IN_PACKAGE`
  static const FILL_IN_PACKAGE = 16;

  /// from: `static public final int FILL_IN_SELECTOR`
  static const FILL_IN_SELECTOR = 64;

  /// from: `static public final int FILL_IN_SOURCE_BOUNDS`
  static const FILL_IN_SOURCE_BOUNDS = 32;

  /// from: `static public final int FLAG_ACTIVITY_BROUGHT_TO_FRONT`
  static const FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_TASK`
  static const FLAG_ACTIVITY_CLEAR_TASK = 32768;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_TOP`
  static const FLAG_ACTIVITY_CLEAR_TOP = 67108864;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET`
  static const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288;

  /// from: `static public final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS`
  static const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;

  /// from: `static public final int FLAG_ACTIVITY_FORWARD_RESULT`
  static const FLAG_ACTIVITY_FORWARD_RESULT = 33554432;

  /// from: `static public final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY`
  static const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;

  /// from: `static public final int FLAG_ACTIVITY_LAUNCH_ADJACENT`
  static const FLAG_ACTIVITY_LAUNCH_ADJACENT = 4096;

  /// from: `static public final int FLAG_ACTIVITY_MATCH_EXTERNAL`
  static const FLAG_ACTIVITY_MATCH_EXTERNAL = 2048;

  /// from: `static public final int FLAG_ACTIVITY_MULTIPLE_TASK`
  static const FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;

  /// from: `static public final int FLAG_ACTIVITY_NEW_DOCUMENT`
  static const FLAG_ACTIVITY_NEW_DOCUMENT = 524288;

  /// from: `static public final int FLAG_ACTIVITY_NEW_TASK`
  static const FLAG_ACTIVITY_NEW_TASK = 268435456;

  /// from: `static public final int FLAG_ACTIVITY_NO_ANIMATION`
  static const FLAG_ACTIVITY_NO_ANIMATION = 65536;

  /// from: `static public final int FLAG_ACTIVITY_NO_HISTORY`
  static const FLAG_ACTIVITY_NO_HISTORY = 1073741824;

  /// from: `static public final int FLAG_ACTIVITY_NO_USER_ACTION`
  static const FLAG_ACTIVITY_NO_USER_ACTION = 262144;

  /// from: `static public final int FLAG_ACTIVITY_PREVIOUS_IS_TOP`
  static const FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;

  /// from: `static public final int FLAG_ACTIVITY_REORDER_TO_FRONT`
  static const FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;

  /// from: `static public final int FLAG_ACTIVITY_REQUIRE_DEFAULT`
  static const FLAG_ACTIVITY_REQUIRE_DEFAULT = 512;

  /// from: `static public final int FLAG_ACTIVITY_REQUIRE_NON_BROWSER`
  static const FLAG_ACTIVITY_REQUIRE_NON_BROWSER = 1024;

  /// from: `static public final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED`
  static const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;

  /// from: `static public final int FLAG_ACTIVITY_RETAIN_IN_RECENTS`
  static const FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;

  /// from: `static public final int FLAG_ACTIVITY_SINGLE_TOP`
  static const FLAG_ACTIVITY_SINGLE_TOP = 536870912;

  /// from: `static public final int FLAG_ACTIVITY_TASK_ON_HOME`
  static const FLAG_ACTIVITY_TASK_ON_HOME = 16384;

  /// from: `static public final int FLAG_DEBUG_LOG_RESOLUTION`
  static const FLAG_DEBUG_LOG_RESOLUTION = 8;

  /// from: `static public final int FLAG_DIRECT_BOOT_AUTO`
  static const FLAG_DIRECT_BOOT_AUTO = 256;

  /// from: `static public final int FLAG_EXCLUDE_STOPPED_PACKAGES`
  static const FLAG_EXCLUDE_STOPPED_PACKAGES = 16;

  /// from: `static public final int FLAG_FROM_BACKGROUND`
  static const FLAG_FROM_BACKGROUND = 4;

  /// from: `static public final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION`
  static const FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;

  /// from: `static public final int FLAG_GRANT_PREFIX_URI_PERMISSION`
  static const FLAG_GRANT_PREFIX_URI_PERMISSION = 128;

  /// from: `static public final int FLAG_GRANT_READ_URI_PERMISSION`
  static const FLAG_GRANT_READ_URI_PERMISSION = 1;

  /// from: `static public final int FLAG_GRANT_WRITE_URI_PERMISSION`
  static const FLAG_GRANT_WRITE_URI_PERMISSION = 2;

  /// from: `static public final int FLAG_INCLUDE_STOPPED_PACKAGES`
  static const FLAG_INCLUDE_STOPPED_PACKAGES = 32;

  /// from: `static public final int FLAG_RECEIVER_FOREGROUND`
  static const FLAG_RECEIVER_FOREGROUND = 268435456;

  /// from: `static public final int FLAG_RECEIVER_NO_ABORT`
  static const FLAG_RECEIVER_NO_ABORT = 134217728;

  /// from: `static public final int FLAG_RECEIVER_REGISTERED_ONLY`
  static const FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;

  /// from: `static public final int FLAG_RECEIVER_REPLACE_PENDING`
  static const FLAG_RECEIVER_REPLACE_PENDING = 536870912;

  /// from: `static public final int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS = 2097152;
  static final _id_METADATA_DOCK_HOME = _class.staticFieldId(
    r'METADATA_DOCK_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String METADATA_DOCK_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get METADATA_DOCK_HOME =>
      _id_METADATA_DOCK_HOME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int URI_ALLOW_UNSAFE`
  static const URI_ALLOW_UNSAFE = 4;

  /// from: `static public final int URI_ANDROID_APP_SCHEME`
  static const URI_ANDROID_APP_SCHEME = 2;

  /// from: `static public final int URI_INTENT_SCHEME`
  static const URI_INTENT_SCHEME = 1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent() {
    return Intent.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$1(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$intent.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$2(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$2(_class.reference.pointer,
            _id_new$2 as jni$_.JMethodIDPtr, _$string.pointer)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;)V',
  );

  static final _new$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$3(
    jni$_.JString? string,
    jni$_.JObject? uri,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$3(_class.reference.pointer,
            _id_new$3 as jni$_.JMethodIDPtr, _$string.pointer, _$uri.pointer)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new$4 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$4(
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$4(
            _class.reference.pointer,
            _id_new$4 as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$class$.pointer)
        .reference);
  }

  static final _id_new$5 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new$5 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, android.net.Uri uri, android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$5(
    jni$_.JString? string,
    jni$_.JObject? uri,
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$5(
            _class.reference.pointer,
            _id_new$5 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            _$context.pointer,
            _$class$.pointer)
        .reference);
  }

  static final _id_createChooser = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _createChooser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? createChooser(
    Intent? intent,
    jni$_.JObject? charSequence,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _createChooser(
            _class.reference.pointer,
            _id_createChooser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$charSequence.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_createChooser$1 = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;',
  );

  static final _createChooser$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence, android.content.IntentSender intentSender)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? createChooser$1(
    Intent? intent,
    jni$_.JObject? charSequence,
    jni$_.JObject? intentSender,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    return _createChooser$1(
            _class.reference.pointer,
            _id_createChooser$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$charSequence.pointer,
            _$intentSender.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_clone = _class.instanceMethodId(
    r'clone',
    r'()Ljava/lang/Object;',
  );

  static final _clone = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Object clone()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? clone() {
    return _clone(reference.pointer, _id_clone as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_cloneFilter = _class.instanceMethodId(
    r'cloneFilter',
    r'()Landroid/content/Intent;',
  );

  static final _cloneFilter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent cloneFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? cloneFilter() {
    return _cloneFilter(
            reference.pointer, _id_cloneFilter as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeMainActivity = _class.staticMethodId(
    r'makeMainActivity',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeMainActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent makeMainActivity(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeMainActivity(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _makeMainActivity(_class.reference.pointer,
            _id_makeMainActivity as jni$_.JMethodIDPtr, _$componentName.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeMainSelectorActivity = _class.staticMethodId(
    r'makeMainSelectorActivity',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _makeMainSelectorActivity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent makeMainSelectorActivity(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeMainSelectorActivity(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _makeMainSelectorActivity(
            _class.reference.pointer,
            _id_makeMainSelectorActivity as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeRestartActivityTask = _class.staticMethodId(
    r'makeRestartActivityTask',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeRestartActivityTask = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent makeRestartActivityTask(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeRestartActivityTask(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _makeRestartActivityTask(
            _class.reference.pointer,
            _id_makeRestartActivityTask as jni$_.JMethodIDPtr,
            _$componentName.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getIntent = _class.staticMethodId(
    r'getIntent',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent getIntent(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? getIntent(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntent(_class.reference.pointer,
            _id_getIntent as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_parseUri = _class.staticMethodId(
    r'parseUri',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _parseUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public android.content.Intent parseUri(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? parseUri(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _parseUri(_class.reference.pointer,
            _id_parseUri as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getIntentOld = _class.staticMethodId(
    r'getIntentOld',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntentOld = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent getIntentOld(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? getIntentOld(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntentOld(_class.reference.pointer,
            _id_getIntentOld as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getAction = _class.instanceMethodId(
    r'getAction',
    r'()Ljava/lang/String;',
  );

  static final _getAction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAction()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAction() {
    return _getAction(reference.pointer, _id_getAction as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getData = _class.instanceMethodId(
    r'getData',
    r'()Landroid/net/Uri;',
  );

  static final _getData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri getData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getData() {
    return _getData(reference.pointer, _id_getData as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataString = _class.instanceMethodId(
    r'getDataString',
    r'()Ljava/lang/String;',
  );

  static final _getDataString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getDataString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getDataString() {
    return _getDataString(
            reference.pointer, _id_getDataString as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Ljava/lang/String;',
  );

  static final _getScheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getScheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()Ljava/lang/String;',
  );

  static final _getType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getType()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getType() {
    return _getType(reference.pointer, _id_getType as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveType = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _resolveType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String resolveType(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveType(
    Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _resolveType(reference.pointer,
            _id_resolveType as jni$_.JMethodIDPtr, _$context.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveType$1 = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveType$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String resolveType(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveType$1(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    return _resolveType$1(reference.pointer,
            _id_resolveType$1 as jni$_.JMethodIDPtr, _$contentResolver.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveTypeIfNeeded = _class.instanceMethodId(
    r'resolveTypeIfNeeded',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveTypeIfNeeded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveTypeIfNeeded(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    return _resolveTypeIfNeeded(
            reference.pointer,
            _id_resolveTypeIfNeeded as jni$_.JMethodIDPtr,
            _$contentResolver.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getIdentifier = _class.instanceMethodId(
    r'getIdentifier',
    r'()Ljava/lang/String;',
  );

  static final _getIdentifier = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getIdentifier()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getIdentifier() {
    return _getIdentifier(
            reference.pointer, _id_getIdentifier as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r'hasCategory',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean hasCategory(java.lang.String string)`
  bool hasCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasCategory(reference.pointer,
            _id_hasCategory as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_getCategories = _class.instanceMethodId(
    r'getCategories',
    r'()Ljava/util/Set;',
  );

  static final _getCategories = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.Set getCategories()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<jni$_.JString?>? getCategories() {
    return _getCategories(
            reference.pointer, _id_getCategories as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<jni$_.JString?>?>(
            const jni$_.JSetNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getSelector = _class.instanceMethodId(
    r'getSelector',
    r'()Landroid/content/Intent;',
  );

  static final _getSelector = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getSelector()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getSelector() {
    return _getSelector(
            reference.pointer, _id_getSelector as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getClipData = _class.instanceMethodId(
    r'getClipData',
    r'()Landroid/content/ClipData;',
  );

  static final _getClipData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ClipData getClipData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClipData() {
    return _getClipData(
            reference.pointer, _id_getClipData as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setExtrasClassLoader = _class.instanceMethodId(
    r'setExtrasClassLoader',
    r'(Ljava/lang/ClassLoader;)V',
  );

  static final _setExtrasClassLoader = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setExtrasClassLoader(java.lang.ClassLoader classLoader)`
  void setExtrasClassLoader(
    jni$_.JObject? classLoader,
  ) {
    final _$classLoader = classLoader?.reference ?? jni$_.jNullReference;
    _setExtrasClassLoader(
            reference.pointer,
            _id_setExtrasClassLoader as jni$_.JMethodIDPtr,
            _$classLoader.pointer)
        .check();
  }

  static final _id_hasExtra = _class.instanceMethodId(
    r'hasExtra',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean hasExtra(java.lang.String string)`
  bool hasExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasExtra(reference.pointer, _id_hasExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_hasFileDescriptors = _class.instanceMethodId(
    r'hasFileDescriptors',
    r'()Z',
  );

  static final _hasFileDescriptors = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean hasFileDescriptors()`
  bool hasFileDescriptors() {
    return _hasFileDescriptors(
            reference.pointer, _id_hasFileDescriptors as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getBooleanExtra = _class.instanceMethodId(
    r'getBooleanExtra',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _getBooleanExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public boolean getBooleanExtra(java.lang.String string, boolean z)`
  bool getBooleanExtra(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanExtra(
            reference.pointer,
            _id_getBooleanExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_getByteExtra = _class.instanceMethodId(
    r'getByteExtra',
    r'(Ljava/lang/String;B)B',
  );

  static final _getByteExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallByteMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public byte getByteExtra(java.lang.String string, byte b)`
  int getByteExtra(
    jni$_.JString? string,
    int b,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getByteExtra(reference.pointer,
            _id_getByteExtra as jni$_.JMethodIDPtr, _$string.pointer, b)
        .byte;
  }

  static final _id_getShortExtra = _class.instanceMethodId(
    r'getShortExtra',
    r'(Ljava/lang/String;S)S',
  );

  static final _getShortExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallShortMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public short getShortExtra(java.lang.String string, short s)`
  int getShortExtra(
    jni$_.JString? string,
    int s,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getShortExtra(reference.pointer,
            _id_getShortExtra as jni$_.JMethodIDPtr, _$string.pointer, s)
        .short;
  }

  static final _id_getCharExtra = _class.instanceMethodId(
    r'getCharExtra',
    r'(Ljava/lang/String;C)C',
  );

  static final _getCharExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallCharMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public char getCharExtra(java.lang.String string, char c)`
  int getCharExtra(
    jni$_.JString? string,
    int c,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharExtra(reference.pointer,
            _id_getCharExtra as jni$_.JMethodIDPtr, _$string.pointer, c)
        .char;
  }

  static final _id_getIntExtra = _class.instanceMethodId(
    r'getIntExtra',
    r'(Ljava/lang/String;I)I',
  );

  static final _getIntExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public int getIntExtra(java.lang.String string, int i)`
  int getIntExtra(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntExtra(reference.pointer,
            _id_getIntExtra as jni$_.JMethodIDPtr, _$string.pointer, i)
        .integer;
  }

  static final _id_getLongExtra = _class.instanceMethodId(
    r'getLongExtra',
    r'(Ljava/lang/String;J)J',
  );

  static final _getLongExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public long getLongExtra(java.lang.String string, long j)`
  int getLongExtra(
    jni$_.JString? string,
    int j,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getLongExtra(reference.pointer,
            _id_getLongExtra as jni$_.JMethodIDPtr, _$string.pointer, j)
        .long;
  }

  static final _id_getFloatExtra = _class.instanceMethodId(
    r'getFloatExtra',
    r'(Ljava/lang/String;F)F',
  );

  static final _getFloatExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public float getFloatExtra(java.lang.String string, float f)`
  double getFloatExtra(
    jni$_.JString? string,
    double f,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFloatExtra(reference.pointer,
            _id_getFloatExtra as jni$_.JMethodIDPtr, _$string.pointer, f)
        .float;
  }

  static final _id_getDoubleExtra = _class.instanceMethodId(
    r'getDoubleExtra',
    r'(Ljava/lang/String;D)D',
  );

  static final _getDoubleExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public double getDoubleExtra(java.lang.String string, double d)`
  double getDoubleExtra(
    jni$_.JString? string,
    double d,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDoubleExtra(reference.pointer,
            _id_getDoubleExtra as jni$_.JMethodIDPtr, _$string.pointer, d)
        .doubleFloat;
  }

  static final _id_getStringExtra = _class.instanceMethodId(
    r'getStringExtra',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getStringExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String getStringExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getStringExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringExtra(reference.pointer,
            _id_getStringExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCharSequenceExtra = _class.instanceMethodId(
    r'getCharSequenceExtra',
    r'(Ljava/lang/String;)Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.CharSequence getCharSequenceExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCharSequenceExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceExtra(reference.pointer,
            _id_getCharSequenceExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParcelableExtra = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;)Landroid/os/Parcelable;',
  );

  static final _getParcelableExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public T getParcelableExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getParcelableExtra<$T extends jni$_.JObject?>(
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableExtra(reference.pointer,
            _id_getParcelableExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getParcelableExtra$1 = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getParcelableExtra$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public T getParcelableExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getParcelableExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableExtra$1(
            reference.pointer,
            _id_getParcelableExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getParcelableArrayExtra = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;)[Landroid/os/Parcelable;',
  );

  static final _getParcelableArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getParcelableArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayExtra(reference.pointer,
            _id_getParcelableArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getParcelableArrayExtra$1 = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;',
  );

  static final _getParcelableArrayExtra$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object[] getParcelableArrayExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<$T?>? getParcelableArrayExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayExtra$1(
            reference.pointer,
            _id_getParcelableArrayExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<jni$_.JArray<$T?>?>(
            jni$_.JArrayNullableType<$T?>(T.nullableType));
  }

  static final _id_getParcelableArrayListExtra = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParcelableArrayListExtra<$T extends jni$_.JObject?>(
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayListExtra(
            reference.pointer,
            _id_getParcelableArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParcelableArrayListExtra$1 = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParcelableArrayListExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayListExtra$1(
            reference.pointer,
            _id_getParcelableArrayListExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSerializableExtra = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.io.Serializable getSerializableExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSerializableExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSerializableExtra(reference.pointer,
            _id_getSerializableExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSerializableExtra$1 = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public T getSerializableExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSerializableExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSerializableExtra$1(
            reference.pointer,
            _id_getSerializableExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getIntegerArrayListExtra = _class.instanceMethodId(
    r'getIntegerArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getIntegerArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getIntegerArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getIntegerArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntegerArrayListExtra(
            reference.pointer,
            _id_getIntegerArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getStringArrayListExtra = _class.instanceMethodId(
    r'getStringArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getStringArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getStringArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getStringArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringArrayListExtra(reference.pointer,
            _id_getStringArrayListExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCharSequenceArrayListExtra = _class.instanceMethodId(
    r'getCharSequenceArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getCharSequenceArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCharSequenceArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceArrayListExtra(
            reference.pointer,
            _id_getCharSequenceArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getBooleanArrayExtra = _class.instanceMethodId(
    r'getBooleanArrayExtra',
    r'(Ljava/lang/String;)[Z',
  );

  static final _getBooleanArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean[] getBooleanArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBooleanArray? getBooleanArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanArrayExtra(reference.pointer,
            _id_getBooleanArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JBooleanArray?>(const jni$_.JBooleanArrayNullableType());
  }

  static final _id_getByteArrayExtra = _class.instanceMethodId(
    r'getByteArrayExtra',
    r'(Ljava/lang/String;)[B',
  );

  static final _getByteArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public byte[] getByteArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getByteArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getByteArrayExtra(reference.pointer,
            _id_getByteArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getShortArrayExtra = _class.instanceMethodId(
    r'getShortArrayExtra',
    r'(Ljava/lang/String;)[S',
  );

  static final _getShortArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public short[] getShortArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JShortArray? getShortArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getShortArrayExtra(reference.pointer,
            _id_getShortArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JShortArray?>(const jni$_.JShortArrayNullableType());
  }

  static final _id_getCharArrayExtra = _class.instanceMethodId(
    r'getCharArrayExtra',
    r'(Ljava/lang/String;)[C',
  );

  static final _getCharArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public char[] getCharArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JCharArray? getCharArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharArrayExtra(reference.pointer,
            _id_getCharArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JCharArray?>(const jni$_.JCharArrayNullableType());
  }

  static final _id_getIntArrayExtra = _class.instanceMethodId(
    r'getIntArrayExtra',
    r'(Ljava/lang/String;)[I',
  );

  static final _getIntArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int[] getIntArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? getIntArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntArrayExtra(reference.pointer,
            _id_getIntArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_getLongArrayExtra = _class.instanceMethodId(
    r'getLongArrayExtra',
    r'(Ljava/lang/String;)[J',
  );

  static final _getLongArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public long[] getLongArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLongArray? getLongArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getLongArrayExtra(reference.pointer,
            _id_getLongArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JLongArray?>(const jni$_.JLongArrayNullableType());
  }

  static final _id_getFloatArrayExtra = _class.instanceMethodId(
    r'getFloatArrayExtra',
    r'(Ljava/lang/String;)[F',
  );

  static final _getFloatArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public float[] getFloatArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JFloatArray? getFloatArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFloatArrayExtra(reference.pointer,
            _id_getFloatArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JFloatArray?>(const jni$_.JFloatArrayNullableType());
  }

  static final _id_getDoubleArrayExtra = _class.instanceMethodId(
    r'getDoubleArrayExtra',
    r'(Ljava/lang/String;)[D',
  );

  static final _getDoubleArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public double[] getDoubleArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDoubleArray? getDoubleArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDoubleArrayExtra(reference.pointer,
            _id_getDoubleArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JDoubleArray?>(const jni$_.JDoubleArrayNullableType());
  }

  static final _id_getStringArrayExtra = _class.instanceMethodId(
    r'getStringArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getStringArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String[] getStringArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? getStringArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringArrayExtra(reference.pointer,
            _id_getStringArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getCharSequenceArrayExtra = _class.instanceMethodId(
    r'getCharSequenceArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getCharSequenceArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceArrayExtra(
            reference.pointer,
            _id_getCharSequenceArrayExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getBundleExtra = _class.instanceMethodId(
    r'getBundleExtra',
    r'(Ljava/lang/String;)Landroid/os/Bundle;',
  );

  static final _getBundleExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.os.Bundle getBundleExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBundleExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBundleExtra(reference.pointer,
            _id_getBundleExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExtras = _class.instanceMethodId(
    r'getExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getExtras = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle getExtras()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExtras() {
    return _getExtras(reference.pointer, _id_getExtras as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFlags = _class.instanceMethodId(
    r'getFlags',
    r'()I',
  );

  static final _getFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getFlags()`
  int getFlags() {
    return _getFlags(reference.pointer, _id_getFlags as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getPackage = _class.instanceMethodId(
    r'getPackage',
    r'()Ljava/lang/String;',
  );

  static final _getPackage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackage() {
    return _getPackage(reference.pointer, _id_getPackage as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getComponent = _class.instanceMethodId(
    r'getComponent',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ComponentName getComponent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getComponent() {
    return _getComponent(
            reference.pointer, _id_getComponent as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSourceBounds = _class.instanceMethodId(
    r'getSourceBounds',
    r'()Landroid/graphics/Rect;',
  );

  static final _getSourceBounds = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Rect getSourceBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSourceBounds() {
    return _getSourceBounds(
            reference.pointer, _id_getSourceBounds as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_resolveActivity = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;',
  );

  static final _resolveActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.ComponentName resolveActivity(android.content.pm.PackageManager packageManager)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? resolveActivity(
    jni$_.JObject? packageManager,
  ) {
    final _$packageManager = packageManager?.reference ?? jni$_.jNullReference;
    return _resolveActivity(reference.pointer,
            _id_resolveActivity as jni$_.JMethodIDPtr, _$packageManager.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_resolveActivityInfo = _class.instanceMethodId(
    r'resolveActivityInfo',
    r'(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _resolveActivityInfo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager packageManager, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? resolveActivityInfo(
    jni$_.JObject? packageManager,
    int i,
  ) {
    final _$packageManager = packageManager?.reference ?? jni$_.jNullReference;
    return _resolveActivityInfo(
            reference.pointer,
            _id_resolveActivityInfo as jni$_.JMethodIDPtr,
            _$packageManager.pointer,
            i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setAction = _class.instanceMethodId(
    r'setAction',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setAction = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setAction(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setAction(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAction(reference.pointer, _id_setAction as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setData = _class.instanceMethodId(
    r'setData',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setData(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setData(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setData(
            reference.pointer, _id_setData as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndNormalize = _class.instanceMethodId(
    r'setDataAndNormalize',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setDataAndNormalize = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setDataAndNormalize(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndNormalize(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setDataAndNormalize(reference.pointer,
            _id_setDataAndNormalize as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setType = _class.instanceMethodId(
    r'setType',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setType(reference.pointer, _id_setType as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setTypeAndNormalize = _class.instanceMethodId(
    r'setTypeAndNormalize',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setTypeAndNormalize = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setTypeAndNormalize(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setTypeAndNormalize(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setTypeAndNormalize(reference.pointer,
            _id_setTypeAndNormalize as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndType = _class.instanceMethodId(
    r'setDataAndType',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setDataAndType(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndType(
    jni$_.JObject? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDataAndType(
            reference.pointer,
            _id_setDataAndType as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndTypeAndNormalize = _class.instanceMethodId(
    r'setDataAndTypeAndNormalize',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndTypeAndNormalize =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndTypeAndNormalize(
    jni$_.JObject? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDataAndTypeAndNormalize(
            reference.pointer,
            _id_setDataAndTypeAndNormalize as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setIdentifier = _class.instanceMethodId(
    r'setIdentifier',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setIdentifier = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setIdentifier(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setIdentifier(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setIdentifier(reference.pointer,
            _id_setIdentifier as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_addCategory = _class.instanceMethodId(
    r'addCategory',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _addCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent addCategory(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? addCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _addCategory(reference.pointer,
            _id_addCategory as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeCategory = _class.instanceMethodId(
    r'removeCategory',
    r'(Ljava/lang/String;)V',
  );

  static final _removeCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void removeCategory(java.lang.String string)`
  void removeCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _removeCategory(reference.pointer, _id_removeCategory as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_setSelector = _class.instanceMethodId(
    r'setSelector',
    r'(Landroid/content/Intent;)V',
  );

  static final _setSelector = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setSelector(android.content.Intent intent)`
  void setSelector(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setSelector(reference.pointer, _id_setSelector as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_setClipData = _class.instanceMethodId(
    r'setClipData',
    r'(Landroid/content/ClipData;)V',
  );

  static final _setClipData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setClipData(android.content.ClipData clipData)`
  void setClipData(
    jni$_.JObject? clipData,
  ) {
    final _$clipData = clipData?.reference ?? jni$_.jNullReference;
    _setClipData(reference.pointer, _id_setClipData as jni$_.JMethodIDPtr,
            _$clipData.pointer)
        .check();
  }

  static final _id_putExtra = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Z)Landroid/content/Intent;',
  );

  static final _putExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra(reference.pointer, _id_putExtra as jni$_.JMethodIDPtr,
            _$string.pointer, z ? 1 : 0)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$1 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;B)Landroid/content/Intent;',
  );

  static final _putExtra$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, byte b)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$1(
    jni$_.JString? string,
    int b,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$1(reference.pointer, _id_putExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer, b)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$2 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;C)Landroid/content/Intent;',
  );

  static final _putExtra$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, char c)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$2(
    jni$_.JString? string,
    int c,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$2(reference.pointer, _id_putExtra$2 as jni$_.JMethodIDPtr,
            _$string.pointer, c)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$3 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;S)Landroid/content/Intent;',
  );

  static final _putExtra$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, short s)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$3(
    jni$_.JString? string,
    int s,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$3(reference.pointer, _id_putExtra$3 as jni$_.JMethodIDPtr,
            _$string.pointer, s)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$4 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _putExtra$4 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$4(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$4(reference.pointer, _id_putExtra$4 as jni$_.JMethodIDPtr,
            _$string.pointer, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$5 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;J)Landroid/content/Intent;',
  );

  static final _putExtra$5 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$5(
    jni$_.JString? string,
    int j,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$5(reference.pointer, _id_putExtra$5 as jni$_.JMethodIDPtr,
            _$string.pointer, j)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$6 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;F)Landroid/content/Intent;',
  );

  static final _putExtra$6 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, float f)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$6(
    jni$_.JString? string,
    double f,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$6(reference.pointer, _id_putExtra$6 as jni$_.JMethodIDPtr,
            _$string.pointer, f)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$7 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;D)Landroid/content/Intent;',
  );

  static final _putExtra$7 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$7(
    jni$_.JString? string,
    double d,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$7(reference.pointer, _id_putExtra$7 as jni$_.JMethodIDPtr,
            _$string.pointer, d)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$8 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra$8 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$8(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _putExtra$8(reference.pointer, _id_putExtra$8 as jni$_.JMethodIDPtr,
            _$string.pointer, _$string1.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$9 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra$9 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$9(
    jni$_.JString? string,
    jni$_.JObject? charSequence,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _putExtra$9(reference.pointer, _id_putExtra$9 as jni$_.JMethodIDPtr,
            _$string.pointer, _$charSequence.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$10 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra$10 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable parcelable)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$10(
    jni$_.JString? string,
    jni$_.JObject? parcelable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$parcelable = parcelable?.reference ?? jni$_.jNullReference;
    return _putExtra$10(
            reference.pointer,
            _id_putExtra$10 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$parcelable.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$11 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra$11 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable[] parcelables)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$11(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JObject?>? parcelables,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$parcelables = parcelables?.reference ?? jni$_.jNullReference;
    return _putExtra$11(
            reference.pointer,
            _id_putExtra$11 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$parcelables.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putParcelableArrayListExtra = _class.instanceMethodId(
    r'putParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putParcelableArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putParcelableArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putParcelableArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putParcelableArrayListExtra(
            reference.pointer,
            _id_putParcelableArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putIntegerArrayListExtra = _class.instanceMethodId(
    r'putIntegerArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putIntegerArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putIntegerArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putIntegerArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putIntegerArrayListExtra(
            reference.pointer,
            _id_putIntegerArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putStringArrayListExtra = _class.instanceMethodId(
    r'putStringArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putStringArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putStringArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putStringArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putStringArrayListExtra(
            reference.pointer,
            _id_putStringArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putCharSequenceArrayListExtra = _class.instanceMethodId(
    r'putCharSequenceArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putCharSequenceArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putCharSequenceArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putCharSequenceArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putCharSequenceArrayListExtra(
            reference.pointer,
            _id_putCharSequenceArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$12 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/io/Serializable;)Landroid/content/Intent;',
  );

  static final _putExtra$12 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.io.Serializable serializable)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$12(
    jni$_.JString? string,
    jni$_.JObject? serializable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$serializable = serializable?.reference ?? jni$_.jNullReference;
    return _putExtra$12(
            reference.pointer,
            _id_putExtra$12 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$serializable.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$13 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Z)Landroid/content/Intent;',
  );

  static final _putExtra$13 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, boolean[] zs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$13(
    jni$_.JString? string,
    jni$_.JBooleanArray? zs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$zs = zs?.reference ?? jni$_.jNullReference;
    return _putExtra$13(
            reference.pointer,
            _id_putExtra$13 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$zs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$14 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[B)Landroid/content/Intent;',
  );

  static final _putExtra$14 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$14(
    jni$_.JString? string,
    jni$_.JByteArray? bs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _putExtra$14(
            reference.pointer,
            _id_putExtra$14 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$bs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$15 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[S)Landroid/content/Intent;',
  );

  static final _putExtra$15 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, short[] ss)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$15(
    jni$_.JString? string,
    jni$_.JShortArray? ss,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$ss = ss?.reference ?? jni$_.jNullReference;
    return _putExtra$15(
            reference.pointer,
            _id_putExtra$15 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$ss.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$16 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[C)Landroid/content/Intent;',
  );

  static final _putExtra$16 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, char[] cs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$16(
    jni$_.JString? string,
    jni$_.JCharArray? cs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cs = cs?.reference ?? jni$_.jNullReference;
    return _putExtra$16(
            reference.pointer,
            _id_putExtra$16 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$cs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$17 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[I)Landroid/content/Intent;',
  );

  static final _putExtra$17 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$17(
    jni$_.JString? string,
    jni$_.JIntArray? is$,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _putExtra$17(
            reference.pointer,
            _id_putExtra$17 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$is$.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$18 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[J)Landroid/content/Intent;',
  );

  static final _putExtra$18 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, long[] js)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$18(
    jni$_.JString? string,
    jni$_.JLongArray? js,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$js = js?.reference ?? jni$_.jNullReference;
    return _putExtra$18(
            reference.pointer,
            _id_putExtra$18 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$js.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$19 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[F)Landroid/content/Intent;',
  );

  static final _putExtra$19 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, float[] fs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$19(
    jni$_.JString? string,
    jni$_.JFloatArray? fs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$fs = fs?.reference ?? jni$_.jNullReference;
    return _putExtra$19(
            reference.pointer,
            _id_putExtra$19 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$fs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$20 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[D)Landroid/content/Intent;',
  );

  static final _putExtra$20 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$20(
    jni$_.JString? string,
    jni$_.JDoubleArray? ds,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    return _putExtra$20(
            reference.pointer,
            _id_putExtra$20 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$ds.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$21 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra$21 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$21(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    return _putExtra$21(
            reference.pointer,
            _id_putExtra$21 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$strings.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$22 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra$22 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence[] charSequences)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$22(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JObject?>? charSequences,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$charSequences = charSequences?.reference ?? jni$_.jNullReference;
    return _putExtra$22(
            reference.pointer,
            _id_putExtra$22 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$charSequences.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$23 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtra$23 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$23(
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _putExtra$23(
            reference.pointer,
            _id_putExtra$23 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$bundle.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtras = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _putExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtras(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _putExtras(reference.pointer, _id_putExtras as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtras$1 = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtras$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtras$1(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _putExtras$1(reference.pointer,
            _id_putExtras$1 as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_replaceExtras = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _replaceExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent replaceExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? replaceExtras(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _replaceExtras(reference.pointer,
            _id_replaceExtras as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_replaceExtras$1 = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _replaceExtras$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent replaceExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? replaceExtras$1(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _replaceExtras$1(reference.pointer,
            _id_replaceExtras$1 as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeExtra = _class.instanceMethodId(
    r'removeExtra',
    r'(Ljava/lang/String;)V',
  );

  static final _removeExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void removeExtra(java.lang.String string)`
  void removeExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _removeExtra(reference.pointer, _id_removeExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_setFlags = _class.instanceMethodId(
    r'setFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _setFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Intent setFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setFlags(
    int i,
  ) {
    return _setFlags(reference.pointer, _id_setFlags as jni$_.JMethodIDPtr, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_addFlags = _class.instanceMethodId(
    r'addFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _addFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Intent addFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? addFlags(
    int i,
  ) {
    return _addFlags(reference.pointer, _id_addFlags as jni$_.JMethodIDPtr, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeFlags = _class.instanceMethodId(
    r'removeFlags',
    r'(I)V',
  );

  static final _removeFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void removeFlags(int i)`
  void removeFlags(
    int i,
  ) {
    _removeFlags(reference.pointer, _id_removeFlags as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setPackage = _class.instanceMethodId(
    r'setPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setPackage = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setPackage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setPackage(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setPackage(reference.pointer, _id_setPackage as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setComponent = _class.instanceMethodId(
    r'setComponent',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _setComponent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setComponent(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setComponent(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _setComponent(reference.pointer,
            _id_setComponent as jni$_.JMethodIDPtr, _$componentName.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClassName = _class.instanceMethodId(
    r'setClassName',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setClassName(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClassName(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setClassName(
            reference.pointer,
            _id_setClassName as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClassName$1 = _class.instanceMethodId(
    r'setClassName',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setClassName(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClassName$1(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _setClassName$1(
            reference.pointer,
            _id_setClassName$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClass = _class.instanceMethodId(
    r'setClass',
    r'(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;',
  );

  static final _setClass = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setClass(android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClass(
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _setClass(reference.pointer, _id_setClass as jni$_.JMethodIDPtr,
            _$context.pointer, _$class$.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setSourceBounds = _class.instanceMethodId(
    r'setSourceBounds',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setSourceBounds = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setSourceBounds(android.graphics.Rect rect)`
  void setSourceBounds(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _setSourceBounds(reference.pointer,
            _id_setSourceBounds as jni$_.JMethodIDPtr, _$rect.pointer)
        .check();
  }

  static final _id_fillIn = _class.instanceMethodId(
    r'fillIn',
    r'(Landroid/content/Intent;I)I',
  );

  static final _fillIn = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public int fillIn(android.content.Intent intent, int i)`
  int fillIn(
    Intent? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _fillIn(reference.pointer, _id_fillIn as jni$_.JMethodIDPtr,
            _$intent.pointer, i)
        .integer;
  }

  static final _id_filterEquals = _class.instanceMethodId(
    r'filterEquals',
    r'(Landroid/content/Intent;)Z',
  );

  static final _filterEquals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean filterEquals(android.content.Intent intent)`
  bool filterEquals(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _filterEquals(reference.pointer,
            _id_filterEquals as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_filterHashCode = _class.instanceMethodId(
    r'filterHashCode',
    r'()I',
  );

  static final _filterHashCode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int filterHashCode()`
  int filterHashCode() {
    return _filterHashCode(
            reference.pointer, _id_filterHashCode as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toURI = _class.instanceMethodId(
    r'toURI',
    r'()Ljava/lang/String;',
  );

  static final _toURI = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toURI()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toURI() {
    return _toURI(reference.pointer, _id_toURI as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toUri = _class.instanceMethodId(
    r'toUri',
    r'(I)Ljava/lang/String;',
  );

  static final _toUri = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.lang.String toUri(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toUri(
    int i,
  ) {
    return _toUri(reference.pointer, _id_toUri as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void readFromParcel(android.os.Parcel parcel)`
  void readFromParcel(
    jni$_.JObject? parcel,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _readFromParcel(reference.pointer, _id_readFromParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer)
        .check();
  }

  static final _id_parseIntent = _class.staticMethodId(
    r'parseIntent',
    r'(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/content/Intent;',
  );

  static final _parseIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent parseIntent(android.content.res.Resources resources, org.xmlpull.v1.XmlPullParser xmlPullParser, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? parseIntent(
    jni$_.JObject? resources,
    jni$_.JObject? xmlPullParser,
    jni$_.JObject? attributeSet,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$xmlPullParser = xmlPullParser?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _parseIntent(
            _class.reference.pointer,
            _id_parseIntent as jni$_.JMethodIDPtr,
            _$resources.pointer,
            _$xmlPullParser.pointer,
            _$attributeSet.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_normalizeMimeType = _class.staticMethodId(
    r'normalizeMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _normalizeMimeType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.lang.String normalizeMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? normalizeMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _normalizeMimeType(_class.reference.pointer,
            _id_normalizeMimeType as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Intent$NullableType extends jni$_.JObjType<Intent?> {
  @jni$_.internal
  const $Intent$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent;';

  @jni$_.internal
  @core$_.override
  Intent? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Intent.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$NullableType) &&
        other is $Intent$NullableType;
  }
}

final class $Intent$Type extends jni$_.JObjType<Intent> {
  @jni$_.internal
  const $Intent$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent;';

  @jni$_.internal
  @core$_.override
  Intent fromReference(jni$_.JReference reference) => Intent.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent?> get nullableType => const $Intent$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$Type) && other is $Intent$Type;
  }
}

/// from: `android.app.Activity`
class Activity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Activity> $type;

  @jni$_.internal
  Activity.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/app/Activity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Activity$NullableType();
  static const type = $Activity$Type();

  /// from: `static public final int DEFAULT_KEYS_DIALER`
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: `static public final int DEFAULT_KEYS_DISABLE`
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_GLOBAL`
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_LOCAL`
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: `static public final int DEFAULT_KEYS_SHORTCUT`
  static const DEFAULT_KEYS_SHORTCUT = 2;

  /// from: `static public final int RESULT_CANCELED`
  static const RESULT_CANCELED = 0;

  /// from: `static public final int RESULT_FIRST_USER`
  static const RESULT_FIRST_USER = 1;

  /// from: `static public final int RESULT_OK`
  static const RESULT_OK = -1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setIntent = _class.instanceMethodId(
    r'setIntent',
    r'(Landroid/content/Intent;)V',
  );

  static final _setIntent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setIntent(android.content.Intent intent)`
  void setIntent(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setIntent(reference.pointer, _id_setIntent as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_setLocusContext = _class.instanceMethodId(
    r'setLocusContext',
    r'(Landroid/content/LocusId;Landroid/os/Bundle;)V',
  );

  static final _setLocusContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)`
  void setLocusContext(
    jni$_.JObject? locusId,
    jni$_.JObject? bundle,
  ) {
    final _$locusId = locusId?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setLocusContext(
            reference.pointer,
            _id_setLocusContext as jni$_.JMethodIDPtr,
            _$locusId.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_getApplication = _class.instanceMethodId(
    r'getApplication',
    r'()Landroid/app/Application;',
  );

  static final _getApplication = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.app.Application getApplication()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplication() {
    return _getApplication(
            reference.pointer, _id_getApplication as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isChild = _class.instanceMethodId(
    r'isChild',
    r'()Z',
  );

  static final _isChild = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isChild()`
  bool isChild() {
    return _isChild(reference.pointer, _id_isChild as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getParent = _class.instanceMethodId(
    r'getParent',
    r'()Landroid/app/Activity;',
  );

  static final _getParent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.app.Activity getParent()`
  /// The returned object must be released after use, by calling the [release] method.
  Activity? getParent() {
    return _getParent(reference.pointer, _id_getParent as jni$_.JMethodIDPtr)
        .object<Activity?>(const $Activity$NullableType());
  }

  static final _id_getWindowManager = _class.instanceMethodId(
    r'getWindowManager',
    r'()Landroid/view/WindowManager;',
  );

  static final _getWindowManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.WindowManager getWindowManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindowManager() {
    return _getWindowManager(
            reference.pointer, _id_getWindowManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWindow = _class.instanceMethodId(
    r'getWindow',
    r'()Landroid/view/Window;',
  );

  static final _getWindow = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.Window getWindow()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindow() {
    return _getWindow(reference.pointer, _id_getWindow as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLoaderManager = _class.instanceMethodId(
    r'getLoaderManager',
    r'()Landroid/app/LoaderManager;',
  );

  static final _getLoaderManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.LoaderManager getLoaderManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLoaderManager() {
    return _getLoaderManager(
            reference.pointer, _id_getLoaderManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCurrentFocus = _class.instanceMethodId(
    r'getCurrentFocus',
    r'()Landroid/view/View;',
  );

  static final _getCurrentFocus = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.View getCurrentFocus()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCurrentFocus() {
    return _getCurrentFocus(
            reference.pointer, _id_getCurrentFocus as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerActivityLifecycleCallbacks = _class.instanceMethodId(
    r'registerActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _registerActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void registerActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks =
        activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _registerActivityLifecycleCallbacks(
            reference.pointer,
            _id_registerActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
            _$activityLifecycleCallbacks.pointer)
        .check();
  }

  static final _id_unregisterActivityLifecycleCallbacks =
      _class.instanceMethodId(
    r'unregisterActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _unregisterActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void unregisterActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks =
        activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterActivityLifecycleCallbacks(
            reference.pointer,
            _id_unregisterActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
            _$activityLifecycleCallbacks.pointer)
        .check();
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_getSplashScreen = _class.instanceMethodId(
    r'getSplashScreen',
    r'()Landroid/window/SplashScreen;',
  );

  static final _getSplashScreen = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.window.SplashScreen getSplashScreen()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSplashScreen() {
    return _getSplashScreen(
            reference.pointer, _id_getSplashScreen as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onCreate(reference.pointer, _id_onCreate as jni$_.JMethodIDPtr,
            _$bundle.pointer, _$persistableBundle.pointer)
        .check();
  }

  static final _id_onRestoreInstanceState = _class.instanceMethodId(
    r'onRestoreInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onRestoreInstanceState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onRestoreInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onRestoreInstanceState(
            reference.pointer,
            _id_onRestoreInstanceState as jni$_.JMethodIDPtr,
            _$bundle.pointer,
            _$persistableBundle.pointer)
        .check();
  }

  static final _id_onPostCreate = _class.instanceMethodId(
    r'onPostCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onPostCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onPostCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onPostCreate(reference.pointer, _id_onPostCreate as jni$_.JMethodIDPtr,
            _$bundle.pointer, _$persistableBundle.pointer)
        .check();
  }

  static final _id_onStateNotSaved = _class.instanceMethodId(
    r'onStateNotSaved',
    r'()V',
  );

  static final _onStateNotSaved = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onStateNotSaved()`
  void onStateNotSaved() {
    _onStateNotSaved(
            reference.pointer, _id_onStateNotSaved as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onTopResumedActivityChanged = _class.instanceMethodId(
    r'onTopResumedActivityChanged',
    r'(Z)V',
  );

  static final _onTopResumedActivityChanged =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTopResumedActivityChanged(boolean z)`
  void onTopResumedActivityChanged(
    bool z,
  ) {
    _onTopResumedActivityChanged(reference.pointer,
            _id_onTopResumedActivityChanged as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isVoiceInteraction = _class.instanceMethodId(
    r'isVoiceInteraction',
    r'()Z',
  );

  static final _isVoiceInteraction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isVoiceInteraction()`
  bool isVoiceInteraction() {
    return _isVoiceInteraction(
            reference.pointer, _id_isVoiceInteraction as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isVoiceInteractionRoot = _class.instanceMethodId(
    r'isVoiceInteractionRoot',
    r'()Z',
  );

  static final _isVoiceInteractionRoot = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isVoiceInteractionRoot()`
  bool isVoiceInteractionRoot() {
    return _isVoiceInteractionRoot(
            reference.pointer, _id_isVoiceInteractionRoot as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getVoiceInteractor = _class.instanceMethodId(
    r'getVoiceInteractor',
    r'()Landroid/app/VoiceInteractor;',
  );

  static final _getVoiceInteractor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.VoiceInteractor getVoiceInteractor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getVoiceInteractor() {
    return _getVoiceInteractor(
            reference.pointer, _id_getVoiceInteractor as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isLocalVoiceInteractionSupported = _class.instanceMethodId(
    r'isLocalVoiceInteractionSupported',
    r'()Z',
  );

  static final _isLocalVoiceInteractionSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isLocalVoiceInteractionSupported()`
  bool isLocalVoiceInteractionSupported() {
    return _isLocalVoiceInteractionSupported(reference.pointer,
            _id_isLocalVoiceInteractionSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_startLocalVoiceInteraction = _class.instanceMethodId(
    r'startLocalVoiceInteraction',
    r'(Landroid/os/Bundle;)V',
  );

  static final _startLocalVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startLocalVoiceInteraction(android.os.Bundle bundle)`
  void startLocalVoiceInteraction(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startLocalVoiceInteraction(
            reference.pointer,
            _id_startLocalVoiceInteraction as jni$_.JMethodIDPtr,
            _$bundle.pointer)
        .check();
  }

  static final _id_onLocalVoiceInteractionStarted = _class.instanceMethodId(
    r'onLocalVoiceInteractionStarted',
    r'()V',
  );

  static final _onLocalVoiceInteractionStarted =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public void onLocalVoiceInteractionStarted()`
  void onLocalVoiceInteractionStarted() {
    _onLocalVoiceInteractionStarted(reference.pointer,
            _id_onLocalVoiceInteractionStarted as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onLocalVoiceInteractionStopped = _class.instanceMethodId(
    r'onLocalVoiceInteractionStopped',
    r'()V',
  );

  static final _onLocalVoiceInteractionStopped =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public void onLocalVoiceInteractionStopped()`
  void onLocalVoiceInteractionStopped() {
    _onLocalVoiceInteractionStopped(reference.pointer,
            _id_onLocalVoiceInteractionStopped as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_stopLocalVoiceInteraction = _class.instanceMethodId(
    r'stopLocalVoiceInteraction',
    r'()V',
  );

  static final _stopLocalVoiceInteraction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void stopLocalVoiceInteraction()`
  void stopLocalVoiceInteraction() {
    _stopLocalVoiceInteraction(reference.pointer,
            _id_stopLocalVoiceInteraction as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onSaveInstanceState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onSaveInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle =
        persistableBundle?.reference ?? jni$_.jNullReference;
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as jni$_.JMethodIDPtr,
            _$bundle.pointer,
            _$persistableBundle.pointer)
        .check();
  }

  static final _id_onCreateThumbnail = _class.instanceMethodId(
    r'onCreateThumbnail',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z',
  );

  static final _onCreateThumbnail = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)`
  bool onCreateThumbnail(
    jni$_.JObject? bitmap,
    jni$_.JObject? canvas,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    final _$canvas = canvas?.reference ?? jni$_.jNullReference;
    return _onCreateThumbnail(
            reference.pointer,
            _id_onCreateThumbnail as jni$_.JMethodIDPtr,
            _$bitmap.pointer,
            _$canvas.pointer)
        .boolean;
  }

  static final _id_onCreateDescription = _class.instanceMethodId(
    r'onCreateDescription',
    r'()Ljava/lang/CharSequence;',
  );

  static final _onCreateDescription = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.CharSequence onCreateDescription()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateDescription() {
    return _onCreateDescription(
            reference.pointer, _id_onCreateDescription as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onProvideAssistData = _class.instanceMethodId(
    r'onProvideAssistData',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onProvideAssistData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onProvideAssistData(android.os.Bundle bundle)`
  void onProvideAssistData(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onProvideAssistData(reference.pointer,
            _id_onProvideAssistData as jni$_.JMethodIDPtr, _$bundle.pointer)
        .check();
  }

  static final _id_onProvideAssistContent = _class.instanceMethodId(
    r'onProvideAssistContent',
    r'(Landroid/app/assist/AssistContent;)V',
  );

  static final _onProvideAssistContent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onProvideAssistContent(android.app.assist.AssistContent assistContent)`
  void onProvideAssistContent(
    jni$_.JObject? assistContent,
  ) {
    final _$assistContent = assistContent?.reference ?? jni$_.jNullReference;
    _onProvideAssistContent(
            reference.pointer,
            _id_onProvideAssistContent as jni$_.JMethodIDPtr,
            _$assistContent.pointer)
        .check();
  }

  static final _id_onGetDirectActions = _class.instanceMethodId(
    r'onGetDirectActions',
    r'(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onGetDirectActions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)`
  void onGetDirectActions(
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$cancellationSignal =
        cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onGetDirectActions(
            reference.pointer,
            _id_onGetDirectActions as jni$_.JMethodIDPtr,
            _$cancellationSignal.pointer,
            _$consumer.pointer)
        .check();
  }

  static final _id_onPerformDirectAction = _class.instanceMethodId(
    r'onPerformDirectAction',
    r'(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onPerformDirectAction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)`
  void onPerformDirectAction(
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$cancellationSignal =
        cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onPerformDirectAction(
            reference.pointer,
            _id_onPerformDirectAction as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$bundle.pointer,
            _$cancellationSignal.pointer,
            _$consumer.pointer)
        .check();
  }

  static final _id_requestShowKeyboardShortcuts = _class.instanceMethodId(
    r'requestShowKeyboardShortcuts',
    r'()V',
  );

  static final _requestShowKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final void requestShowKeyboardShortcuts()`
  void requestShowKeyboardShortcuts() {
    _requestShowKeyboardShortcuts(reference.pointer,
            _id_requestShowKeyboardShortcuts as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_dismissKeyboardShortcutsHelper = _class.instanceMethodId(
    r'dismissKeyboardShortcutsHelper',
    r'()V',
  );

  static final _dismissKeyboardShortcutsHelper =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final void dismissKeyboardShortcutsHelper()`
  void dismissKeyboardShortcutsHelper() {
    _dismissKeyboardShortcutsHelper(reference.pointer,
            _id_dismissKeyboardShortcutsHelper as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onProvideKeyboardShortcuts = _class.instanceMethodId(
    r'onProvideKeyboardShortcuts',
    r'(Ljava/util/List;Landroid/view/Menu;I)V',
  );

  static final _onProvideKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int)>();

  /// from: `public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)`
  void onProvideKeyboardShortcuts(
    jni$_.JList<jni$_.JObject?>? list,
    jni$_.JObject? menu,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onProvideKeyboardShortcuts(
            reference.pointer,
            _id_onProvideKeyboardShortcuts as jni$_.JMethodIDPtr,
            _$list.pointer,
            _$menu.pointer,
            i)
        .check();
  }

  static final _id_showAssist = _class.instanceMethodId(
    r'showAssist',
    r'(Landroid/os/Bundle;)Z',
  );

  static final _showAssist = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean showAssist(android.os.Bundle bundle)`
  bool showAssist(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showAssist(reference.pointer, _id_showAssist as jni$_.JMethodIDPtr,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_reportFullyDrawn = _class.instanceMethodId(
    r'reportFullyDrawn',
    r'()V',
  );

  static final _reportFullyDrawn = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void reportFullyDrawn()`
  void reportFullyDrawn() {
    _reportFullyDrawn(
            reference.pointer, _id_reportFullyDrawn as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onMultiWindowModeChanged = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onMultiWindowModeChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onMultiWindowModeChanged(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onMultiWindowModeChanged(
            reference.pointer,
            _id_onMultiWindowModeChanged as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$configuration.pointer)
        .check();
  }

  static final _id_onMultiWindowModeChanged$1 = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(Z)V',
  );

  static final _onMultiWindowModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onMultiWindowModeChanged(boolean z)`
  void onMultiWindowModeChanged$1(
    bool z,
  ) {
    _onMultiWindowModeChanged$1(reference.pointer,
            _id_onMultiWindowModeChanged$1 as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isInMultiWindowMode = _class.instanceMethodId(
    r'isInMultiWindowMode',
    r'()Z',
  );

  static final _isInMultiWindowMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isInMultiWindowMode()`
  bool isInMultiWindowMode() {
    return _isInMultiWindowMode(
            reference.pointer, _id_isInMultiWindowMode as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onPictureInPictureModeChanged = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onPictureInPictureModeChanged =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<
                              (jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onPictureInPictureModeChanged(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onPictureInPictureModeChanged(
            reference.pointer,
            _id_onPictureInPictureModeChanged as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$configuration.pointer)
        .check();
  }

  static final _id_onPictureInPictureUiStateChanged = _class.instanceMethodId(
    r'onPictureInPictureUiStateChanged',
    r'(Landroid/app/PictureInPictureUiState;)V',
  );

  static final _onPictureInPictureUiStateChanged =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)`
  void onPictureInPictureUiStateChanged(
    jni$_.JObject? pictureInPictureUiState,
  ) {
    final _$pictureInPictureUiState =
        pictureInPictureUiState?.reference ?? jni$_.jNullReference;
    _onPictureInPictureUiStateChanged(
            reference.pointer,
            _id_onPictureInPictureUiStateChanged as jni$_.JMethodIDPtr,
            _$pictureInPictureUiState.pointer)
        .check();
  }

  static final _id_onPictureInPictureModeChanged$1 = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(Z)V',
  );

  static final _onPictureInPictureModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onPictureInPictureModeChanged(boolean z)`
  void onPictureInPictureModeChanged$1(
    bool z,
  ) {
    _onPictureInPictureModeChanged$1(
            reference.pointer,
            _id_onPictureInPictureModeChanged$1 as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_isInPictureInPictureMode = _class.instanceMethodId(
    r'isInPictureInPictureMode',
    r'()Z',
  );

  static final _isInPictureInPictureMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isInPictureInPictureMode()`
  bool isInPictureInPictureMode() {
    return _isInPictureInPictureMode(reference.pointer,
            _id_isInPictureInPictureMode as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_enterPictureInPictureMode = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'()V',
  );

  static final _enterPictureInPictureMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void enterPictureInPictureMode()`
  void enterPictureInPictureMode() {
    _enterPictureInPictureMode(reference.pointer,
            _id_enterPictureInPictureMode as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_enterPictureInPictureMode$1 = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'(Landroid/app/PictureInPictureParams;)Z',
  );

  static final _enterPictureInPictureMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)`
  bool enterPictureInPictureMode$1(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams =
        pictureInPictureParams?.reference ?? jni$_.jNullReference;
    return _enterPictureInPictureMode$1(
            reference.pointer,
            _id_enterPictureInPictureMode$1 as jni$_.JMethodIDPtr,
            _$pictureInPictureParams.pointer)
        .boolean;
  }

  static final _id_setPictureInPictureParams = _class.instanceMethodId(
    r'setPictureInPictureParams',
    r'(Landroid/app/PictureInPictureParams;)V',
  );

  static final _setPictureInPictureParams = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)`
  void setPictureInPictureParams(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams =
        pictureInPictureParams?.reference ?? jni$_.jNullReference;
    _setPictureInPictureParams(
            reference.pointer,
            _id_setPictureInPictureParams as jni$_.JMethodIDPtr,
            _$pictureInPictureParams.pointer)
        .check();
  }

  static final _id_getMaxNumPictureInPictureActions = _class.instanceMethodId(
    r'getMaxNumPictureInPictureActions',
    r'()I',
  );

  static final _getMaxNumPictureInPictureActions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public int getMaxNumPictureInPictureActions()`
  int getMaxNumPictureInPictureActions() {
    return _getMaxNumPictureInPictureActions(reference.pointer,
            _id_getMaxNumPictureInPictureActions as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_onPictureInPictureRequested = _class.instanceMethodId(
    r'onPictureInPictureRequested',
    r'()Z',
  );

  static final _onPictureInPictureRequested =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean onPictureInPictureRequested()`
  bool onPictureInPictureRequested() {
    return _onPictureInPictureRequested(reference.pointer,
            _id_onPictureInPictureRequested as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setShouldDockBigOverlays = _class.instanceMethodId(
    r'setShouldDockBigOverlays',
    r'(Z)V',
  );

  static final _setShouldDockBigOverlays = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShouldDockBigOverlays(boolean z)`
  void setShouldDockBigOverlays(
    bool z,
  ) {
    _setShouldDockBigOverlays(reference.pointer,
            _id_setShouldDockBigOverlays as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_shouldDockBigOverlays = _class.instanceMethodId(
    r'shouldDockBigOverlays',
    r'()Z',
  );

  static final _shouldDockBigOverlays = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean shouldDockBigOverlays()`
  bool shouldDockBigOverlays() {
    return _shouldDockBigOverlays(
            reference.pointer, _id_shouldDockBigOverlays as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r'onConfigurationChanged',
    r'(Landroid/content/res/Configuration;)V',
  );

  static final _onConfigurationChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onConfigurationChanged(android.content.res.Configuration configuration)`
  void onConfigurationChanged(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onConfigurationChanged(
            reference.pointer,
            _id_onConfigurationChanged as jni$_.JMethodIDPtr,
            _$configuration.pointer)
        .check();
  }

  static final _id_getChangingConfigurations = _class.instanceMethodId(
    r'getChangingConfigurations',
    r'()I',
  );

  static final _getChangingConfigurations = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getChangingConfigurations()`
  int getChangingConfigurations() {
    return _getChangingConfigurations(reference.pointer,
            _id_getChangingConfigurations as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLastNonConfigurationInstance = _class.instanceMethodId(
    r'getLastNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _getLastNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public java.lang.Object getLastNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLastNonConfigurationInstance() {
    return _getLastNonConfigurationInstance(reference.pointer,
            _id_getLastNonConfigurationInstance as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onRetainNonConfigurationInstance = _class.instanceMethodId(
    r'onRetainNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _onRetainNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public java.lang.Object onRetainNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onRetainNonConfigurationInstance() {
    return _onRetainNonConfigurationInstance(reference.pointer,
            _id_onRetainNonConfigurationInstance as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onTrimMemory = _class.instanceMethodId(
    r'onTrimMemory',
    r'(I)V',
  );

  static final _onTrimMemory = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTrimMemory(int i)`
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, _id_onTrimMemory as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getFragmentManager = _class.instanceMethodId(
    r'getFragmentManager',
    r'()Landroid/app/FragmentManager;',
  );

  static final _getFragmentManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.FragmentManager getFragmentManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFragmentManager() {
    return _getFragmentManager(
            reference.pointer, _id_getFragmentManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onAttachFragment = _class.instanceMethodId(
    r'onAttachFragment',
    r'(Landroid/app/Fragment;)V',
  );

  static final _onAttachFragment = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onAttachFragment(android.app.Fragment fragment)`
  void onAttachFragment(
    jni$_.JObject? fragment,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    _onAttachFragment(reference.pointer,
            _id_onAttachFragment as jni$_.JMethodIDPtr, _$fragment.pointer)
        .check();
  }

  static final _id_managedQuery = _class.instanceMethodId(
    r'managedQuery',
    r'(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _managedQuery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? managedQuery(
    jni$_.JObject? uri,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JString? string,
    jni$_.JArray<jni$_.JString?>? strings1,
    jni$_.JString? string1,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$strings1 = strings1?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _managedQuery(
            reference.pointer,
            _id_managedQuery as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$strings.pointer,
            _$string.pointer,
            _$strings1.pointer,
            _$string1.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startManagingCursor = _class.instanceMethodId(
    r'startManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _startManagingCursor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startManagingCursor(android.database.Cursor cursor)`
  void startManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _startManagingCursor(reference.pointer,
            _id_startManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer)
        .check();
  }

  static final _id_stopManagingCursor = _class.instanceMethodId(
    r'stopManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _stopManagingCursor = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void stopManagingCursor(android.database.Cursor cursor)`
  void stopManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _stopManagingCursor(reference.pointer,
            _id_stopManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer)
        .check();
  }

  static final _id_findViewById = _class.instanceMethodId(
    r'findViewById',
    r'(I)Landroid/view/View;',
  );

  static final _findViewById = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public T findViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? findViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _findViewById(
            reference.pointer, _id_findViewById as jni$_.JMethodIDPtr, i)
        .object<$T?>(T.nullableType);
  }

  static final _id_requireViewById = _class.instanceMethodId(
    r'requireViewById',
    r'(I)Landroid/view/View;',
  );

  static final _requireViewById = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final T requireViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? requireViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _requireViewById(
            reference.pointer, _id_requireViewById as jni$_.JMethodIDPtr, i)
        .object<$T?>(T.nullableType);
  }

  static final _id_getActionBar = _class.instanceMethodId(
    r'getActionBar',
    r'()Landroid/app/ActionBar;',
  );

  static final _getActionBar = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.app.ActionBar getActionBar()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getActionBar() {
    return _getActionBar(
            reference.pointer, _id_getActionBar as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setActionBar = _class.instanceMethodId(
    r'setActionBar',
    r'(Landroid/widget/Toolbar;)V',
  );

  static final _setActionBar = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setActionBar(android.widget.Toolbar toolbar)`
  void setActionBar(
    jni$_.JObject? toolbar,
  ) {
    final _$toolbar = toolbar?.reference ?? jni$_.jNullReference;
    _setActionBar(reference.pointer, _id_setActionBar as jni$_.JMethodIDPtr,
            _$toolbar.pointer)
        .check();
  }

  static final _id_setContentView = _class.instanceMethodId(
    r'setContentView',
    r'(I)V',
  );

  static final _setContentView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setContentView(int i)`
  void setContentView(
    int i,
  ) {
    _setContentView(
            reference.pointer, _id_setContentView as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setContentView$1 = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;)V',
  );

  static final _setContentView$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setContentView(android.view.View view)`
  void setContentView$1(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _setContentView$1(reference.pointer,
            _id_setContentView$1 as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_setContentView$2 = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _setContentView$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void setContentView$2(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _setContentView$2(
            reference.pointer,
            _id_setContentView$2 as jni$_.JMethodIDPtr,
            _$view.pointer,
            _$layoutParams.pointer)
        .check();
  }

  static final _id_addContentView = _class.instanceMethodId(
    r'addContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _addContentView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void addContentView(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _addContentView(reference.pointer, _id_addContentView as jni$_.JMethodIDPtr,
            _$view.pointer, _$layoutParams.pointer)
        .check();
  }

  static final _id_getContentTransitionManager = _class.instanceMethodId(
    r'getContentTransitionManager',
    r'()Landroid/transition/TransitionManager;',
  );

  static final _getContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public android.transition.TransitionManager getContentTransitionManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentTransitionManager() {
    return _getContentTransitionManager(reference.pointer,
            _id_getContentTransitionManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setContentTransitionManager = _class.instanceMethodId(
    r'setContentTransitionManager',
    r'(Landroid/transition/TransitionManager;)V',
  );

  static final _setContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setContentTransitionManager(android.transition.TransitionManager transitionManager)`
  void setContentTransitionManager(
    jni$_.JObject? transitionManager,
  ) {
    final _$transitionManager =
        transitionManager?.reference ?? jni$_.jNullReference;
    _setContentTransitionManager(
            reference.pointer,
            _id_setContentTransitionManager as jni$_.JMethodIDPtr,
            _$transitionManager.pointer)
        .check();
  }

  static final _id_getContentScene = _class.instanceMethodId(
    r'getContentScene',
    r'()Landroid/transition/Scene;',
  );

  static final _getContentScene = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.transition.Scene getContentScene()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentScene() {
    return _getContentScene(
            reference.pointer, _id_getContentScene as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setFinishOnTouchOutside = _class.instanceMethodId(
    r'setFinishOnTouchOutside',
    r'(Z)V',
  );

  static final _setFinishOnTouchOutside = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setFinishOnTouchOutside(boolean z)`
  void setFinishOnTouchOutside(
    bool z,
  ) {
    _setFinishOnTouchOutside(reference.pointer,
            _id_setFinishOnTouchOutside as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setDefaultKeyMode = _class.instanceMethodId(
    r'setDefaultKeyMode',
    r'(I)V',
  );

  static final _setDefaultKeyMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setDefaultKeyMode(int i)`
  void setDefaultKeyMode(
    int i,
  ) {
    _setDefaultKeyMode(
            reference.pointer, _id_setDefaultKeyMode as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyDown(reference.pointer, _id_onKeyDown as jni$_.JMethodIDPtr, i,
            _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r'onKeyLongPress',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyLongPress = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)`
  bool onKeyLongPress(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyLongPress(reference.pointer,
            _id_onKeyLongPress as jni$_.JMethodIDPtr, i, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyUp(reference.pointer, _id_onKeyUp as jni$_.JMethodIDPtr, i,
            _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r'onKeyMultiple',
    r'(IILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyMultiple = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)`
  bool onKeyMultiple(
    int i,
    int i1,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyMultiple(reference.pointer,
            _id_onKeyMultiple as jni$_.JMethodIDPtr, i, i1, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onBackPressed = _class.instanceMethodId(
    r'onBackPressed',
    r'()V',
  );

  static final _onBackPressed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onBackPressed()`
  void onBackPressed() {
    _onBackPressed(reference.pointer, _id_onBackPressed as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onKeyShortcut = _class.instanceMethodId(
    r'onKeyShortcut',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyShortcut = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)`
  bool onKeyShortcut(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyShortcut(reference.pointer,
            _id_onKeyShortcut as jni$_.JMethodIDPtr, i, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTouchEvent(reference.pointer,
            _id_onTouchEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTrackballEvent(reference.pointer,
            _id_onTrackballEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as jni$_.JMethodIDPtr,
            _$motionEvent.pointer)
        .boolean;
  }

  static final _id_onUserInteraction = _class.instanceMethodId(
    r'onUserInteraction',
    r'()V',
  );

  static final _onUserInteraction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onUserInteraction()`
  void onUserInteraction() {
    _onUserInteraction(
            reference.pointer, _id_onUserInteraction as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowAttributesChanged = _class.instanceMethodId(
    r'onWindowAttributesChanged',
    r'(Landroid/view/WindowManager$LayoutParams;)V',
  );

  static final _onWindowAttributesChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)`
  void onWindowAttributesChanged(
    jni$_.JObject? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _onWindowAttributesChanged(
            reference.pointer,
            _id_onWindowAttributesChanged as jni$_.JMethodIDPtr,
            _$layoutParams.pointer)
        .check();
  }

  static final _id_onContentChanged = _class.instanceMethodId(
    r'onContentChanged',
    r'()V',
  );

  static final _onContentChanged = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onContentChanged()`
  void onContentChanged() {
    _onContentChanged(
            reference.pointer, _id_onContentChanged as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r'onAttachedToWindow',
    r'()V',
  );

  static final _onAttachedToWindow = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onAttachedToWindow()`
  void onAttachedToWindow() {
    _onAttachedToWindow(
            reference.pointer, _id_onAttachedToWindow as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onDetachedFromWindow = _class.instanceMethodId(
    r'onDetachedFromWindow',
    r'()V',
  );

  static final _onDetachedFromWindow = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onDetachedFromWindow()`
  void onDetachedFromWindow() {
    _onDetachedFromWindow(
            reference.pointer, _id_onDetachedFromWindow as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_hasWindowFocus = _class.instanceMethodId(
    r'hasWindowFocus',
    r'()Z',
  );

  static final _hasWindowFocus = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean hasWindowFocus()`
  bool hasWindowFocus() {
    return _hasWindowFocus(
            reference.pointer, _id_hasWindowFocus as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r'dispatchKeyEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyEvent(reference.pointer,
            _id_dispatchKeyEvent as jni$_.JMethodIDPtr, _$keyEvent.pointer)
        .boolean;
  }

  static final _id_dispatchKeyShortcutEvent = _class.instanceMethodId(
    r'dispatchKeyShortcutEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyShortcutEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyShortcutEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyShortcutEvent(
            reference.pointer,
            _id_dispatchKeyShortcutEvent as jni$_.JMethodIDPtr,
            _$keyEvent.pointer)
        .boolean;
  }

  static final _id_dispatchTouchEvent = _class.instanceMethodId(
    r'dispatchTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTouchEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTouchEvent(reference.pointer,
            _id_dispatchTouchEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer)
        .boolean;
  }

  static final _id_dispatchTrackballEvent = _class.instanceMethodId(
    r'dispatchTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTrackballEvent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTrackballEvent(
            reference.pointer,
            _id_dispatchTrackballEvent as jni$_.JMethodIDPtr,
            _$motionEvent.pointer)
        .boolean;
  }

  static final _id_dispatchGenericMotionEvent = _class.instanceMethodId(
    r'dispatchGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchGenericMotionEvent =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool dispatchGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchGenericMotionEvent(
            reference.pointer,
            _id_dispatchGenericMotionEvent as jni$_.JMethodIDPtr,
            _$motionEvent.pointer)
        .boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = _class.instanceMethodId(
    r'dispatchPopulateAccessibilityEvent',
    r'(Landroid/view/accessibility/AccessibilityEvent;)Z',
  );

  static final _dispatchPopulateAccessibilityEvent =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)`
  bool dispatchPopulateAccessibilityEvent(
    jni$_.JObject? accessibilityEvent,
  ) {
    final _$accessibilityEvent =
        accessibilityEvent?.reference ?? jni$_.jNullReference;
    return _dispatchPopulateAccessibilityEvent(
            reference.pointer,
            _id_dispatchPopulateAccessibilityEvent as jni$_.JMethodIDPtr,
            _$accessibilityEvent.pointer)
        .boolean;
  }

  static final _id_onCreatePanelView = _class.instanceMethodId(
    r'onCreatePanelView',
    r'(I)Landroid/view/View;',
  );

  static final _onCreatePanelView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.view.View onCreatePanelView(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreatePanelView(
    int i,
  ) {
    return _onCreatePanelView(
            reference.pointer, _id_onCreatePanelView as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreatePanelMenu = _class.instanceMethodId(
    r'onCreatePanelMenu',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onCreatePanelMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onCreatePanelMenu(int i, android.view.Menu menu)`
  bool onCreatePanelMenu(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreatePanelMenu(reference.pointer,
            _id_onCreatePanelMenu as jni$_.JMethodIDPtr, i, _$menu.pointer)
        .boolean;
  }

  static final _id_onPreparePanel = _class.instanceMethodId(
    r'onPreparePanel',
    r'(ILandroid/view/View;Landroid/view/Menu;)Z',
  );

  static final _onPreparePanel = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)`
  bool onPreparePanel(
    int i,
    jni$_.JObject? view,
    jni$_.JObject? menu,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPreparePanel(
            reference.pointer,
            _id_onPreparePanel as jni$_.JMethodIDPtr,
            i,
            _$view.pointer,
            _$menu.pointer)
        .boolean;
  }

  static final _id_onMenuOpened = _class.instanceMethodId(
    r'onMenuOpened',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onMenuOpened = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onMenuOpened(int i, android.view.Menu menu)`
  bool onMenuOpened(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onMenuOpened(reference.pointer,
            _id_onMenuOpened as jni$_.JMethodIDPtr, i, _$menu.pointer)
        .boolean;
  }

  static final _id_onMenuItemSelected = _class.instanceMethodId(
    r'onMenuItemSelected',
    r'(ILandroid/view/MenuItem;)Z',
  );

  static final _onMenuItemSelected = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)`
  bool onMenuItemSelected(
    int i,
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onMenuItemSelected(reference.pointer,
            _id_onMenuItemSelected as jni$_.JMethodIDPtr, i, _$menuItem.pointer)
        .boolean;
  }

  static final _id_onPanelClosed = _class.instanceMethodId(
    r'onPanelClosed',
    r'(ILandroid/view/Menu;)V',
  );

  static final _onPanelClosed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPanelClosed(int i, android.view.Menu menu)`
  void onPanelClosed(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onPanelClosed(reference.pointer, _id_onPanelClosed as jni$_.JMethodIDPtr,
            i, _$menu.pointer)
        .check();
  }

  static final _id_invalidateOptionsMenu = _class.instanceMethodId(
    r'invalidateOptionsMenu',
    r'()V',
  );

  static final _invalidateOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void invalidateOptionsMenu()`
  void invalidateOptionsMenu() {
    _invalidateOptionsMenu(
            reference.pointer, _id_invalidateOptionsMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateOptionsMenu = _class.instanceMethodId(
    r'onCreateOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onCreateOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onCreateOptionsMenu(android.view.Menu menu)`
  bool onCreateOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreateOptionsMenu(reference.pointer,
            _id_onCreateOptionsMenu as jni$_.JMethodIDPtr, _$menu.pointer)
        .boolean;
  }

  static final _id_onPrepareOptionsMenu = _class.instanceMethodId(
    r'onPrepareOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onPrepareOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onPrepareOptionsMenu(android.view.Menu menu)`
  bool onPrepareOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPrepareOptionsMenu(reference.pointer,
            _id_onPrepareOptionsMenu as jni$_.JMethodIDPtr, _$menu.pointer)
        .boolean;
  }

  static final _id_onOptionsItemSelected = _class.instanceMethodId(
    r'onOptionsItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onOptionsItemSelected = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onOptionsItemSelected(android.view.MenuItem menuItem)`
  bool onOptionsItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onOptionsItemSelected(reference.pointer,
            _id_onOptionsItemSelected as jni$_.JMethodIDPtr, _$menuItem.pointer)
        .boolean;
  }

  static final _id_onNavigateUp = _class.instanceMethodId(
    r'onNavigateUp',
    r'()Z',
  );

  static final _onNavigateUp = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean onNavigateUp()`
  bool onNavigateUp() {
    return _onNavigateUp(
            reference.pointer, _id_onNavigateUp as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onNavigateUpFromChild = _class.instanceMethodId(
    r'onNavigateUpFromChild',
    r'(Landroid/app/Activity;)Z',
  );

  static final _onNavigateUpFromChild = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onNavigateUpFromChild(android.app.Activity activity)`
  bool onNavigateUpFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    return _onNavigateUpFromChild(reference.pointer,
            _id_onNavigateUpFromChild as jni$_.JMethodIDPtr, _$activity.pointer)
        .boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = _class.instanceMethodId(
    r'onCreateNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onCreateNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onCreateNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder =
        taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onCreateNavigateUpTaskStack(
            reference.pointer,
            _id_onCreateNavigateUpTaskStack as jni$_.JMethodIDPtr,
            _$taskStackBuilder.pointer)
        .check();
  }

  static final _id_onPrepareNavigateUpTaskStack = _class.instanceMethodId(
    r'onPrepareNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onPrepareNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onPrepareNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder =
        taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onPrepareNavigateUpTaskStack(
            reference.pointer,
            _id_onPrepareNavigateUpTaskStack as jni$_.JMethodIDPtr,
            _$taskStackBuilder.pointer)
        .check();
  }

  static final _id_onOptionsMenuClosed = _class.instanceMethodId(
    r'onOptionsMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onOptionsMenuClosed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onOptionsMenuClosed(android.view.Menu menu)`
  void onOptionsMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onOptionsMenuClosed(reference.pointer,
            _id_onOptionsMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer)
        .check();
  }

  static final _id_openOptionsMenu = _class.instanceMethodId(
    r'openOptionsMenu',
    r'()V',
  );

  static final _openOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void openOptionsMenu()`
  void openOptionsMenu() {
    _openOptionsMenu(
            reference.pointer, _id_openOptionsMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_closeOptionsMenu = _class.instanceMethodId(
    r'closeOptionsMenu',
    r'()V',
  );

  static final _closeOptionsMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void closeOptionsMenu()`
  void closeOptionsMenu() {
    _closeOptionsMenu(
            reference.pointer, _id_closeOptionsMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateContextMenu = _class.instanceMethodId(
    r'onCreateContextMenu',
    r'(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V',
  );

  static final _onCreateContextMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)`
  void onCreateContextMenu(
    jni$_.JObject? contextMenu,
    jni$_.JObject? view,
    jni$_.JObject? contextMenuInfo,
  ) {
    final _$contextMenu = contextMenu?.reference ?? jni$_.jNullReference;
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$contextMenuInfo =
        contextMenuInfo?.reference ?? jni$_.jNullReference;
    _onCreateContextMenu(
            reference.pointer,
            _id_onCreateContextMenu as jni$_.JMethodIDPtr,
            _$contextMenu.pointer,
            _$view.pointer,
            _$contextMenuInfo.pointer)
        .check();
  }

  static final _id_registerForContextMenu = _class.instanceMethodId(
    r'registerForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _registerForContextMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerForContextMenu(android.view.View view)`
  void registerForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _registerForContextMenu(reference.pointer,
            _id_registerForContextMenu as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_unregisterForContextMenu = _class.instanceMethodId(
    r'unregisterForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _unregisterForContextMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterForContextMenu(android.view.View view)`
  void unregisterForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _unregisterForContextMenu(reference.pointer,
            _id_unregisterForContextMenu as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_openContextMenu = _class.instanceMethodId(
    r'openContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _openContextMenu = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void openContextMenu(android.view.View view)`
  void openContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _openContextMenu(reference.pointer,
            _id_openContextMenu as jni$_.JMethodIDPtr, _$view.pointer)
        .check();
  }

  static final _id_closeContextMenu = _class.instanceMethodId(
    r'closeContextMenu',
    r'()V',
  );

  static final _closeContextMenu = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void closeContextMenu()`
  void closeContextMenu() {
    _closeContextMenu(
            reference.pointer, _id_closeContextMenu as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onContextItemSelected = _class.instanceMethodId(
    r'onContextItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onContextItemSelected = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onContextItemSelected(android.view.MenuItem menuItem)`
  bool onContextItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onContextItemSelected(reference.pointer,
            _id_onContextItemSelected as jni$_.JMethodIDPtr, _$menuItem.pointer)
        .boolean;
  }

  static final _id_onContextMenuClosed = _class.instanceMethodId(
    r'onContextMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onContextMenuClosed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onContextMenuClosed(android.view.Menu menu)`
  void onContextMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onContextMenuClosed(reference.pointer,
            _id_onContextMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer)
        .check();
  }

  static final _id_showDialog = _class.instanceMethodId(
    r'showDialog',
    r'(I)V',
  );

  static final _showDialog = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void showDialog(int i)`
  void showDialog(
    int i,
  ) {
    _showDialog(reference.pointer, _id_showDialog as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_showDialog$1 = _class.instanceMethodId(
    r'showDialog',
    r'(ILandroid/os/Bundle;)Z',
  );

  static final _showDialog$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean showDialog(int i, android.os.Bundle bundle)`
  bool showDialog$1(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showDialog$1(reference.pointer,
            _id_showDialog$1 as jni$_.JMethodIDPtr, i, _$bundle.pointer)
        .boolean;
  }

  static final _id_dismissDialog = _class.instanceMethodId(
    r'dismissDialog',
    r'(I)V',
  );

  static final _dismissDialog = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void dismissDialog(int i)`
  void dismissDialog(
    int i,
  ) {
    _dismissDialog(
            reference.pointer, _id_dismissDialog as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_removeDialog = _class.instanceMethodId(
    r'removeDialog',
    r'(I)V',
  );

  static final _removeDialog = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void removeDialog(int i)`
  void removeDialog(
    int i,
  ) {
    _removeDialog(reference.pointer, _id_removeDialog as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_onSearchRequested = _class.instanceMethodId(
    r'onSearchRequested',
    r'(Landroid/view/SearchEvent;)Z',
  );

  static final _onSearchRequested = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean onSearchRequested(android.view.SearchEvent searchEvent)`
  bool onSearchRequested(
    jni$_.JObject? searchEvent,
  ) {
    final _$searchEvent = searchEvent?.reference ?? jni$_.jNullReference;
    return _onSearchRequested(reference.pointer,
            _id_onSearchRequested as jni$_.JMethodIDPtr, _$searchEvent.pointer)
        .boolean;
  }

  static final _id_onSearchRequested$1 = _class.instanceMethodId(
    r'onSearchRequested',
    r'()Z',
  );

  static final _onSearchRequested$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean onSearchRequested()`
  bool onSearchRequested$1() {
    return _onSearchRequested$1(
            reference.pointer, _id_onSearchRequested$1 as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSearchEvent = _class.instanceMethodId(
    r'getSearchEvent',
    r'()Landroid/view/SearchEvent;',
  );

  static final _getSearchEvent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.view.SearchEvent getSearchEvent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSearchEvent() {
    return _getSearchEvent(
            reference.pointer, _id_getSearchEvent as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startSearch = _class.instanceMethodId(
    r'startSearch',
    r'(Ljava/lang/String;ZLandroid/os/Bundle;Z)V',
  );

  static final _startSearch = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)`
  void startSearch(
    jni$_.JString? string,
    bool z,
    jni$_.JObject? bundle,
    bool z1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startSearch(reference.pointer, _id_startSearch as jni$_.JMethodIDPtr,
            _$string.pointer, z ? 1 : 0, _$bundle.pointer, z1 ? 1 : 0)
        .check();
  }

  static final _id_triggerSearch = _class.instanceMethodId(
    r'triggerSearch',
    r'(Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _triggerSearch = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void triggerSearch(java.lang.String string, android.os.Bundle bundle)`
  void triggerSearch(
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _triggerSearch(reference.pointer, _id_triggerSearch as jni$_.JMethodIDPtr,
            _$string.pointer, _$bundle.pointer)
        .check();
  }

  static final _id_takeKeyEvents = _class.instanceMethodId(
    r'takeKeyEvents',
    r'(Z)V',
  );

  static final _takeKeyEvents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void takeKeyEvents(boolean z)`
  void takeKeyEvents(
    bool z,
  ) {
    _takeKeyEvents(reference.pointer, _id_takeKeyEvents as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_requestWindowFeature = _class.instanceMethodId(
    r'requestWindowFeature',
    r'(I)Z',
  );

  static final _requestWindowFeature = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final boolean requestWindowFeature(int i)`
  bool requestWindowFeature(
    int i,
  ) {
    return _requestWindowFeature(reference.pointer,
            _id_requestWindowFeature as jni$_.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_setFeatureDrawableResource = _class.instanceMethodId(
    r'setFeatureDrawableResource',
    r'(II)V',
  );

  static final _setFeatureDrawableResource =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableResource(int i, int i1)`
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    _setFeatureDrawableResource(reference.pointer,
            _id_setFeatureDrawableResource as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_setFeatureDrawableUri = _class.instanceMethodId(
    r'setFeatureDrawableUri',
    r'(ILandroid/net/Uri;)V',
  );

  static final _setFeatureDrawableUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setFeatureDrawableUri(int i, android.net.Uri uri)`
  void setFeatureDrawableUri(
    int i,
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _setFeatureDrawableUri(reference.pointer,
            _id_setFeatureDrawableUri as jni$_.JMethodIDPtr, i, _$uri.pointer)
        .check();
  }

  static final _id_setFeatureDrawable = _class.instanceMethodId(
    r'setFeatureDrawable',
    r'(ILandroid/graphics/drawable/Drawable;)V',
  );

  static final _setFeatureDrawable = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)`
  void setFeatureDrawable(
    int i,
    jni$_.JObject? drawable,
  ) {
    final _$drawable = drawable?.reference ?? jni$_.jNullReference;
    _setFeatureDrawable(reference.pointer,
            _id_setFeatureDrawable as jni$_.JMethodIDPtr, i, _$drawable.pointer)
        .check();
  }

  static final _id_setFeatureDrawableAlpha = _class.instanceMethodId(
    r'setFeatureDrawableAlpha',
    r'(II)V',
  );

  static final _setFeatureDrawableAlpha = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableAlpha(int i, int i1)`
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    _setFeatureDrawableAlpha(reference.pointer,
            _id_setFeatureDrawableAlpha as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_getLayoutInflater = _class.instanceMethodId(
    r'getLayoutInflater',
    r'()Landroid/view/LayoutInflater;',
  );

  static final _getLayoutInflater = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.LayoutInflater getLayoutInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLayoutInflater() {
    return _getLayoutInflater(
            reference.pointer, _id_getLayoutInflater as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMenuInflater = _class.instanceMethodId(
    r'getMenuInflater',
    r'()Landroid/view/MenuInflater;',
  );

  static final _getMenuInflater = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.MenuInflater getMenuInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMenuInflater() {
    return _getMenuInflater(
            reference.pointer, _id_getMenuInflater as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;I)V',
  );

  static final _requestPermissions = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final void requestPermissions(java.lang.String[] strings, int i)`
  void requestPermissions(
    jni$_.JArray<jni$_.JString?>? strings,
    int i,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _requestPermissions(reference.pointer,
            _id_requestPermissions as jni$_.JMethodIDPtr, _$strings.pointer, i)
        .check();
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)V',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
            i,
            _$strings.pointer,
            _$is$.pointer)
        .check();
  }

  static final _id_shouldShowRequestPermissionRationale =
      _class.instanceMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Ljava/lang/String;)Z',
  );

  static final _shouldShowRequestPermissionRationale =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean shouldShowRequestPermissionRationale(java.lang.String string)`
  bool shouldShowRequestPermissionRationale(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _shouldShowRequestPermissionRationale(
            reference.pointer,
            _id_shouldShowRequestPermissionRationale as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_startActivityForResult = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;I)V',
  );

  static final _startActivityForResult = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i)`
  void startActivityForResult(
    Intent? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityForResult(
            reference.pointer,
            _id_startActivityForResult as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i)
        .check();
  }

  static final _id_startActivityForResult$1 = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityForResult$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityForResult$1(
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityForResult$1(
            reference.pointer,
            _id_startActivityForResult$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .check();
  }

  static final _id_isActivityTransitionRunning = _class.instanceMethodId(
    r'isActivityTransitionRunning',
    r'()Z',
  );

  static final _isActivityTransitionRunning =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isActivityTransitionRunning()`
  bool isActivityTransitionRunning() {
    return _isActivityTransitionRunning(reference.pointer,
            _id_isActivityTransitionRunning as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_startIntentSenderForResult = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderForResult =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int)>();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderForResult(
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult(
            reference.pointer,
            _id_startIntentSenderForResult as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderForResult$1 = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderForResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderForResult$1(
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult$1(
            reference.pointer,
            _id_startIntentSenderForResult$1 as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivity(android.content.Intent intent)`
  void startActivity(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
            reference.pointer,
            _id_startActivity$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<Intent?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer,
            _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer)
        .check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<Intent?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
            reference.pointer,
            _id_startActivities$1 as jni$_.JMethodIDPtr,
            _$intents.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
            reference.pointer,
            _id_startIntentSender$1 as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivityIfNeeded = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;I)Z',
  );

  static final _startActivityIfNeeded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i)`
  bool startActivityIfNeeded(
    Intent? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded(
            reference.pointer,
            _id_startActivityIfNeeded as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i)
        .boolean;
  }

  static final _id_startActivityIfNeeded$1 = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)Z',
  );

  static final _startActivityIfNeeded$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)`
  bool startActivityIfNeeded$1(
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded$1(
            reference.pointer,
            _id_startActivityIfNeeded$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;)Z',
  );

  static final _startNextMatchingActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent)`
  bool startNextMatchingActivity(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity(
            reference.pointer,
            _id_startNextMatchingActivity as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity$1 = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)Z',
  );

  static final _startNextMatchingActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)`
  bool startNextMatchingActivity$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity$1(
            reference.pointer,
            _id_startNextMatchingActivity$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_startActivityFromChild = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromChild = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)`
  void startActivityFromChild(
    Activity? activity,
    Intent? intent,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromChild(
            reference.pointer,
            _id_startActivityFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intent.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromChild$1 = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromChild$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromChild$1(
    Activity? activity,
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromChild$1(
            reference.pointer,
            _id_startActivityFromChild$1 as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivityFromFragment = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromFragment = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)`
  void startActivityFromFragment(
    jni$_.JObject? fragment,
    Intent? intent,
    int i,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment(
            reference.pointer,
            _id_startActivityFromFragment as jni$_.JMethodIDPtr,
            _$fragment.pointer,
            _$intent.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromFragment$1 = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromFragment$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromFragment$1(
    jni$_.JObject? fragment,
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment$1(
            reference.pointer,
            _id_startActivityFromFragment$1 as jni$_.JMethodIDPtr,
            _$fragment.pointer,
            _$intent.pointer,
            i,
            _$bundle.pointer)
        .check();
  }

  static final _id_startIntentSenderFromChild = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderFromChild =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int)>();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderFromChild(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild(
            reference.pointer,
            _id_startIntentSenderFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderFromChild$1 = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderFromChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderFromChild$1(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild$1(
            reference.pointer,
            _id_startIntentSenderFromChild$1 as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intentSender.pointer,
            i,
            _$intent.pointer,
            i1,
            i2,
            i3,
            _$bundle.pointer)
        .check();
  }

  static final _id_overridePendingTransition = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(II)V',
  );

  static final _overridePendingTransition = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1)`
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    _overridePendingTransition(reference.pointer,
            _id_overridePendingTransition as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_overridePendingTransition$1 = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(III)V',
  );

  static final _overridePendingTransition$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1, int i2)`
  void overridePendingTransition$1(
    int i,
    int i1,
    int i2,
  ) {
    _overridePendingTransition$1(reference.pointer,
            _id_overridePendingTransition$1 as jni$_.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(I)V',
  );

  static final _setResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setResult(int i)`
  void setResult(
    int i,
  ) {
    _setResult(reference.pointer, _id_setResult as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setResult$1 = _class.instanceMethodId(
    r'setResult',
    r'(ILandroid/content/Intent;)V',
  );

  static final _setResult$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResult(int i, android.content.Intent intent)`
  void setResult$1(
    int i,
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setResult$1(reference.pointer, _id_setResult$1 as jni$_.JMethodIDPtr, i,
            _$intent.pointer)
        .check();
  }

  static final _id_getReferrer = _class.instanceMethodId(
    r'getReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _getReferrer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri getReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getReferrer() {
    return _getReferrer(
            reference.pointer, _id_getReferrer as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onProvideReferrer = _class.instanceMethodId(
    r'onProvideReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _onProvideReferrer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri onProvideReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onProvideReferrer() {
    return _onProvideReferrer(
            reference.pointer, _id_onProvideReferrer as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCallingPackage = _class.instanceMethodId(
    r'getCallingPackage',
    r'()Ljava/lang/String;',
  );

  static final _getCallingPackage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getCallingPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getCallingPackage() {
    return _getCallingPackage(
            reference.pointer, _id_getCallingPackage as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCallingActivity = _class.instanceMethodId(
    r'getCallingActivity',
    r'()Landroid/content/ComponentName;',
  );

  static final _getCallingActivity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ComponentName getCallingActivity()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCallingActivity() {
    return _getCallingActivity(
            reference.pointer, _id_getCallingActivity as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setVisible = _class.instanceMethodId(
    r'setVisible',
    r'(Z)V',
  );

  static final _setVisible = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setVisible(boolean z)`
  void setVisible(
    bool z,
  ) {
    _setVisible(
            reference.pointer, _id_setVisible as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isFinishing = _class.instanceMethodId(
    r'isFinishing',
    r'()Z',
  );

  static final _isFinishing = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isFinishing()`
  bool isFinishing() {
    return _isFinishing(
            reference.pointer, _id_isFinishing as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r'isDestroyed',
    r'()Z',
  );

  static final _isDestroyed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isDestroyed()`
  bool isDestroyed() {
    return _isDestroyed(
            reference.pointer, _id_isDestroyed as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isChangingConfigurations = _class.instanceMethodId(
    r'isChangingConfigurations',
    r'()Z',
  );

  static final _isChangingConfigurations = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isChangingConfigurations()`
  bool isChangingConfigurations() {
    return _isChangingConfigurations(reference.pointer,
            _id_isChangingConfigurations as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_recreate = _class.instanceMethodId(
    r'recreate',
    r'()V',
  );

  static final _recreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void recreate()`
  void recreate() {
    _recreate(reference.pointer, _id_recreate as jni$_.JMethodIDPtr).check();
  }

  static final _id_finish = _class.instanceMethodId(
    r'finish',
    r'()V',
  );

  static final _finish = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finish()`
  void finish() {
    _finish(reference.pointer, _id_finish as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishAffinity = _class.instanceMethodId(
    r'finishAffinity',
    r'()V',
  );

  static final _finishAffinity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finishAffinity()`
  void finishAffinity() {
    _finishAffinity(reference.pointer, _id_finishAffinity as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_finishFromChild = _class.instanceMethodId(
    r'finishFromChild',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishFromChild = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void finishFromChild(android.app.Activity activity)`
  void finishFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishFromChild(reference.pointer,
            _id_finishFromChild as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_finishAfterTransition = _class.instanceMethodId(
    r'finishAfterTransition',
    r'()V',
  );

  static final _finishAfterTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finishAfterTransition()`
  void finishAfterTransition() {
    _finishAfterTransition(
            reference.pointer, _id_finishAfterTransition as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_finishActivity = _class.instanceMethodId(
    r'finishActivity',
    r'(I)V',
  );

  static final _finishActivity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void finishActivity(int i)`
  void finishActivity(
    int i,
  ) {
    _finishActivity(
            reference.pointer, _id_finishActivity as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_finishActivityFromChild = _class.instanceMethodId(
    r'finishActivityFromChild',
    r'(Landroid/app/Activity;I)V',
  );

  static final _finishActivityFromChild = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void finishActivityFromChild(android.app.Activity activity, int i)`
  void finishActivityFromChild(
    Activity? activity,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishActivityFromChild(
            reference.pointer,
            _id_finishActivityFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            i)
        .check();
  }

  static final _id_finishAndRemoveTask = _class.instanceMethodId(
    r'finishAndRemoveTask',
    r'()V',
  );

  static final _finishAndRemoveTask = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void finishAndRemoveTask()`
  void finishAndRemoveTask() {
    _finishAndRemoveTask(
            reference.pointer, _id_finishAndRemoveTask as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_releaseInstance = _class.instanceMethodId(
    r'releaseInstance',
    r'()Z',
  );

  static final _releaseInstance = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean releaseInstance()`
  bool releaseInstance() {
    return _releaseInstance(
            reference.pointer, _id_releaseInstance as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_onActivityReenter = _class.instanceMethodId(
    r'onActivityReenter',
    r'(ILandroid/content/Intent;)V',
  );

  static final _onActivityReenter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityReenter(int i, android.content.Intent intent)`
  void onActivityReenter(
    int i,
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _onActivityReenter(reference.pointer,
            _id_onActivityReenter as jni$_.JMethodIDPtr, i, _$intent.pointer)
        .check();
  }

  static final _id_createPendingResult = _class.instanceMethodId(
    r'createPendingResult',
    r'(ILandroid/content/Intent;I)Landroid/app/PendingIntent;',
  );

  static final _createPendingResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createPendingResult(
    int i,
    Intent? intent,
    int i1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _createPendingResult(
            reference.pointer,
            _id_createPendingResult as jni$_.JMethodIDPtr,
            i,
            _$intent.pointer,
            i1)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setRequestedOrientation = _class.instanceMethodId(
    r'setRequestedOrientation',
    r'(I)V',
  );

  static final _setRequestedOrientation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRequestedOrientation(int i)`
  void setRequestedOrientation(
    int i,
  ) {
    _setRequestedOrientation(reference.pointer,
            _id_setRequestedOrientation as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getRequestedOrientation = _class.instanceMethodId(
    r'getRequestedOrientation',
    r'()I',
  );

  static final _getRequestedOrientation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getRequestedOrientation()`
  int getRequestedOrientation() {
    return _getRequestedOrientation(reference.pointer,
            _id_getRequestedOrientation as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getTaskId = _class.instanceMethodId(
    r'getTaskId',
    r'()I',
  );

  static final _getTaskId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getTaskId()`
  int getTaskId() {
    return _getTaskId(reference.pointer, _id_getTaskId as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_isTaskRoot = _class.instanceMethodId(
    r'isTaskRoot',
    r'()Z',
  );

  static final _isTaskRoot = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isTaskRoot()`
  bool isTaskRoot() {
    return _isTaskRoot(reference.pointer, _id_isTaskRoot as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveTaskToBack = _class.instanceMethodId(
    r'moveTaskToBack',
    r'(Z)Z',
  );

  static final _moveTaskToBack = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean moveTaskToBack(boolean z)`
  bool moveTaskToBack(
    bool z,
  ) {
    return _moveTaskToBack(reference.pointer,
            _id_moveTaskToBack as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_getLocalClassName = _class.instanceMethodId(
    r'getLocalClassName',
    r'()Ljava/lang/String;',
  );

  static final _getLocalClassName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getLocalClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLocalClassName() {
    return _getLocalClassName(
            reference.pointer, _id_getLocalClassName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r'getComponentName',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponentName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ComponentName getComponentName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getComponentName() {
    return _getComponentName(
            reference.pointer, _id_getComponentName as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPreferences = _class.instanceMethodId(
    r'getPreferences',
    r'(I)Landroid/content/SharedPreferences;',
  );

  static final _getPreferences = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.SharedPreferences getPreferences(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPreferences(
    int i,
  ) {
    return _getPreferences(
            reference.pointer, _id_getPreferences as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isLaunchedFromBubble = _class.instanceMethodId(
    r'isLaunchedFromBubble',
    r'()Z',
  );

  static final _isLaunchedFromBubble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isLaunchedFromBubble()`
  bool isLaunchedFromBubble() {
    return _isLaunchedFromBubble(
            reference.pointer, _id_isLaunchedFromBubble as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTitle = _class.instanceMethodId(
    r'setTitle',
    r'(Ljava/lang/CharSequence;)V',
  );

  static final _setTitle = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setTitle(java.lang.CharSequence charSequence)`
  void setTitle(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    _setTitle(reference.pointer, _id_setTitle as jni$_.JMethodIDPtr,
            _$charSequence.pointer)
        .check();
  }

  static final _id_setTitle$1 = _class.instanceMethodId(
    r'setTitle',
    r'(I)V',
  );

  static final _setTitle$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitle(int i)`
  void setTitle$1(
    int i,
  ) {
    _setTitle$1(reference.pointer, _id_setTitle$1 as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setTitleColor = _class.instanceMethodId(
    r'setTitleColor',
    r'(I)V',
  );

  static final _setTitleColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitleColor(int i)`
  void setTitleColor(
    int i,
  ) {
    _setTitleColor(
            reference.pointer, _id_setTitleColor as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getTitle = _class.instanceMethodId(
    r'getTitle',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getTitle = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.CharSequence getTitle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTitle() {
    return _getTitle(reference.pointer, _id_getTitle as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getTitleColor = _class.instanceMethodId(
    r'getTitleColor',
    r'()I',
  );

  static final _getTitleColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getTitleColor()`
  int getTitleColor() {
    return _getTitleColor(
            reference.pointer, _id_getTitleColor as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setTaskDescription = _class.instanceMethodId(
    r'setTaskDescription',
    r'(Landroid/app/ActivityManager$TaskDescription;)V',
  );

  static final _setTaskDescription = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)`
  void setTaskDescription(
    jni$_.JObject? taskDescription,
  ) {
    final _$taskDescription =
        taskDescription?.reference ?? jni$_.jNullReference;
    _setTaskDescription(
            reference.pointer,
            _id_setTaskDescription as jni$_.JMethodIDPtr,
            _$taskDescription.pointer)
        .check();
  }

  static final _id_setProgressBarVisibility = _class.instanceMethodId(
    r'setProgressBarVisibility',
    r'(Z)V',
  );

  static final _setProgressBarVisibility = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarVisibility(boolean z)`
  void setProgressBarVisibility(
    bool z,
  ) {
    _setProgressBarVisibility(reference.pointer,
            _id_setProgressBarVisibility as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminateVisibility =
      _class.instanceMethodId(
    r'setProgressBarIndeterminateVisibility',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminateVisibility =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminateVisibility(boolean z)`
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    _setProgressBarIndeterminateVisibility(
            reference.pointer,
            _id_setProgressBarIndeterminateVisibility as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminate = _class.instanceMethodId(
    r'setProgressBarIndeterminate',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminate =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminate(boolean z)`
  void setProgressBarIndeterminate(
    bool z,
  ) {
    _setProgressBarIndeterminate(reference.pointer,
            _id_setProgressBarIndeterminate as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgress = _class.instanceMethodId(
    r'setProgress',
    r'(I)V',
  );

  static final _setProgress = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgress(int i)`
  void setProgress(
    int i,
  ) {
    _setProgress(reference.pointer, _id_setProgress as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setSecondaryProgress = _class.instanceMethodId(
    r'setSecondaryProgress',
    r'(I)V',
  );

  static final _setSecondaryProgress = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setSecondaryProgress(int i)`
  void setSecondaryProgress(
    int i,
  ) {
    _setSecondaryProgress(reference.pointer,
            _id_setSecondaryProgress as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setVolumeControlStream = _class.instanceMethodId(
    r'setVolumeControlStream',
    r'(I)V',
  );

  static final _setVolumeControlStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setVolumeControlStream(int i)`
  void setVolumeControlStream(
    int i,
  ) {
    _setVolumeControlStream(reference.pointer,
            _id_setVolumeControlStream as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getVolumeControlStream = _class.instanceMethodId(
    r'getVolumeControlStream',
    r'()I',
  );

  static final _getVolumeControlStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getVolumeControlStream()`
  int getVolumeControlStream() {
    return _getVolumeControlStream(
            reference.pointer, _id_getVolumeControlStream as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setMediaController = _class.instanceMethodId(
    r'setMediaController',
    r'(Landroid/media/session/MediaController;)V',
  );

  static final _setMediaController = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setMediaController(android.media.session.MediaController mediaController)`
  void setMediaController(
    jni$_.JObject? mediaController,
  ) {
    final _$mediaController =
        mediaController?.reference ?? jni$_.jNullReference;
    _setMediaController(
            reference.pointer,
            _id_setMediaController as jni$_.JMethodIDPtr,
            _$mediaController.pointer)
        .check();
  }

  static final _id_getMediaController = _class.instanceMethodId(
    r'getMediaController',
    r'()Landroid/media/session/MediaController;',
  );

  static final _getMediaController = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.media.session.MediaController getMediaController()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMediaController() {
    return _getMediaController(
            reference.pointer, _id_getMediaController as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_runOnUiThread = _class.instanceMethodId(
    r'runOnUiThread',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _runOnUiThread = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void runOnUiThread(java.lang.Runnable runnable)`
  void runOnUiThread(
    jni$_.JObject? runnable,
  ) {
    final _$runnable = runnable?.reference ?? jni$_.jNullReference;
    _runOnUiThread(reference.pointer, _id_runOnUiThread as jni$_.JMethodIDPtr,
            _$runnable.pointer)
        .check();
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r'onCreateView',
    r'(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView(
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView(
            reference.pointer,
            _id_onCreateView as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$context.pointer,
            _$attributeSet.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreateView$1 = _class.instanceMethodId(
    r'onCreateView',
    r'(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView$1(
    jni$_.JObject? view,
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView$1(
            reference.pointer,
            _id_onCreateView$1 as jni$_.JMethodIDPtr,
            _$view.pointer,
            _$string.pointer,
            _$context.pointer,
            _$attributeSet.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V',
  );

  static final _dump = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)`
  void dump(
    jni$_.JString? string,
    jni$_.JObject? fileDescriptor,
    jni$_.JObject? printWriter,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$fileDescriptor = fileDescriptor?.reference ?? jni$_.jNullReference;
    final _$printWriter = printWriter?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _dump(reference.pointer, _id_dump as jni$_.JMethodIDPtr, _$string.pointer,
            _$fileDescriptor.pointer, _$printWriter.pointer, _$strings.pointer)
        .check();
  }

  static final _id_isImmersive = _class.instanceMethodId(
    r'isImmersive',
    r'()Z',
  );

  static final _isImmersive = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isImmersive()`
  bool isImmersive() {
    return _isImmersive(
            reference.pointer, _id_isImmersive as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTranslucent = _class.instanceMethodId(
    r'setTranslucent',
    r'(Z)Z',
  );

  static final _setTranslucent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean setTranslucent(boolean z)`
  bool setTranslucent(
    bool z,
  ) {
    return _setTranslucent(reference.pointer,
            _id_setTranslucent as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_requestVisibleBehind = _class.instanceMethodId(
    r'requestVisibleBehind',
    r'(Z)Z',
  );

  static final _requestVisibleBehind = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean requestVisibleBehind(boolean z)`
  bool requestVisibleBehind(
    bool z,
  ) {
    return _requestVisibleBehind(reference.pointer,
            _id_requestVisibleBehind as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_onVisibleBehindCanceled = _class.instanceMethodId(
    r'onVisibleBehindCanceled',
    r'()V',
  );

  static final _onVisibleBehindCanceled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onVisibleBehindCanceled()`
  void onVisibleBehindCanceled() {
    _onVisibleBehindCanceled(reference.pointer,
            _id_onVisibleBehindCanceled as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onEnterAnimationComplete = _class.instanceMethodId(
    r'onEnterAnimationComplete',
    r'()V',
  );

  static final _onEnterAnimationComplete = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onEnterAnimationComplete()`
  void onEnterAnimationComplete() {
    _onEnterAnimationComplete(reference.pointer,
            _id_onEnterAnimationComplete as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_setImmersive = _class.instanceMethodId(
    r'setImmersive',
    r'(Z)V',
  );

  static final _setImmersive = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setImmersive(boolean z)`
  void setImmersive(
    bool z,
  ) {
    _setImmersive(reference.pointer, _id_setImmersive as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setVrModeEnabled = _class.instanceMethodId(
    r'setVrModeEnabled',
    r'(ZLandroid/content/ComponentName;)V',
  );

  static final _setVrModeEnabled = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)`
  void setVrModeEnabled(
    bool z,
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    _setVrModeEnabled(
            reference.pointer,
            _id_setVrModeEnabled as jni$_.JMethodIDPtr,
            z ? 1 : 0,
            _$componentName.pointer)
        .check();
  }

  static final _id_startActionMode = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _startActionMode = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode(reference.pointer,
            _id_startActionMode as jni$_.JMethodIDPtr, _$callback.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startActionMode$1 = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _startActionMode$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode$1(reference.pointer,
            _id_startActionMode$1 as jni$_.JMethodIDPtr, _$callback.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onWindowStartingActionMode = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode(
            reference.pointer,
            _id_onWindowStartingActionMode as jni$_.JMethodIDPtr,
            _$callback.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onWindowStartingActionMode$1 = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode$1(
            reference.pointer,
            _id_onWindowStartingActionMode$1 as jni$_.JMethodIDPtr,
            _$callback.pointer,
            i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onActionModeStarted = _class.instanceMethodId(
    r'onActionModeStarted',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeStarted = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActionModeStarted(android.view.ActionMode actionMode)`
  void onActionModeStarted(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeStarted(reference.pointer,
            _id_onActionModeStarted as jni$_.JMethodIDPtr, _$actionMode.pointer)
        .check();
  }

  static final _id_onActionModeFinished = _class.instanceMethodId(
    r'onActionModeFinished',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeFinished = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActionModeFinished(android.view.ActionMode actionMode)`
  void onActionModeFinished(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeFinished(
            reference.pointer,
            _id_onActionModeFinished as jni$_.JMethodIDPtr,
            _$actionMode.pointer)
        .check();
  }

  static final _id_shouldUpRecreateTask = _class.instanceMethodId(
    r'shouldUpRecreateTask',
    r'(Landroid/content/Intent;)Z',
  );

  static final _shouldUpRecreateTask = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean shouldUpRecreateTask(android.content.Intent intent)`
  bool shouldUpRecreateTask(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _shouldUpRecreateTask(reference.pointer,
            _id_shouldUpRecreateTask as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_navigateUpTo = _class.instanceMethodId(
    r'navigateUpTo',
    r'(Landroid/content/Intent;)Z',
  );

  static final _navigateUpTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean navigateUpTo(android.content.Intent intent)`
  bool navigateUpTo(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpTo(reference.pointer,
            _id_navigateUpTo as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_navigateUpToFromChild = _class.instanceMethodId(
    r'navigateUpToFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;)Z',
  );

  static final _navigateUpToFromChild = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)`
  bool navigateUpToFromChild(
    Activity? activity,
    Intent? intent,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpToFromChild(
            reference.pointer,
            _id_navigateUpToFromChild as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$intent.pointer)
        .boolean;
  }

  static final _id_getParentActivityIntent = _class.instanceMethodId(
    r'getParentActivityIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getParentActivityIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getParentActivityIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getParentActivityIntent() {
    return _getParentActivityIntent(reference.pointer,
            _id_getParentActivityIntent as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setEnterSharedElementCallback = _class.instanceMethodId(
    r'setEnterSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setEnterSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setEnterSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback =
        sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setEnterSharedElementCallback(
            reference.pointer,
            _id_setEnterSharedElementCallback as jni$_.JMethodIDPtr,
            _$sharedElementCallback.pointer)
        .check();
  }

  static final _id_setExitSharedElementCallback = _class.instanceMethodId(
    r'setExitSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setExitSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setExitSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback =
        sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setExitSharedElementCallback(
            reference.pointer,
            _id_setExitSharedElementCallback as jni$_.JMethodIDPtr,
            _$sharedElementCallback.pointer)
        .check();
  }

  static final _id_postponeEnterTransition = _class.instanceMethodId(
    r'postponeEnterTransition',
    r'()V',
  );

  static final _postponeEnterTransition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void postponeEnterTransition()`
  void postponeEnterTransition() {
    _postponeEnterTransition(reference.pointer,
            _id_postponeEnterTransition as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_startPostponedEnterTransition = _class.instanceMethodId(
    r'startPostponedEnterTransition',
    r'()V',
  );

  static final _startPostponedEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public void startPostponedEnterTransition()`
  void startPostponedEnterTransition() {
    _startPostponedEnterTransition(reference.pointer,
            _id_startPostponedEnterTransition as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_requestDragAndDropPermissions = _class.instanceMethodId(
    r'requestDragAndDropPermissions',
    r'(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;',
  );

  static final _requestDragAndDropPermissions =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? requestDragAndDropPermissions(
    jni$_.JObject? dragEvent,
  ) {
    final _$dragEvent = dragEvent?.reference ?? jni$_.jNullReference;
    return _requestDragAndDropPermissions(
            reference.pointer,
            _id_requestDragAndDropPermissions as jni$_.JMethodIDPtr,
            _$dragEvent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startLockTask = _class.instanceMethodId(
    r'startLockTask',
    r'()V',
  );

  static final _startLockTask = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void startLockTask()`
  void startLockTask() {
    _startLockTask(reference.pointer, _id_startLockTask as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_stopLockTask = _class.instanceMethodId(
    r'stopLockTask',
    r'()V',
  );

  static final _stopLockTask = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void stopLockTask()`
  void stopLockTask() {
    _stopLockTask(reference.pointer, _id_stopLockTask as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_showLockTaskEscapeMessage = _class.instanceMethodId(
    r'showLockTaskEscapeMessage',
    r'()V',
  );

  static final _showLockTaskEscapeMessage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void showLockTaskEscapeMessage()`
  void showLockTaskEscapeMessage() {
    _showLockTaskEscapeMessage(reference.pointer,
            _id_showLockTaskEscapeMessage as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_setRecentsScreenshotEnabled = _class.instanceMethodId(
    r'setRecentsScreenshotEnabled',
    r'(Z)V',
  );

  static final _setRecentsScreenshotEnabled =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRecentsScreenshotEnabled(boolean z)`
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    _setRecentsScreenshotEnabled(reference.pointer,
            _id_setRecentsScreenshotEnabled as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setShowWhenLocked = _class.instanceMethodId(
    r'setShowWhenLocked',
    r'(Z)V',
  );

  static final _setShowWhenLocked = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShowWhenLocked(boolean z)`
  void setShowWhenLocked(
    bool z,
  ) {
    _setShowWhenLocked(reference.pointer,
            _id_setShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setInheritShowWhenLocked = _class.instanceMethodId(
    r'setInheritShowWhenLocked',
    r'(Z)V',
  );

  static final _setInheritShowWhenLocked = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setInheritShowWhenLocked(boolean z)`
  void setInheritShowWhenLocked(
    bool z,
  ) {
    _setInheritShowWhenLocked(reference.pointer,
            _id_setInheritShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setTurnScreenOn = _class.instanceMethodId(
    r'setTurnScreenOn',
    r'(Z)V',
  );

  static final _setTurnScreenOn = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTurnScreenOn(boolean z)`
  void setTurnScreenOn(
    bool z,
  ) {
    _setTurnScreenOn(reference.pointer,
            _id_setTurnScreenOn as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getOnBackInvokedDispatcher = _class.instanceMethodId(
    r'getOnBackInvokedDispatcher',
    r'()Landroid/window/OnBackInvokedDispatcher;',
  );

  static final _getOnBackInvokedDispatcher =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getOnBackInvokedDispatcher() {
    return _getOnBackInvokedDispatcher(reference.pointer,
            _id_getOnBackInvokedDispatcher as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $Activity$NullableType extends jni$_.JObjType<Activity?> {
  @jni$_.internal
  const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Activity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$NullableType) &&
        other is $Activity$NullableType;
  }
}

final class $Activity$Type extends jni$_.JObjType<Activity> {
  @jni$_.internal
  const $Activity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity fromReference(jni$_.JReference reference) => Activity.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$Type) && other is $Activity$Type;
  }
}

/// from: `java.time.Instant`
class Instant extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Instant> $type;

  @jni$_.internal
  Instant.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'java/time/Instant');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Instant$NullableType();
  static const type = $Instant$Type();
  static final _id_EPOCH = _class.staticFieldId(
    r'EPOCH',
    r'Ljava/time/Instant;',
  );

  /// from: `static public final java.time.Instant EPOCH`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? get EPOCH =>
      _id_EPOCH.get(_class, const $Instant$NullableType());

  static final _id_MAX = _class.staticFieldId(
    r'MAX',
    r'Ljava/time/Instant;',
  );

  /// from: `static public final java.time.Instant MAX`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? get MAX => _id_MAX.get(_class, const $Instant$NullableType());

  static final _id_MIN = _class.staticFieldId(
    r'MIN',
    r'Ljava/time/Instant;',
  );

  /// from: `static public final java.time.Instant MIN`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? get MIN => _id_MIN.get(_class, const $Instant$NullableType());

  static final _id_now = _class.staticMethodId(
    r'now',
    r'()Ljava/time/Instant;',
  );

  static final _now = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public java.time.Instant now()`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? now() {
    return _now(_class.reference.pointer, _id_now as jni$_.JMethodIDPtr)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_now$1 = _class.staticMethodId(
    r'now',
    r'(Ljava/time/Clock;)Ljava/time/Instant;',
  );

  static final _now$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.time.Instant now(java.time.Clock clock)`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? now$1(
    jni$_.JObject? clock,
  ) {
    final _$clock = clock?.reference ?? jni$_.jNullReference;
    return _now$1(_class.reference.pointer, _id_now$1 as jni$_.JMethodIDPtr,
            _$clock.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_ofEpochSecond = _class.staticMethodId(
    r'ofEpochSecond',
    r'(J)Ljava/time/Instant;',
  );

  static final _ofEpochSecond = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public java.time.Instant ofEpochSecond(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? ofEpochSecond(
    int j,
  ) {
    return _ofEpochSecond(_class.reference.pointer,
            _id_ofEpochSecond as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_ofEpochSecond$1 = _class.staticMethodId(
    r'ofEpochSecond',
    r'(JJ)Ljava/time/Instant;',
  );

  static final _ofEpochSecond$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int64, jni$_.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `static public java.time.Instant ofEpochSecond(long j, long j1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? ofEpochSecond$1(
    int j,
    int j1,
  ) {
    return _ofEpochSecond$1(_class.reference.pointer,
            _id_ofEpochSecond$1 as jni$_.JMethodIDPtr, j, j1)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_ofEpochMilli = _class.staticMethodId(
    r'ofEpochMilli',
    r'(J)Ljava/time/Instant;',
  );

  static final _ofEpochMilli = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public java.time.Instant ofEpochMilli(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? ofEpochMilli(
    int j,
  ) {
    return _ofEpochMilli(
            _class.reference.pointer, _id_ofEpochMilli as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_from = _class.staticMethodId(
    r'from',
    r'(Ljava/time/temporal/TemporalAccessor;)Ljava/time/Instant;',
  );

  static final _from = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.time.Instant from(java.time.temporal.TemporalAccessor temporalAccessor)`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? from(
    jni$_.JObject? temporalAccessor,
  ) {
    final _$temporalAccessor =
        temporalAccessor?.reference ?? jni$_.jNullReference;
    return _from(_class.reference.pointer, _id_from as jni$_.JMethodIDPtr,
            _$temporalAccessor.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_parse = _class.staticMethodId(
    r'parse',
    r'(Ljava/lang/CharSequence;)Ljava/time/Instant;',
  );

  static final _parse = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.time.Instant parse(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static Instant? parse(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _parse(_class.reference.pointer, _id_parse as jni$_.JMethodIDPtr,
            _$charSequence.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_isSupported = _class.instanceMethodId(
    r'isSupported',
    r'(Ljava/time/temporal/TemporalField;)Z',
  );

  static final _isSupported = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean isSupported(java.time.temporal.TemporalField temporalField)`
  bool isSupported(
    jni$_.JObject? temporalField,
  ) {
    final _$temporalField = temporalField?.reference ?? jni$_.jNullReference;
    return _isSupported(reference.pointer,
            _id_isSupported as jni$_.JMethodIDPtr, _$temporalField.pointer)
        .boolean;
  }

  static final _id_isSupported$1 = _class.instanceMethodId(
    r'isSupported',
    r'(Ljava/time/temporal/TemporalUnit;)Z',
  );

  static final _isSupported$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean isSupported(java.time.temporal.TemporalUnit temporalUnit)`
  bool isSupported$1(
    jni$_.JObject? temporalUnit,
  ) {
    final _$temporalUnit = temporalUnit?.reference ?? jni$_.jNullReference;
    return _isSupported$1(reference.pointer,
            _id_isSupported$1 as jni$_.JMethodIDPtr, _$temporalUnit.pointer)
        .boolean;
  }

  static final _id_range = _class.instanceMethodId(
    r'range',
    r'(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;',
  );

  static final _range = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.temporal.ValueRange range(java.time.temporal.TemporalField temporalField)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? range(
    jni$_.JObject? temporalField,
  ) {
    final _$temporalField = temporalField?.reference ?? jni$_.jNullReference;
    return _range(reference.pointer, _id_range as jni$_.JMethodIDPtr,
            _$temporalField.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_get = _class.instanceMethodId(
    r'get',
    r'(Ljava/time/temporal/TemporalField;)I',
  );

  static final _get = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int get(java.time.temporal.TemporalField temporalField)`
  int get(
    jni$_.JObject? temporalField,
  ) {
    final _$temporalField = temporalField?.reference ?? jni$_.jNullReference;
    return _get(reference.pointer, _id_get as jni$_.JMethodIDPtr,
            _$temporalField.pointer)
        .integer;
  }

  static final _id_getLong = _class.instanceMethodId(
    r'getLong',
    r'(Ljava/time/temporal/TemporalField;)J',
  );

  static final _getLong = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public long getLong(java.time.temporal.TemporalField temporalField)`
  int getLong(
    jni$_.JObject? temporalField,
  ) {
    final _$temporalField = temporalField?.reference ?? jni$_.jNullReference;
    return _getLong(reference.pointer, _id_getLong as jni$_.JMethodIDPtr,
            _$temporalField.pointer)
        .long;
  }

  static final _id_getEpochSecond = _class.instanceMethodId(
    r'getEpochSecond',
    r'()J',
  );

  static final _getEpochSecond = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long getEpochSecond()`
  int getEpochSecond() {
    return _getEpochSecond(
            reference.pointer, _id_getEpochSecond as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getNano = _class.instanceMethodId(
    r'getNano',
    r'()I',
  );

  static final _getNano = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getNano()`
  int getNano() {
    return _getNano(reference.pointer, _id_getNano as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_with$ = _class.instanceMethodId(
    r'with',
    r'(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/Instant;',
  );

  static final _with$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.Instant with(java.time.temporal.TemporalAdjuster temporalAdjuster)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? with$(
    jni$_.JObject? temporalAdjuster,
  ) {
    final _$temporalAdjuster =
        temporalAdjuster?.reference ?? jni$_.jNullReference;
    return _with$(reference.pointer, _id_with$ as jni$_.JMethodIDPtr,
            _$temporalAdjuster.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_with$1 = _class.instanceMethodId(
    r'with',
    r'(Ljava/time/temporal/TemporalField;J)Ljava/time/Instant;',
  );

  static final _with$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.time.Instant with(java.time.temporal.TemporalField temporalField, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? with$1(
    jni$_.JObject? temporalField,
    int j,
  ) {
    final _$temporalField = temporalField?.reference ?? jni$_.jNullReference;
    return _with$1(reference.pointer, _id_with$1 as jni$_.JMethodIDPtr,
            _$temporalField.pointer, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_truncatedTo = _class.instanceMethodId(
    r'truncatedTo',
    r'(Ljava/time/temporal/TemporalUnit;)Ljava/time/Instant;',
  );

  static final _truncatedTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.Instant truncatedTo(java.time.temporal.TemporalUnit temporalUnit)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? truncatedTo(
    jni$_.JObject? temporalUnit,
  ) {
    final _$temporalUnit = temporalUnit?.reference ?? jni$_.jNullReference;
    return _truncatedTo(reference.pointer,
            _id_truncatedTo as jni$_.JMethodIDPtr, _$temporalUnit.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_plus = _class.instanceMethodId(
    r'plus',
    r'(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;',
  );

  static final _plus = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.Instant plus(java.time.temporal.TemporalAmount temporalAmount)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? plus(
    jni$_.JObject? temporalAmount,
  ) {
    final _$temporalAmount = temporalAmount?.reference ?? jni$_.jNullReference;
    return _plus(reference.pointer, _id_plus as jni$_.JMethodIDPtr,
            _$temporalAmount.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_plus$1 = _class.instanceMethodId(
    r'plus',
    r'(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;',
  );

  static final _plus$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.Instant plus(long j, java.time.temporal.TemporalUnit temporalUnit)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? plus$1(
    int j,
    jni$_.JObject? temporalUnit,
  ) {
    final _$temporalUnit = temporalUnit?.reference ?? jni$_.jNullReference;
    return _plus$1(reference.pointer, _id_plus$1 as jni$_.JMethodIDPtr, j,
            _$temporalUnit.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_plusSeconds = _class.instanceMethodId(
    r'plusSeconds',
    r'(J)Ljava/time/Instant;',
  );

  static final _plusSeconds = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.time.Instant plusSeconds(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? plusSeconds(
    int j,
  ) {
    return _plusSeconds(
            reference.pointer, _id_plusSeconds as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_plusMillis = _class.instanceMethodId(
    r'plusMillis',
    r'(J)Ljava/time/Instant;',
  );

  static final _plusMillis = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.time.Instant plusMillis(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? plusMillis(
    int j,
  ) {
    return _plusMillis(
            reference.pointer, _id_plusMillis as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_plusNanos = _class.instanceMethodId(
    r'plusNanos',
    r'(J)Ljava/time/Instant;',
  );

  static final _plusNanos = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.time.Instant plusNanos(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? plusNanos(
    int j,
  ) {
    return _plusNanos(reference.pointer, _id_plusNanos as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_minus = _class.instanceMethodId(
    r'minus',
    r'(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;',
  );

  static final _minus = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.Instant minus(java.time.temporal.TemporalAmount temporalAmount)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? minus(
    jni$_.JObject? temporalAmount,
  ) {
    final _$temporalAmount = temporalAmount?.reference ?? jni$_.jNullReference;
    return _minus(reference.pointer, _id_minus as jni$_.JMethodIDPtr,
            _$temporalAmount.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_minus$1 = _class.instanceMethodId(
    r'minus',
    r'(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;',
  );

  static final _minus$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.Instant minus(long j, java.time.temporal.TemporalUnit temporalUnit)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? minus$1(
    int j,
    jni$_.JObject? temporalUnit,
  ) {
    final _$temporalUnit = temporalUnit?.reference ?? jni$_.jNullReference;
    return _minus$1(reference.pointer, _id_minus$1 as jni$_.JMethodIDPtr, j,
            _$temporalUnit.pointer)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_minusSeconds = _class.instanceMethodId(
    r'minusSeconds',
    r'(J)Ljava/time/Instant;',
  );

  static final _minusSeconds = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.time.Instant minusSeconds(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? minusSeconds(
    int j,
  ) {
    return _minusSeconds(
            reference.pointer, _id_minusSeconds as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_minusMillis = _class.instanceMethodId(
    r'minusMillis',
    r'(J)Ljava/time/Instant;',
  );

  static final _minusMillis = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.time.Instant minusMillis(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? minusMillis(
    int j,
  ) {
    return _minusMillis(
            reference.pointer, _id_minusMillis as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_minusNanos = _class.instanceMethodId(
    r'minusNanos',
    r'(J)Ljava/time/Instant;',
  );

  static final _minusNanos = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.time.Instant minusNanos(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Instant? minusNanos(
    int j,
  ) {
    return _minusNanos(
            reference.pointer, _id_minusNanos as jni$_.JMethodIDPtr, j)
        .object<Instant?>(const $Instant$NullableType());
  }

  static final _id_query = _class.instanceMethodId(
    r'query',
    r'(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;',
  );

  static final _query = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public R query(java.time.temporal.TemporalQuery temporalQuery)`
  /// The returned object must be released after use, by calling the [release] method.
  $R? query<$R extends jni$_.JObject?>(
    jni$_.JObject? temporalQuery, {
    required jni$_.JObjType<$R> R,
  }) {
    final _$temporalQuery = temporalQuery?.reference ?? jni$_.jNullReference;
    return _query(reference.pointer, _id_query as jni$_.JMethodIDPtr,
            _$temporalQuery.pointer)
        .object<$R?>(R.nullableType);
  }

  static final _id_adjustInto = _class.instanceMethodId(
    r'adjustInto',
    r'(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;',
  );

  static final _adjustInto = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? adjustInto(
    jni$_.JObject? temporal,
  ) {
    final _$temporal = temporal?.reference ?? jni$_.jNullReference;
    return _adjustInto(reference.pointer, _id_adjustInto as jni$_.JMethodIDPtr,
            _$temporal.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_until = _class.instanceMethodId(
    r'until',
    r'(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J',
  );

  static final _until = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public long until(java.time.temporal.Temporal temporal, java.time.temporal.TemporalUnit temporalUnit)`
  int until(
    jni$_.JObject? temporal,
    jni$_.JObject? temporalUnit,
  ) {
    final _$temporal = temporal?.reference ?? jni$_.jNullReference;
    final _$temporalUnit = temporalUnit?.reference ?? jni$_.jNullReference;
    return _until(reference.pointer, _id_until as jni$_.JMethodIDPtr,
            _$temporal.pointer, _$temporalUnit.pointer)
        .long;
  }

  static final _id_atOffset = _class.instanceMethodId(
    r'atOffset',
    r'(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;',
  );

  static final _atOffset = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.OffsetDateTime atOffset(java.time.ZoneOffset zoneOffset)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? atOffset(
    jni$_.JObject? zoneOffset,
  ) {
    final _$zoneOffset = zoneOffset?.reference ?? jni$_.jNullReference;
    return _atOffset(reference.pointer, _id_atOffset as jni$_.JMethodIDPtr,
            _$zoneOffset.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_atZone = _class.instanceMethodId(
    r'atZone',
    r'(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;',
  );

  static final _atZone = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.time.ZonedDateTime atZone(java.time.ZoneId zoneId)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? atZone(
    jni$_.JObject? zoneId,
  ) {
    final _$zoneId = zoneId?.reference ?? jni$_.jNullReference;
    return _atZone(reference.pointer, _id_atZone as jni$_.JMethodIDPtr,
            _$zoneId.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toEpochMilli = _class.instanceMethodId(
    r'toEpochMilli',
    r'()J',
  );

  static final _toEpochMilli = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long toEpochMilli()`
  int toEpochMilli() {
    return _toEpochMilli(
            reference.pointer, _id_toEpochMilli as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r'compareTo',
    r'(Ljava/time/Instant;)I',
  );

  static final _compareTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int compareTo(java.time.Instant instant)`
  int compareTo(
    Instant? instant,
  ) {
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    return _compareTo(reference.pointer, _id_compareTo as jni$_.JMethodIDPtr,
            _$instant.pointer)
        .integer;
  }

  static final _id_isAfter = _class.instanceMethodId(
    r'isAfter',
    r'(Ljava/time/Instant;)Z',
  );

  static final _isAfter = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean isAfter(java.time.Instant instant)`
  bool isAfter(
    Instant? instant,
  ) {
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    return _isAfter(reference.pointer, _id_isAfter as jni$_.JMethodIDPtr,
            _$instant.pointer)
        .boolean;
  }

  static final _id_isBefore = _class.instanceMethodId(
    r'isBefore',
    r'(Ljava/time/Instant;)Z',
  );

  static final _isBefore = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean isBefore(java.time.Instant instant)`
  bool isBefore(
    Instant? instant,
  ) {
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    return _isBefore(reference.pointer, _id_isBefore as jni$_.JMethodIDPtr,
            _$instant.pointer)
        .boolean;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Instant$NullableType extends jni$_.JObjType<Instant?> {
  @jni$_.internal
  const $Instant$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/time/Instant;';

  @jni$_.internal
  @core$_.override
  Instant? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Instant.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Instant?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Instant$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Instant$NullableType) &&
        other is $Instant$NullableType;
  }
}

final class $Instant$Type extends jni$_.JObjType<Instant> {
  @jni$_.internal
  const $Instant$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/time/Instant;';

  @jni$_.internal
  @core$_.override
  Instant fromReference(jni$_.JReference reference) => Instant.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Instant?> get nullableType => const $Instant$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Instant$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Instant$Type) && other is $Instant$Type;
  }
}

/// from: `androidx.health.connect.client.request.AggregateGroupByDurationRequest`
class AggregateGroupByDurationRequest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateGroupByDurationRequest> $type;

  @jni$_.internal
  AggregateGroupByDurationRequest.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/AggregateGroupByDurationRequest');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AggregateGroupByDurationRequest$NullableType();
  static const type = $AggregateGroupByDurationRequest$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Duration;Ljava/util/Set;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration duration, java.util.Set set1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByDurationRequest(
    jni$_.JSet<AggregateMetric<jni$_.JObject>> set,
    TimeRangeFilter timeRangeFilter,
    jni$_.JObject duration,
    jni$_.JSet<jni$_.JObject> set1,
  ) {
    final _$set = set.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    final _$duration = duration.reference;
    final _$set1 = set1.reference;
    return AggregateGroupByDurationRequest.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$timeRangeFilter.pointer,
            _$duration.pointer,
            _$set1.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Duration;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration duration, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByDurationRequest.new$1(
    jni$_.JSet<jni$_.JObject?>? set,
    TimeRangeFilter? timeRangeFilter,
    jni$_.JObject? duration,
    jni$_.JSet<jni$_.JObject?>? set1,
    int i,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$timeRangeFilter =
        timeRangeFilter?.reference ?? jni$_.jNullReference;
    final _$duration = duration?.reference ?? jni$_.jNullReference;
    final _$set1 = set1?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return AggregateGroupByDurationRequest.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$timeRangeFilter.pointer,
            _$duration.pointer,
            _$set1.pointer,
            i,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $AggregateGroupByDurationRequest$NullableType
    extends jni$_.JObjType<AggregateGroupByDurationRequest?> {
  @jni$_.internal
  const $AggregateGroupByDurationRequest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;';

  @jni$_.internal
  @core$_.override
  AggregateGroupByDurationRequest? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateGroupByDurationRequest.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateGroupByDurationRequest?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateGroupByDurationRequest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateGroupByDurationRequest$NullableType) &&
        other is $AggregateGroupByDurationRequest$NullableType;
  }
}

final class $AggregateGroupByDurationRequest$Type
    extends jni$_.JObjType<AggregateGroupByDurationRequest> {
  @jni$_.internal
  const $AggregateGroupByDurationRequest$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;';

  @jni$_.internal
  @core$_.override
  AggregateGroupByDurationRequest fromReference(jni$_.JReference reference) =>
      AggregateGroupByDurationRequest.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateGroupByDurationRequest?> get nullableType =>
      const $AggregateGroupByDurationRequest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateGroupByDurationRequest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateGroupByDurationRequest$Type) &&
        other is $AggregateGroupByDurationRequest$Type;
  }
}

/// from: `androidx.health.connect.client.request.AggregateGroupByPeriodRequest`
class AggregateGroupByPeriodRequest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateGroupByPeriodRequest> $type;

  @jni$_.internal
  AggregateGroupByPeriodRequest.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/AggregateGroupByPeriodRequest');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AggregateGroupByPeriodRequest$NullableType();
  static const type = $AggregateGroupByPeriodRequest$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Period;Ljava/util/Set;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period period, java.util.Set set1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByPeriodRequest(
    jni$_.JSet<AggregateMetric<jni$_.JObject>> set,
    TimeRangeFilter timeRangeFilter,
    jni$_.JObject period,
    jni$_.JSet<jni$_.JObject> set1,
  ) {
    final _$set = set.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    final _$period = period.reference;
    final _$set1 = set1.reference;
    return AggregateGroupByPeriodRequest.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$timeRangeFilter.pointer,
            _$period.pointer,
            _$set1.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Period;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period period, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByPeriodRequest.new$1(
    jni$_.JSet<jni$_.JObject?>? set,
    TimeRangeFilter? timeRangeFilter,
    jni$_.JObject? period,
    jni$_.JSet<jni$_.JObject?>? set1,
    int i,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$timeRangeFilter =
        timeRangeFilter?.reference ?? jni$_.jNullReference;
    final _$period = period?.reference ?? jni$_.jNullReference;
    final _$set1 = set1?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return AggregateGroupByPeriodRequest.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$timeRangeFilter.pointer,
            _$period.pointer,
            _$set1.pointer,
            i,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $AggregateGroupByPeriodRequest$NullableType
    extends jni$_.JObjType<AggregateGroupByPeriodRequest?> {
  @jni$_.internal
  const $AggregateGroupByPeriodRequest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;';

  @jni$_.internal
  @core$_.override
  AggregateGroupByPeriodRequest? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateGroupByPeriodRequest.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateGroupByPeriodRequest?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateGroupByPeriodRequest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateGroupByPeriodRequest$NullableType) &&
        other is $AggregateGroupByPeriodRequest$NullableType;
  }
}

final class $AggregateGroupByPeriodRequest$Type
    extends jni$_.JObjType<AggregateGroupByPeriodRequest> {
  @jni$_.internal
  const $AggregateGroupByPeriodRequest$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;';

  @jni$_.internal
  @core$_.override
  AggregateGroupByPeriodRequest fromReference(jni$_.JReference reference) =>
      AggregateGroupByPeriodRequest.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateGroupByPeriodRequest?> get nullableType =>
      const $AggregateGroupByPeriodRequest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateGroupByPeriodRequest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateGroupByPeriodRequest$Type) &&
        other is $AggregateGroupByPeriodRequest$Type;
  }
}

/// from: `androidx.health.connect.client.request.AggregateRequest`
class AggregateRequest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateRequest> $type;

  @jni$_.internal
  AggregateRequest.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/AggregateRequest');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AggregateRequest$NullableType();
  static const type = $AggregateRequest$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateRequest(
    jni$_.JSet<AggregateMetric<jni$_.JObject>> set,
    TimeRangeFilter timeRangeFilter,
    jni$_.JSet<jni$_.JObject> set1,
  ) {
    final _$set = set.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    final _$set1 = set1.reference;
    return AggregateRequest.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$timeRangeFilter.pointer,
            _$set1.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateRequest.new$1(
    jni$_.JSet<jni$_.JObject?>? set,
    TimeRangeFilter? timeRangeFilter,
    jni$_.JSet<jni$_.JObject?>? set1,
    int i,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$timeRangeFilter =
        timeRangeFilter?.reference ?? jni$_.jNullReference;
    final _$set1 = set1?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return AggregateRequest.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$timeRangeFilter.pointer,
            _$set1.pointer,
            i,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $AggregateRequest$NullableType
    extends jni$_.JObjType<AggregateRequest?> {
  @jni$_.internal
  const $AggregateRequest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/AggregateRequest;';

  @jni$_.internal
  @core$_.override
  AggregateRequest? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateRequest.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateRequest?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateRequest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateRequest$NullableType) &&
        other is $AggregateRequest$NullableType;
  }
}

final class $AggregateRequest$Type extends jni$_.JObjType<AggregateRequest> {
  @jni$_.internal
  const $AggregateRequest$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/AggregateRequest;';

  @jni$_.internal
  @core$_.override
  AggregateRequest fromReference(jni$_.JReference reference) =>
      AggregateRequest.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateRequest?> get nullableType =>
      const $AggregateRequest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateRequest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateRequest$Type) &&
        other is $AggregateRequest$Type;
  }
}

/// from: `androidx.health.connect.client.request.ChangesTokenRequest`
class ChangesTokenRequest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ChangesTokenRequest> $type;

  @jni$_.internal
  ChangesTokenRequest.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/ChangesTokenRequest');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ChangesTokenRequest$NullableType();
  static const type = $ChangesTokenRequest$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/Set;Ljava/util/Set;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.util.Set set, java.util.Set set1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ChangesTokenRequest(
    jni$_.JSet<jni$_.JObject> set,
    jni$_.JSet<jni$_.JObject> set1,
  ) {
    final _$set = set.reference;
    final _$set1 = set1.reference;
    return ChangesTokenRequest.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$set.pointer, _$set1.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/util/Set;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(java.util.Set set, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ChangesTokenRequest.new$1(
    jni$_.JSet<jni$_.JObject?>? set,
    jni$_.JSet<jni$_.JObject?>? set1,
    int i,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$set1 = set1?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return ChangesTokenRequest.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$set.pointer,
            _$set1.pointer,
            i,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $ChangesTokenRequest$NullableType
    extends jni$_.JObjType<ChangesTokenRequest?> {
  @jni$_.internal
  const $ChangesTokenRequest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ChangesTokenRequest;';

  @jni$_.internal
  @core$_.override
  ChangesTokenRequest? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ChangesTokenRequest.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ChangesTokenRequest?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ChangesTokenRequest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ChangesTokenRequest$NullableType) &&
        other is $ChangesTokenRequest$NullableType;
  }
}

final class $ChangesTokenRequest$Type
    extends jni$_.JObjType<ChangesTokenRequest> {
  @jni$_.internal
  const $ChangesTokenRequest$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ChangesTokenRequest;';

  @jni$_.internal
  @core$_.override
  ChangesTokenRequest fromReference(jni$_.JReference reference) =>
      ChangesTokenRequest.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ChangesTokenRequest?> get nullableType =>
      const $ChangesTokenRequest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ChangesTokenRequest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ChangesTokenRequest$Type) &&
        other is $ChangesTokenRequest$Type;
  }
}

/// from: `androidx.health.connect.client.request.ReadRecordsRequest`
class ReadRecordsRequest<$T extends jni$_.JObject> extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ReadRecordsRequest<$T>> $type;

  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  ReadRecordsRequest.fromReference(
    this.T,
    jni$_.JReference reference,
  )   : $type = type<$T>(T),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/ReadRecordsRequest');

  /// The type which includes information such as the signature of this class.
  static $ReadRecordsRequest$NullableType<$T>
      nullableType<$T extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
  ) {
    return $ReadRecordsRequest$NullableType<$T>(
      T,
    );
  }

  static $ReadRecordsRequest$Type<$T> type<$T extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
  ) {
    return $ReadRecordsRequest$Type<$T>(
      T,
    );
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest(
    jni$_.JObject kClass,
    TimeRangeFilter timeRangeFilter,
    jni$_.JSet<jni$_.JObject> set,
    bool z,
    int i,
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    final _$set = set.reference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return ReadRecordsRequest<$T>.fromReference(
        T,
        _new$(
                _class.reference.pointer,
                _id_new$ as jni$_.JMethodIDPtr,
                _$kClass.pointer,
                _$timeRangeFilter.pointer,
                _$set.pointer,
                z ? 1 : 0,
                i,
                _$string.pointer)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string, int i1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest.new$1(
    jni$_.JObject? kClass,
    TimeRangeFilter? timeRangeFilter,
    jni$_.JSet<jni$_.JObject?>? set,
    bool z,
    int i,
    jni$_.JString? string,
    int i1,
    jni$_.JObject? defaultConstructorMarker, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass?.reference ?? jni$_.jNullReference;
    final _$timeRangeFilter =
        timeRangeFilter?.reference ?? jni$_.jNullReference;
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return ReadRecordsRequest<$T>.fromReference(
        T,
        _new$1(
                _class.reference.pointer,
                _id_new$1 as jni$_.JMethodIDPtr,
                _$kClass.pointer,
                _$timeRangeFilter.pointer,
                _$set.pointer,
                z ? 1 : 0,
                i,
                _$string.pointer,
                i1,
                _$defaultConstructorMarker.pointer)
            .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $ReadRecordsRequest$NullableType<$T extends jni$_.JObject>
    extends jni$_.JObjType<ReadRecordsRequest<$T>?> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $ReadRecordsRequest$NullableType(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest<$T>? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ReadRecordsRequest<$T>.fromReference(
              T,
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest<$T>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($ReadRecordsRequest$NullableType, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequest$NullableType<$T>) &&
        other is $ReadRecordsRequest$NullableType<$T> &&
        T == other.T;
  }
}

final class $ReadRecordsRequest$Type<$T extends jni$_.JObject>
    extends jni$_.JObjType<ReadRecordsRequest<$T>> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $ReadRecordsRequest$Type(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest<$T> fromReference(jni$_.JReference reference) =>
      ReadRecordsRequest<$T>.fromReference(
        T,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest<$T>?> get nullableType =>
      $ReadRecordsRequest$NullableType<$T>(T);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($ReadRecordsRequest$Type, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequest$Type<$T>) &&
        other is $ReadRecordsRequest$Type<$T> &&
        T == other.T;
  }
}

/// from: `androidx.health.connect.client.aggregate.AggregationResult`
class AggregationResult extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregationResult> $type;

  @jni$_.internal
  AggregationResult.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/aggregate/AggregationResult');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AggregationResult$NullableType();
  static const type = $AggregationResult$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/Map;Ljava/util/Map;Ljava/util/Set;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.util.Map map, java.util.Map map1, java.util.Set set)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregationResult(
    jni$_.JMap<jni$_.JString, jni$_.JLong> map,
    jni$_.JMap<jni$_.JString, jni$_.JDouble> map1,
    jni$_.JSet<jni$_.JObject> set,
  ) {
    final _$map = map.reference;
    final _$map1 = map1.reference;
    final _$set = set.reference;
    return AggregationResult.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$map.pointer,
            _$map1.pointer,
            _$set.pointer)
        .reference);
  }

  static final _id_getDataOrigins = _class.instanceMethodId(
    r'getDataOrigins',
    r'()Ljava/util/Set;',
  );

  static final _getDataOrigins = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Set getDataOrigins()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<jni$_.JObject> getDataOrigins() {
    return _getDataOrigins(
            reference.pointer, _id_getDataOrigins as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<jni$_.JObject>>(
            const jni$_.JSetType<jni$_.JObject>(jni$_.JObjectType()));
  }

  static final _id_hasMetric = _class.instanceMethodId(
    r'hasMetric',
    r'(Landroidx/health/connect/client/aggregate/AggregateMetric;)Z',
  );

  static final _hasMetric = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)`
  bool hasMetric(
    AggregateMetric<jni$_.JObject> aggregateMetric,
  ) {
    final _$aggregateMetric = aggregateMetric.reference;
    return _hasMetric(reference.pointer, _id_hasMetric as jni$_.JMethodIDPtr,
            _$aggregateMetric.pointer)
        .boolean;
  }

  static final _id_contains = _class.instanceMethodId(
    r'contains',
    r'(Landroidx/health/connect/client/aggregate/AggregateMetric;)Z',
  );

  static final _contains = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean contains(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)`
  bool contains(
    AggregateMetric<jni$_.JObject> aggregateMetric,
  ) {
    final _$aggregateMetric = aggregateMetric.reference;
    return _contains(reference.pointer, _id_contains as jni$_.JMethodIDPtr,
            _$aggregateMetric.pointer)
        .boolean;
  }

  static final _id_getMetric = _class.instanceMethodId(
    r'getMetric',
    r'(Landroidx/health/connect/client/aggregate/AggregateMetric;)Ljava/lang/Object;',
  );

  static final _getMetric = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final T getMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getMetric<$T extends jni$_.JObject>(
    AggregateMetric<$T> aggregateMetric, {
    jni$_.JObjType<$T>? T,
  }) {
    T ??= jni$_.lowestCommonSuperType([
      (aggregateMetric.$type as $AggregateMetric$Type<core$_.dynamic>).T,
    ]) as jni$_.JObjType<$T>;
    final _$aggregateMetric = aggregateMetric.reference;
    return _getMetric(reference.pointer, _id_getMetric as jni$_.JMethodIDPtr,
            _$aggregateMetric.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_get = _class.instanceMethodId(
    r'get',
    r'(Landroidx/health/connect/client/aggregate/AggregateMetric;)Ljava/lang/Object;',
  );

  static final _get = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final T get(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? get<$T extends jni$_.JObject>(
    AggregateMetric<$T> aggregateMetric, {
    jni$_.JObjType<$T>? T,
  }) {
    T ??= jni$_.lowestCommonSuperType([
      (aggregateMetric.$type as $AggregateMetric$Type<core$_.dynamic>).T,
    ]) as jni$_.JObjType<$T>;
    final _$aggregateMetric = aggregateMetric.reference;
    return _get(reference.pointer, _id_get as jni$_.JMethodIDPtr,
            _$aggregateMetric.pointer)
        .object<$T?>(T.nullableType);
  }
}

final class $AggregationResult$NullableType
    extends jni$_.JObjType<AggregationResult?> {
  @jni$_.internal
  const $AggregationResult$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregationResult;';

  @jni$_.internal
  @core$_.override
  AggregationResult? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregationResult.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregationResult?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregationResult$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregationResult$NullableType) &&
        other is $AggregationResult$NullableType;
  }
}

final class $AggregationResult$Type extends jni$_.JObjType<AggregationResult> {
  @jni$_.internal
  const $AggregationResult$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregationResult;';

  @jni$_.internal
  @core$_.override
  AggregationResult fromReference(jni$_.JReference reference) =>
      AggregationResult.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregationResult?> get nullableType =>
      const $AggregationResult$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregationResult$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregationResult$Type) &&
        other is $AggregationResult$Type;
  }
}

/// from: `androidx.health.connect.client.aggregate.AggregateMetric$AggregationType`
class AggregateMetric$AggregationType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateMetric$AggregationType> $type;

  @jni$_.internal
  AggregateMetric$AggregationType.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/aggregate/AggregateMetric$AggregationType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AggregateMetric$AggregationType$NullableType();
  static const type = $AggregateMetric$AggregationType$Type();
  static final _id_DURATION = _class.staticFieldId(
    r'DURATION',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType DURATION`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$AggregationType get DURATION =>
      _id_DURATION.get(_class, const $AggregateMetric$AggregationType$Type());

  static final _id_AVERAGE = _class.staticFieldId(
    r'AVERAGE',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType AVERAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$AggregationType get AVERAGE =>
      _id_AVERAGE.get(_class, const $AggregateMetric$AggregationType$Type());

  static final _id_MINIMUM = _class.staticFieldId(
    r'MINIMUM',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType MINIMUM`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$AggregationType get MINIMUM =>
      _id_MINIMUM.get(_class, const $AggregateMetric$AggregationType$Type());

  static final _id_MAXIMUM = _class.staticFieldId(
    r'MAXIMUM',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType MAXIMUM`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$AggregationType get MAXIMUM =>
      _id_MAXIMUM.get(_class, const $AggregateMetric$AggregationType$Type());

  static final _id_TOTAL = _class.staticFieldId(
    r'TOTAL',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType TOTAL`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$AggregationType get TOTAL =>
      _id_TOTAL.get(_class, const $AggregateMetric$AggregationType$Type());

  static final _id_COUNT = _class.staticFieldId(
    r'COUNT',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType COUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$AggregationType get COUNT =>
      _id_COUNT.get(_class, const $AggregateMetric$AggregationType$Type());

  static final _id_getAggregationTypeString = _class.instanceMethodId(
    r'getAggregationTypeString',
    r'()Ljava/lang/String;',
  );

  static final _getAggregationTypeString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getAggregationTypeString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getAggregationTypeString() {
    return _getAggregationTypeString(reference.pointer,
            _id_getAggregationTypeString as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  static final _values = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public androidx.health.connect.client.aggregate.AggregateMetric$AggregationType[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JArray<AggregateMetric$AggregationType?>? values() {
    return _values(_class.reference.pointer, _id_values as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<AggregateMetric$AggregationType?>?>(
            const jni$_.JArrayNullableType<AggregateMetric$AggregationType?>(
                $AggregateMetric$AggregationType$NullableType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;',
  );

  static final _valueOf = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.health.connect.client.aggregate.AggregateMetric$AggregationType valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$AggregationType? valueOf(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _valueOf(_class.reference.pointer, _id_valueOf as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<AggregateMetric$AggregationType?>(
            const $AggregateMetric$AggregationType$NullableType());
  }
}

final class $AggregateMetric$AggregationType$NullableType
    extends jni$_.JObjType<AggregateMetric$AggregationType?> {
  @jni$_.internal
  const $AggregateMetric$AggregationType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$AggregationType? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateMetric$AggregationType.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$AggregationType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateMetric$AggregationType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric$AggregationType$NullableType) &&
        other is $AggregateMetric$AggregationType$NullableType;
  }
}

final class $AggregateMetric$AggregationType$Type
    extends jni$_.JObjType<AggregateMetric$AggregationType> {
  @jni$_.internal
  const $AggregateMetric$AggregationType$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$AggregationType fromReference(jni$_.JReference reference) =>
      AggregateMetric$AggregationType.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$AggregationType?> get nullableType =>
      const $AggregateMetric$AggregationType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateMetric$AggregationType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric$AggregationType$Type) &&
        other is $AggregateMetric$AggregationType$Type;
  }
}

/// from: `androidx.health.connect.client.aggregate.AggregateMetric$Companion`
class AggregateMetric$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateMetric$Companion> $type;

  @jni$_.internal
  AggregateMetric$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/aggregate/AggregateMetric$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AggregateMetric$Companion$NullableType();
  static const type = $AggregateMetric$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateMetric$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return AggregateMetric$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $AggregateMetric$Companion$NullableType
    extends jni$_.JObjType<AggregateMetric$Companion?> {
  @jni$_.internal
  const $AggregateMetric$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Companion;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateMetric$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateMetric$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric$Companion$NullableType) &&
        other is $AggregateMetric$Companion$NullableType;
  }
}

final class $AggregateMetric$Companion$Type
    extends jni$_.JObjType<AggregateMetric$Companion> {
  @jni$_.internal
  const $AggregateMetric$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Companion;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Companion fromReference(jni$_.JReference reference) =>
      AggregateMetric$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Companion?> get nullableType =>
      const $AggregateMetric$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AggregateMetric$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric$Companion$Type) &&
        other is $AggregateMetric$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromDouble`
class AggregateMetric$Converter$FromDouble<$R extends jni$_.JObject>
    extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateMetric$Converter$FromDouble<$R>> $type;

  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  AggregateMetric$Converter$FromDouble.fromReference(
    this.R,
    jni$_.JReference reference,
  )   : $type = type<$R>(R),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/aggregate/AggregateMetric$Converter$FromDouble');

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric$Converter$FromDouble$NullableType<$R>
      nullableType<$R extends jni$_.JObject>(
    jni$_.JObjType<$R> R,
  ) {
    return $AggregateMetric$Converter$FromDouble$NullableType<$R>(
      R,
    );
  }

  static $AggregateMetric$Converter$FromDouble$Type<$R>
      type<$R extends jni$_.JObject>(
    jni$_.JObjType<$R> R,
  ) {
    return $AggregateMetric$Converter$FromDouble$Type<$R>(
      R,
    );
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $AggregateMetric$Converter$FromDouble> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn<$R extends jni$_.JObject>(
    jni$_.JImplementer implementer,
    $AggregateMetric$Converter$FromDouble<$R> $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromDouble',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AggregateMetric$Converter$FromDouble.implement(
    $AggregateMetric$Converter$FromDouble<$R> $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return AggregateMetric$Converter$FromDouble<$R>.fromReference(
      $impl.R,
      $i.implementReference(),
    );
  }
}

abstract base mixin class $AggregateMetric$Converter$FromDouble<
    $R extends jni$_.JObject> {
  factory $AggregateMetric$Converter$FromDouble({
    required jni$_.JObjType<$R> R,
  }) = _$AggregateMetric$Converter$FromDouble<$R>;

  jni$_.JObjType<$R> get R;
}

final class _$AggregateMetric$Converter$FromDouble<$R extends jni$_.JObject>
    with $AggregateMetric$Converter$FromDouble<$R> {
  _$AggregateMetric$Converter$FromDouble({
    required this.R,
  });

  @core$_.override
  final jni$_.JObjType<$R> R;
}

final class $AggregateMetric$Converter$FromDouble$NullableType<
        $R extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric$Converter$FromDouble<$R>?> {
  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  const $AggregateMetric$Converter$FromDouble$NullableType(
    this.R,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromDouble;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Converter$FromDouble<$R>? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateMetric$Converter$FromDouble<$R>.fromReference(
              R,
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Converter$FromDouble<$R>?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      Object.hash($AggregateMetric$Converter$FromDouble$NullableType, R);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric$Converter$FromDouble$NullableType<$R>) &&
        other is $AggregateMetric$Converter$FromDouble$NullableType<$R> &&
        R == other.R;
  }
}

final class $AggregateMetric$Converter$FromDouble$Type<$R extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric$Converter$FromDouble<$R>> {
  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  const $AggregateMetric$Converter$FromDouble$Type(
    this.R,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromDouble;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Converter$FromDouble<$R> fromReference(
          jni$_.JReference reference) =>
      AggregateMetric$Converter$FromDouble<$R>.fromReference(
        R,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Converter$FromDouble<$R>?> get nullableType =>
      $AggregateMetric$Converter$FromDouble$NullableType<$R>(R);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      Object.hash($AggregateMetric$Converter$FromDouble$Type, R);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric$Converter$FromDouble$Type<$R>) &&
        other is $AggregateMetric$Converter$FromDouble$Type<$R> &&
        R == other.R;
  }
}

/// from: `androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromLong`
class AggregateMetric$Converter$FromLong<$R extends jni$_.JObject>
    extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateMetric$Converter$FromLong<$R>> $type;

  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  AggregateMetric$Converter$FromLong.fromReference(
    this.R,
    jni$_.JReference reference,
  )   : $type = type<$R>(R),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/aggregate/AggregateMetric$Converter$FromLong');

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric$Converter$FromLong$NullableType<$R>
      nullableType<$R extends jni$_.JObject>(
    jni$_.JObjType<$R> R,
  ) {
    return $AggregateMetric$Converter$FromLong$NullableType<$R>(
      R,
    );
  }

  static $AggregateMetric$Converter$FromLong$Type<$R>
      type<$R extends jni$_.JObject>(
    jni$_.JObjType<$R> R,
  ) {
    return $AggregateMetric$Converter$FromLong$Type<$R>(
      R,
    );
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $AggregateMetric$Converter$FromLong> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn<$R extends jni$_.JObject>(
    jni$_.JImplementer implementer,
    $AggregateMetric$Converter$FromLong<$R> $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromLong',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AggregateMetric$Converter$FromLong.implement(
    $AggregateMetric$Converter$FromLong<$R> $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return AggregateMetric$Converter$FromLong<$R>.fromReference(
      $impl.R,
      $i.implementReference(),
    );
  }
}

abstract base mixin class $AggregateMetric$Converter$FromLong<
    $R extends jni$_.JObject> {
  factory $AggregateMetric$Converter$FromLong({
    required jni$_.JObjType<$R> R,
  }) = _$AggregateMetric$Converter$FromLong<$R>;

  jni$_.JObjType<$R> get R;
}

final class _$AggregateMetric$Converter$FromLong<$R extends jni$_.JObject>
    with $AggregateMetric$Converter$FromLong<$R> {
  _$AggregateMetric$Converter$FromLong({
    required this.R,
  });

  @core$_.override
  final jni$_.JObjType<$R> R;
}

final class $AggregateMetric$Converter$FromLong$NullableType<
        $R extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric$Converter$FromLong<$R>?> {
  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  const $AggregateMetric$Converter$FromLong$NullableType(
    this.R,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromLong;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Converter$FromLong<$R>? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateMetric$Converter$FromLong<$R>.fromReference(
              R,
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Converter$FromLong<$R>?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      Object.hash($AggregateMetric$Converter$FromLong$NullableType, R);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric$Converter$FromLong$NullableType<$R>) &&
        other is $AggregateMetric$Converter$FromLong$NullableType<$R> &&
        R == other.R;
  }
}

final class $AggregateMetric$Converter$FromLong$Type<$R extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric$Converter$FromLong<$R>> {
  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  const $AggregateMetric$Converter$FromLong$Type(
    this.R,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromLong;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Converter$FromLong<$R> fromReference(
          jni$_.JReference reference) =>
      AggregateMetric$Converter$FromLong<$R>.fromReference(
        R,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Converter$FromLong<$R>?> get nullableType =>
      $AggregateMetric$Converter$FromLong$NullableType<$R>(R);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($AggregateMetric$Converter$FromLong$Type, R);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric$Converter$FromLong$Type<$R>) &&
        other is $AggregateMetric$Converter$FromLong$Type<$R> &&
        R == other.R;
  }
}

/// from: `androidx.health.connect.client.aggregate.AggregateMetric$Converter`
class AggregateMetric$Converter<$T extends jni$_.JObject,
    $R extends jni$_.JObject> extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateMetric$Converter<$T, $R>> $type;

  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  AggregateMetric$Converter.fromReference(
    this.T,
    this.R,
    jni$_.JReference reference,
  )   : $type = type<$T, $R>(T, R),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/aggregate/AggregateMetric$Converter');

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric$Converter$NullableType<$T, $R>
      nullableType<$T extends jni$_.JObject, $R extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
    jni$_.JObjType<$R> R,
  ) {
    return $AggregateMetric$Converter$NullableType<$T, $R>(
      T,
      R,
    );
  }

  static $AggregateMetric$Converter$Type<$T, $R>
      type<$T extends jni$_.JObject, $R extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
    jni$_.JObjType<$R> R,
  ) {
    return $AggregateMetric$Converter$Type<$T, $R>(
      T,
      R,
    );
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $AggregateMetric$Converter> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn<$T extends jni$_.JObject, $R extends jni$_.JObject>(
    jni$_.JImplementer implementer,
    $AggregateMetric$Converter<$T, $R> $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.aggregate.AggregateMetric$Converter',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AggregateMetric$Converter.implement(
    $AggregateMetric$Converter<$T, $R> $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return AggregateMetric$Converter<$T, $R>.fromReference(
      $impl.T,
      $impl.R,
      $i.implementReference(),
    );
  }
}

abstract base mixin class $AggregateMetric$Converter<$T extends jni$_.JObject,
    $R extends jni$_.JObject> {
  factory $AggregateMetric$Converter({
    required jni$_.JObjType<$T> T,
    required jni$_.JObjType<$R> R,
  }) = _$AggregateMetric$Converter<$T, $R>;

  jni$_.JObjType<$T> get T;
  jni$_.JObjType<$R> get R;
}

final class _$AggregateMetric$Converter<$T extends jni$_.JObject,
    $R extends jni$_.JObject> with $AggregateMetric$Converter<$T, $R> {
  _$AggregateMetric$Converter({
    required this.T,
    required this.R,
  });

  @core$_.override
  final jni$_.JObjType<$T> T;

  @core$_.override
  final jni$_.JObjType<$R> R;
}

final class $AggregateMetric$Converter$NullableType<$T extends jni$_.JObject,
        $R extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric$Converter<$T, $R>?> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  const $AggregateMetric$Converter$NullableType(
    this.T,
    this.R,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Converter;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Converter<$T, $R>? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateMetric$Converter<$T, $R>.fromReference(
              T,
              R,
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Converter<$T, $R>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      Object.hash($AggregateMetric$Converter$NullableType, T, R);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric$Converter$NullableType<$T, $R>) &&
        other is $AggregateMetric$Converter$NullableType<$T, $R> &&
        T == other.T &&
        R == other.R;
  }
}

final class $AggregateMetric$Converter$Type<$T extends jni$_.JObject,
        $R extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric$Converter<$T, $R>> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  final jni$_.JObjType<$R> R;

  @jni$_.internal
  const $AggregateMetric$Converter$Type(
    this.T,
    this.R,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric$Converter;';

  @jni$_.internal
  @core$_.override
  AggregateMetric$Converter<$T, $R> fromReference(jni$_.JReference reference) =>
      AggregateMetric$Converter<$T, $R>.fromReference(
        T,
        R,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric$Converter<$T, $R>?> get nullableType =>
      $AggregateMetric$Converter$NullableType<$T, $R>(T, R);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($AggregateMetric$Converter$Type, T, R);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric$Converter$Type<$T, $R>) &&
        other is $AggregateMetric$Converter$Type<$T, $R> &&
        T == other.T &&
        R == other.R;
  }
}

/// from: `androidx.health.connect.client.aggregate.AggregateMetric`
class AggregateMetric<$T extends jni$_.JObject> extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AggregateMetric<$T>> $type;

  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  AggregateMetric.fromReference(
    this.T,
    jni$_.JReference reference,
  )   : $type = type<$T>(T),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/aggregate/AggregateMetric');

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric$NullableType<$T>
      nullableType<$T extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
  ) {
    return $AggregateMetric$NullableType<$T>(
      T,
    );
  }

  static $AggregateMetric$Type<$T> type<$T extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
  ) {
    return $AggregateMetric$Type<$T>(
      T,
    );
  }

  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric$Companion get Companion =>
      _id_Companion.get(_class, const $AggregateMetric$Companion$Type());

  static final _id_new$ = _class.constructorId(
    r'(Landroidx/health/connect/client/aggregate/AggregateMetric$Converter;Ljava/lang/String;Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(androidx.health.connect.client.aggregate.AggregateMetric$Converter converter, java.lang.String string, androidx.health.connect.client.aggregate.AggregateMetric$AggregationType aggregationType, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateMetric(
    AggregateMetric$Converter<jni$_.JObject, $T> converter,
    jni$_.JString string,
    AggregateMetric$AggregationType aggregationType,
    jni$_.JString? string1, {
    jni$_.JObjType<$T>? T,
  }) {
    T ??= jni$_.lowestCommonSuperType([
      (converter.$type as $AggregateMetric$Converter$Type<core$_.dynamic,
              core$_.dynamic>)
          .R,
    ]) as jni$_.JObjType<$T>;
    final _$converter = converter.reference;
    final _$string = string.reference;
    final _$aggregationType = aggregationType.reference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return AggregateMetric<$T>.fromReference(
        T,
        _new$(
                _class.reference.pointer,
                _id_new$ as jni$_.JMethodIDPtr,
                _$converter.pointer,
                _$string.pointer,
                _$aggregationType.pointer,
                _$string1.pointer)
            .reference);
  }
}

final class $AggregateMetric$NullableType<$T extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric<$T>?> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $AggregateMetric$NullableType(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric;';

  @jni$_.internal
  @core$_.override
  AggregateMetric<$T>? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : AggregateMetric<$T>.fromReference(
              T,
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric<$T>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($AggregateMetric$NullableType, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric$NullableType<$T>) &&
        other is $AggregateMetric$NullableType<$T> &&
        T == other.T;
  }
}

final class $AggregateMetric$Type<$T extends jni$_.JObject>
    extends jni$_.JObjType<AggregateMetric<$T>> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $AggregateMetric$Type(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/aggregate/AggregateMetric;';

  @jni$_.internal
  @core$_.override
  AggregateMetric<$T> fromReference(jni$_.JReference reference) =>
      AggregateMetric<$T>.fromReference(
        T,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AggregateMetric<$T>?> get nullableType =>
      $AggregateMetric$NullableType<$T>(T);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($AggregateMetric$Type, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric$Type<$T>) &&
        other is $AggregateMetric$Type<$T> &&
        T == other.T;
  }
}
